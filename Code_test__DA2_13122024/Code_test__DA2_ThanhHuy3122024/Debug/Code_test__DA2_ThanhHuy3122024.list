
Code_test__DA2_ThanhHuy3122024.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d808  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008a4  0800d998  0800d998  0000e998  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e23c  0800e23c  0001024c  2**0
                  CONTENTS
  4 .ARM          00000008  0800e23c  0800e23c  0000f23c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e244  0800e244  0001024c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e244  0800e244  0000f244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e248  0800e248  0000f248  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000024c  20000000  0800e24c  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0001024c  2**0
                  CONTENTS
 10 .bss          00000664  20000250  20000250  00010250  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  200008b4  200008b4  00010250  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0001024c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000135f8  00000000  00000000  0001027c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002a73  00000000  00000000  00023874  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011b8  00000000  00000000  000262e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000dec  00000000  00000000  000274a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000230d6  00000000  00000000  0002828c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015acc  00000000  00000000  0004b362  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d0552  00000000  00000000  00060e2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00131380  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006334  00000000  00000000  001313c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000077  00000000  00000000  001376f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000250 	.word	0x20000250
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d980 	.word	0x0800d980

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000254 	.word	0x20000254
 80001cc:	0800d980 	.word	0x0800d980

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a0 	b.w	8000fe0 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	460c      	mov	r4, r1
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d14e      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d30:	4694      	mov	ip, r2
 8000d32:	458c      	cmp	ip, r1
 8000d34:	4686      	mov	lr, r0
 8000d36:	fab2 f282 	clz	r2, r2
 8000d3a:	d962      	bls.n	8000e02 <__udivmoddi4+0xde>
 8000d3c:	b14a      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d3e:	f1c2 0320 	rsb	r3, r2, #32
 8000d42:	4091      	lsls	r1, r2
 8000d44:	fa20 f303 	lsr.w	r3, r0, r3
 8000d48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4c:	4319      	orrs	r1, r3
 8000d4e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d52:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d56:	fa1f f68c 	uxth.w	r6, ip
 8000d5a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d5e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d62:	fb07 1114 	mls	r1, r7, r4, r1
 8000d66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d6a:	fb04 f106 	mul.w	r1, r4, r6
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d7a:	f080 8112 	bcs.w	8000fa2 <__udivmoddi4+0x27e>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 810f 	bls.w	8000fa2 <__udivmoddi4+0x27e>
 8000d84:	3c02      	subs	r4, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a59      	subs	r1, r3, r1
 8000d8a:	fa1f f38e 	uxth.w	r3, lr
 8000d8e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d92:	fb07 1110 	mls	r1, r7, r0, r1
 8000d96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d9a:	fb00 f606 	mul.w	r6, r0, r6
 8000d9e:	429e      	cmp	r6, r3
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x94>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000daa:	f080 80fc 	bcs.w	8000fa6 <__udivmoddi4+0x282>
 8000dae:	429e      	cmp	r6, r3
 8000db0:	f240 80f9 	bls.w	8000fa6 <__udivmoddi4+0x282>
 8000db4:	4463      	add	r3, ip
 8000db6:	3802      	subs	r0, #2
 8000db8:	1b9b      	subs	r3, r3, r6
 8000dba:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	b11d      	cbz	r5, 8000dca <__udivmoddi4+0xa6>
 8000dc2:	40d3      	lsrs	r3, r2
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d905      	bls.n	8000dde <__udivmoddi4+0xba>
 8000dd2:	b10d      	cbz	r5, 8000dd8 <__udivmoddi4+0xb4>
 8000dd4:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e7f5      	b.n	8000dca <__udivmoddi4+0xa6>
 8000dde:	fab3 f183 	clz	r1, r3
 8000de2:	2900      	cmp	r1, #0
 8000de4:	d146      	bne.n	8000e74 <__udivmoddi4+0x150>
 8000de6:	42a3      	cmp	r3, r4
 8000de8:	d302      	bcc.n	8000df0 <__udivmoddi4+0xcc>
 8000dea:	4290      	cmp	r0, r2
 8000dec:	f0c0 80f0 	bcc.w	8000fd0 <__udivmoddi4+0x2ac>
 8000df0:	1a86      	subs	r6, r0, r2
 8000df2:	eb64 0303 	sbc.w	r3, r4, r3
 8000df6:	2001      	movs	r0, #1
 8000df8:	2d00      	cmp	r5, #0
 8000dfa:	d0e6      	beq.n	8000dca <__udivmoddi4+0xa6>
 8000dfc:	e9c5 6300 	strd	r6, r3, [r5]
 8000e00:	e7e3      	b.n	8000dca <__udivmoddi4+0xa6>
 8000e02:	2a00      	cmp	r2, #0
 8000e04:	f040 8090 	bne.w	8000f28 <__udivmoddi4+0x204>
 8000e08:	eba1 040c 	sub.w	r4, r1, ip
 8000e0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e10:	fa1f f78c 	uxth.w	r7, ip
 8000e14:	2101      	movs	r1, #1
 8000e16:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e1a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e1e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e26:	fb07 f006 	mul.w	r0, r7, r6
 8000e2a:	4298      	cmp	r0, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x11c>
 8000e2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e32:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x11a>
 8000e38:	4298      	cmp	r0, r3
 8000e3a:	f200 80cd 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e3e:	4626      	mov	r6, r4
 8000e40:	1a1c      	subs	r4, r3, r0
 8000e42:	fa1f f38e 	uxth.w	r3, lr
 8000e46:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e4a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e4e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e52:	fb00 f707 	mul.w	r7, r0, r7
 8000e56:	429f      	cmp	r7, r3
 8000e58:	d908      	bls.n	8000e6c <__udivmoddi4+0x148>
 8000e5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e62:	d202      	bcs.n	8000e6a <__udivmoddi4+0x146>
 8000e64:	429f      	cmp	r7, r3
 8000e66:	f200 80b0 	bhi.w	8000fca <__udivmoddi4+0x2a6>
 8000e6a:	4620      	mov	r0, r4
 8000e6c:	1bdb      	subs	r3, r3, r7
 8000e6e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e72:	e7a5      	b.n	8000dc0 <__udivmoddi4+0x9c>
 8000e74:	f1c1 0620 	rsb	r6, r1, #32
 8000e78:	408b      	lsls	r3, r1
 8000e7a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7e:	431f      	orrs	r7, r3
 8000e80:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e84:	fa04 f301 	lsl.w	r3, r4, r1
 8000e88:	ea43 030c 	orr.w	r3, r3, ip
 8000e8c:	40f4      	lsrs	r4, r6
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	0c38      	lsrs	r0, r7, #16
 8000e94:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e98:	fbb4 fef0 	udiv	lr, r4, r0
 8000e9c:	fa1f fc87 	uxth.w	ip, r7
 8000ea0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ea4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ea8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eac:	45a1      	cmp	r9, r4
 8000eae:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb2:	d90a      	bls.n	8000eca <__udivmoddi4+0x1a6>
 8000eb4:	193c      	adds	r4, r7, r4
 8000eb6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eba:	f080 8084 	bcs.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ebe:	45a1      	cmp	r9, r4
 8000ec0:	f240 8081 	bls.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ec4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ec8:	443c      	add	r4, r7
 8000eca:	eba4 0409 	sub.w	r4, r4, r9
 8000ece:	fa1f f983 	uxth.w	r9, r3
 8000ed2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ed6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eda:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ede:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ee2:	45a4      	cmp	ip, r4
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x1d2>
 8000ee6:	193c      	adds	r4, r7, r4
 8000ee8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000eec:	d267      	bcs.n	8000fbe <__udivmoddi4+0x29a>
 8000eee:	45a4      	cmp	ip, r4
 8000ef0:	d965      	bls.n	8000fbe <__udivmoddi4+0x29a>
 8000ef2:	3b02      	subs	r3, #2
 8000ef4:	443c      	add	r4, r7
 8000ef6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000efa:	fba0 9302 	umull	r9, r3, r0, r2
 8000efe:	eba4 040c 	sub.w	r4, r4, ip
 8000f02:	429c      	cmp	r4, r3
 8000f04:	46ce      	mov	lr, r9
 8000f06:	469c      	mov	ip, r3
 8000f08:	d351      	bcc.n	8000fae <__udivmoddi4+0x28a>
 8000f0a:	d04e      	beq.n	8000faa <__udivmoddi4+0x286>
 8000f0c:	b155      	cbz	r5, 8000f24 <__udivmoddi4+0x200>
 8000f0e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f12:	eb64 040c 	sbc.w	r4, r4, ip
 8000f16:	fa04 f606 	lsl.w	r6, r4, r6
 8000f1a:	40cb      	lsrs	r3, r1
 8000f1c:	431e      	orrs	r6, r3
 8000f1e:	40cc      	lsrs	r4, r1
 8000f20:	e9c5 6400 	strd	r6, r4, [r5]
 8000f24:	2100      	movs	r1, #0
 8000f26:	e750      	b.n	8000dca <__udivmoddi4+0xa6>
 8000f28:	f1c2 0320 	rsb	r3, r2, #32
 8000f2c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f30:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f34:	fa24 f303 	lsr.w	r3, r4, r3
 8000f38:	4094      	lsls	r4, r2
 8000f3a:	430c      	orrs	r4, r1
 8000f3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f40:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f44:	fa1f f78c 	uxth.w	r7, ip
 8000f48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f4c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f50:	0c23      	lsrs	r3, r4, #16
 8000f52:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f56:	fb00 f107 	mul.w	r1, r0, r7
 8000f5a:	4299      	cmp	r1, r3
 8000f5c:	d908      	bls.n	8000f70 <__udivmoddi4+0x24c>
 8000f5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f62:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f66:	d22c      	bcs.n	8000fc2 <__udivmoddi4+0x29e>
 8000f68:	4299      	cmp	r1, r3
 8000f6a:	d92a      	bls.n	8000fc2 <__udivmoddi4+0x29e>
 8000f6c:	3802      	subs	r0, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	1a5b      	subs	r3, r3, r1
 8000f72:	b2a4      	uxth	r4, r4
 8000f74:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f78:	fb08 3311 	mls	r3, r8, r1, r3
 8000f7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f80:	fb01 f307 	mul.w	r3, r1, r7
 8000f84:	42a3      	cmp	r3, r4
 8000f86:	d908      	bls.n	8000f9a <__udivmoddi4+0x276>
 8000f88:	eb1c 0404 	adds.w	r4, ip, r4
 8000f8c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f90:	d213      	bcs.n	8000fba <__udivmoddi4+0x296>
 8000f92:	42a3      	cmp	r3, r4
 8000f94:	d911      	bls.n	8000fba <__udivmoddi4+0x296>
 8000f96:	3902      	subs	r1, #2
 8000f98:	4464      	add	r4, ip
 8000f9a:	1ae4      	subs	r4, r4, r3
 8000f9c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fa0:	e739      	b.n	8000e16 <__udivmoddi4+0xf2>
 8000fa2:	4604      	mov	r4, r0
 8000fa4:	e6f0      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fa6:	4608      	mov	r0, r1
 8000fa8:	e706      	b.n	8000db8 <__udivmoddi4+0x94>
 8000faa:	45c8      	cmp	r8, r9
 8000fac:	d2ae      	bcs.n	8000f0c <__udivmoddi4+0x1e8>
 8000fae:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fb2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fb6:	3801      	subs	r0, #1
 8000fb8:	e7a8      	b.n	8000f0c <__udivmoddi4+0x1e8>
 8000fba:	4631      	mov	r1, r6
 8000fbc:	e7ed      	b.n	8000f9a <__udivmoddi4+0x276>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	e799      	b.n	8000ef6 <__udivmoddi4+0x1d2>
 8000fc2:	4630      	mov	r0, r6
 8000fc4:	e7d4      	b.n	8000f70 <__udivmoddi4+0x24c>
 8000fc6:	46d6      	mov	lr, sl
 8000fc8:	e77f      	b.n	8000eca <__udivmoddi4+0x1a6>
 8000fca:	4463      	add	r3, ip
 8000fcc:	3802      	subs	r0, #2
 8000fce:	e74d      	b.n	8000e6c <__udivmoddi4+0x148>
 8000fd0:	4606      	mov	r6, r0
 8000fd2:	4623      	mov	r3, r4
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e70f      	b.n	8000df8 <__udivmoddi4+0xd4>
 8000fd8:	3e02      	subs	r6, #2
 8000fda:	4463      	add	r3, ip
 8000fdc:	e730      	b.n	8000e40 <__udivmoddi4+0x11c>
 8000fde:	bf00      	nop

08000fe0 <__aeabi_idiv0>:
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop

08000fe4 <_Error_Handler>:
#include "stm32f4xx_hal.h"

#include "BH1750.h"

void _Error_Handler(char * file, int line)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b083      	sub	sp, #12
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
 8000fec:	6039      	str	r1, [r7, #0]
  while(1)
 8000fee:	bf00      	nop
 8000ff0:	e7fd      	b.n	8000fee <_Error_Handler+0xa>
	...

08000ff4 <BH1750_init_i2c>:
  {
  }
}

HAL_StatusTypeDef BH1750_init_i2c(I2C_HandleTypeDef* i2c_handle)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b084      	sub	sp, #16
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	60fb      	str	r3, [r7, #12]
 8001000:	4b1b      	ldr	r3, [pc, #108]	@ (8001070 <BH1750_init_i2c+0x7c>)
 8001002:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001004:	4a1a      	ldr	r2, [pc, #104]	@ (8001070 <BH1750_init_i2c+0x7c>)
 8001006:	f043 0302 	orr.w	r3, r3, #2
 800100a:	6313      	str	r3, [r2, #48]	@ 0x30
 800100c:	4b18      	ldr	r3, [pc, #96]	@ (8001070 <BH1750_init_i2c+0x7c>)
 800100e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001010:	f003 0302 	and.w	r3, r3, #2
 8001014:	60fb      	str	r3, [r7, #12]
 8001016:	68fb      	ldr	r3, [r7, #12]

	i2c_handle->Instance = I2C1;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	4a16      	ldr	r2, [pc, #88]	@ (8001074 <BH1750_init_i2c+0x80>)
 800101c:	601a      	str	r2, [r3, #0]
	i2c_handle->Init.ClockSpeed = 100000;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	4a15      	ldr	r2, [pc, #84]	@ (8001078 <BH1750_init_i2c+0x84>)
 8001022:	605a      	str	r2, [r3, #4]
	i2c_handle->Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	2200      	movs	r2, #0
 8001028:	609a      	str	r2, [r3, #8]
	i2c_handle->Init.OwnAddress1 = 0;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	2200      	movs	r2, #0
 800102e:	60da      	str	r2, [r3, #12]
	i2c_handle->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001036:	611a      	str	r2, [r3, #16]
	i2c_handle->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	2200      	movs	r2, #0
 800103c:	615a      	str	r2, [r3, #20]
	i2c_handle->Init.OwnAddress2 = 0;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	2200      	movs	r2, #0
 8001042:	619a      	str	r2, [r3, #24]
	i2c_handle->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	2200      	movs	r2, #0
 8001048:	61da      	str	r2, [r3, #28]
	i2c_handle->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	2200      	movs	r2, #0
 800104e:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(i2c_handle) != HAL_OK)
 8001050:	6878      	ldr	r0, [r7, #4]
 8001052:	f002 fa8d 	bl	8003570 <HAL_I2C_Init>
 8001056:	4603      	mov	r3, r0
 8001058:	2b00      	cmp	r3, #0
 800105a:	d003      	beq.n	8001064 <BH1750_init_i2c+0x70>
	{
		_Error_Handler(__FILE__, __LINE__);
 800105c:	213f      	movs	r1, #63	@ 0x3f
 800105e:	4807      	ldr	r0, [pc, #28]	@ (800107c <BH1750_init_i2c+0x88>)
 8001060:	f7ff ffc0 	bl	8000fe4 <_Error_Handler>
	}

	return HAL_OK;
 8001064:	2300      	movs	r3, #0
}
 8001066:	4618      	mov	r0, r3
 8001068:	3710      	adds	r7, #16
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	40023800 	.word	0x40023800
 8001074:	40005400 	.word	0x40005400
 8001078:	000186a0 	.word	0x000186a0
 800107c:	0800d998 	.word	0x0800d998

08001080 <BH1750_send_command>:

HAL_StatusTypeDef BH1750_send_command(BH1750_device_t* dev, uint8_t cmd)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b084      	sub	sp, #16
 8001084:	af02      	add	r7, sp, #8
 8001086:	6078      	str	r0, [r7, #4]
 8001088:	460b      	mov	r3, r1
 800108a:	70fb      	strb	r3, [r7, #3]
	//TODO hal checks
	if(HAL_I2C_Master_Transmit(
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	6858      	ldr	r0, [r3, #4]
			dev->i2c_handle,	//I2C Handle
			dev->address_w,		//I2C addr of dev
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	7a5b      	ldrb	r3, [r3, #9]
	if(HAL_I2C_Master_Transmit(
 8001094:	4619      	mov	r1, r3
 8001096:	1cfa      	adds	r2, r7, #3
 8001098:	230a      	movs	r3, #10
 800109a:	9300      	str	r3, [sp, #0]
 800109c:	2301      	movs	r3, #1
 800109e:	f002 fbc1 	bl	8003824 <HAL_I2C_Master_Transmit>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d001      	beq.n	80010ac <BH1750_send_command+0x2c>
			&cmd,				//CMD to be executed
			1,					//8bit addr
			10					//Wait time
		) != HAL_OK) return HAL_ERROR;
 80010a8:	2301      	movs	r3, #1
 80010aa:	e000      	b.n	80010ae <BH1750_send_command+0x2e>

	return HAL_OK;
 80010ac:	2300      	movs	r3, #0
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	3708      	adds	r7, #8
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}

080010b6 <BH1750_poll_self>:

void BH1750_poll_self(BH1750_device_t* self)
{
 80010b6:	b580      	push	{r7, lr}
 80010b8:	b082      	sub	sp, #8
 80010ba:	af00      	add	r7, sp, #0
 80010bc:	6078      	str	r0, [r7, #4]
	BH1750_get_lumen(self);
 80010be:	6878      	ldr	r0, [r7, #4]
 80010c0:	f000 f8aa 	bl	8001218 <BH1750_get_lumen>
}
 80010c4:	bf00      	nop
 80010c6:	3708      	adds	r7, #8
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}

080010cc <BH1750_init_dev_struct>:

BH1750_device_t* BH1750_init_dev_struct(I2C_HandleTypeDef* i2c_handle,
		char* name, bool addr_grounded)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b086      	sub	sp, #24
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	60f8      	str	r0, [r7, #12]
 80010d4:	60b9      	str	r1, [r7, #8]
 80010d6:	4613      	mov	r3, r2
 80010d8:	71fb      	strb	r3, [r7, #7]
	BH1750_device_t* init =
			(BH1750_device_t*)calloc(1, sizeof(BH1750_device_t));
 80010da:	2114      	movs	r1, #20
 80010dc:	2001      	movs	r0, #1
 80010de:	f007 fc37 	bl	8008950 <calloc>
 80010e2:	4603      	mov	r3, r0
 80010e4:	617b      	str	r3, [r7, #20]

	if(init == NULL) return NULL;
 80010e6:	697b      	ldr	r3, [r7, #20]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d101      	bne.n	80010f0 <BH1750_init_dev_struct+0x24>
 80010ec:	2300      	movs	r3, #0
 80010ee:	e02d      	b.n	800114c <BH1750_init_dev_struct+0x80>

	if(addr_grounded){
 80010f0:	79fb      	ldrb	r3, [r7, #7]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d006      	beq.n	8001104 <BH1750_init_dev_struct+0x38>
		init->address_r = BH1750_GROUND_ADDR_READ;
 80010f6:	697b      	ldr	r3, [r7, #20]
 80010f8:	2247      	movs	r2, #71	@ 0x47
 80010fa:	721a      	strb	r2, [r3, #8]
		init->address_w = BH1750_GROUND_ADDR_WRITE;
 80010fc:	697b      	ldr	r3, [r7, #20]
 80010fe:	2246      	movs	r2, #70	@ 0x46
 8001100:	725a      	strb	r2, [r3, #9]
 8001102:	e005      	b.n	8001110 <BH1750_init_dev_struct+0x44>
	}else{
		init->address_r = BH1750_NO_GROUND_ADDR_READ;
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	22ba      	movs	r2, #186	@ 0xba
 8001108:	721a      	strb	r2, [r3, #8]
		init->address_w = BH1750_NO_GROUND_ADDR_WRITE;
 800110a:	697b      	ldr	r3, [r7, #20]
 800110c:	22b9      	movs	r2, #185	@ 0xb9
 800110e:	725a      	strb	r2, [r3, #9]
	}

	init->name = (char*)malloc(sizeof(char) * strlen(name));
 8001110:	68b8      	ldr	r0, [r7, #8]
 8001112:	f7ff f8ad 	bl	8000270 <strlen>
 8001116:	4603      	mov	r3, r0
 8001118:	4618      	mov	r0, r3
 800111a:	f007 fc35 	bl	8008988 <malloc>
 800111e:	4603      	mov	r3, r0
 8001120:	461a      	mov	r2, r3
 8001122:	697b      	ldr	r3, [r7, #20]
 8001124:	601a      	str	r2, [r3, #0]

	if(init->name == NULL) return NULL;
 8001126:	697b      	ldr	r3, [r7, #20]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d101      	bne.n	8001132 <BH1750_init_dev_struct+0x66>
 800112e:	2300      	movs	r3, #0
 8001130:	e00c      	b.n	800114c <BH1750_init_dev_struct+0x80>

	init->i2c_handle = i2c_handle;
 8001132:	697b      	ldr	r3, [r7, #20]
 8001134:	68fa      	ldr	r2, [r7, #12]
 8001136:	605a      	str	r2, [r3, #4]

	strcpy(init->name, name);
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	68b9      	ldr	r1, [r7, #8]
 800113e:	4618      	mov	r0, r3
 8001140:	f008 fe3f 	bl	8009dc2 <strcpy>

	init->poll = &BH1750_poll_self;
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	4a03      	ldr	r2, [pc, #12]	@ (8001154 <BH1750_init_dev_struct+0x88>)
 8001148:	611a      	str	r2, [r3, #16]

	return init;
 800114a:	697b      	ldr	r3, [r7, #20]
}
 800114c:	4618      	mov	r0, r3
 800114e:	3718      	adds	r7, #24
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	080010b7 	.word	0x080010b7

08001158 <BH1750_init_dev>:

HAL_StatusTypeDef BH1750_init_dev(BH1750_device_t* dev)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
	BH1750_send_command(dev, CMD_POWER_ON);
 8001160:	2101      	movs	r1, #1
 8001162:	6878      	ldr	r0, [r7, #4]
 8001164:	f7ff ff8c 	bl	8001080 <BH1750_send_command>
	BH1750_send_command(dev, CMD_RESET);
 8001168:	2103      	movs	r1, #3
 800116a:	6878      	ldr	r0, [r7, #4]
 800116c:	f7ff ff88 	bl	8001080 <BH1750_send_command>
	BH1750_send_command(dev, CMD_H_RES_MODE);
 8001170:	2110      	movs	r1, #16
 8001172:	6878      	ldr	r0, [r7, #4]
 8001174:	f7ff ff84 	bl	8001080 <BH1750_send_command>

	return HAL_OK;
 8001178:	2300      	movs	r3, #0
}
 800117a:	4618      	mov	r0, r3
 800117c:	3708      	adds	r7, #8
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}

08001182 <BH1750_read_dev>:

HAL_StatusTypeDef BH1750_read_dev(BH1750_device_t* dev)
{
 8001182:	b580      	push	{r7, lr}
 8001184:	b084      	sub	sp, #16
 8001186:	af02      	add	r7, sp, #8
 8001188:	6078      	str	r0, [r7, #4]
	if(HAL_I2C_Master_Receive(dev->i2c_handle,
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	6858      	ldr	r0, [r3, #4]
			dev->address_r,
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	7a1b      	ldrb	r3, [r3, #8]
	if(HAL_I2C_Master_Receive(dev->i2c_handle,
 8001192:	4619      	mov	r1, r3
			dev->buffer,
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	f103 020c 	add.w	r2, r3, #12
	if(HAL_I2C_Master_Receive(dev->i2c_handle,
 800119a:	230a      	movs	r3, #10
 800119c:	9300      	str	r3, [sp, #0]
 800119e:	2302      	movs	r3, #2
 80011a0:	f002 fc3e 	bl	8003a20 <HAL_I2C_Master_Receive>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <BH1750_read_dev+0x2c>
			2,
			10
	) != HAL_OK) return HAL_ERROR;
 80011aa:	2301      	movs	r3, #1
 80011ac:	e000      	b.n	80011b0 <BH1750_read_dev+0x2e>

	return HAL_OK;
 80011ae:	2300      	movs	r3, #0
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	3708      	adds	r7, #8
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}

080011b8 <BH1750_convert>:

HAL_StatusTypeDef BH1750_convert(BH1750_device_t* dev)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
	dev->value = dev->buffer[0];
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	7b1b      	ldrb	r3, [r3, #12]
 80011c4:	461a      	mov	r2, r3
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	815a      	strh	r2, [r3, #10]
	dev->value = (dev->value << 8) | dev->buffer[1];
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	895b      	ldrh	r3, [r3, #10]
 80011ce:	021b      	lsls	r3, r3, #8
 80011d0:	b21a      	sxth	r2, r3
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	7b5b      	ldrb	r3, [r3, #13]
 80011d6:	b21b      	sxth	r3, r3
 80011d8:	4313      	orrs	r3, r2
 80011da:	b21b      	sxth	r3, r3
 80011dc:	b29a      	uxth	r2, r3
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	815a      	strh	r2, [r3, #10]

	//TODO check float stuff
	dev->value/=1.2;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	895b      	ldrh	r3, [r3, #10]
 80011e6:	4618      	mov	r0, r3
 80011e8:	f7ff f99c 	bl	8000524 <__aeabi_i2d>
 80011ec:	f04f 3233 	mov.w	r2, #858993459	@ 0x33333333
 80011f0:	4b08      	ldr	r3, [pc, #32]	@ (8001214 <BH1750_convert+0x5c>)
 80011f2:	f7ff fb2b 	bl	800084c <__aeabi_ddiv>
 80011f6:	4602      	mov	r2, r0
 80011f8:	460b      	mov	r3, r1
 80011fa:	4610      	mov	r0, r2
 80011fc:	4619      	mov	r1, r3
 80011fe:	f7ff fcd3 	bl	8000ba8 <__aeabi_d2uiz>
 8001202:	4603      	mov	r3, r0
 8001204:	b29a      	uxth	r2, r3
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	815a      	strh	r2, [r3, #10]

	return HAL_OK;
 800120a:	2300      	movs	r3, #0
}
 800120c:	4618      	mov	r0, r3
 800120e:	3708      	adds	r7, #8
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	3ff33333 	.word	0x3ff33333

08001218 <BH1750_get_lumen>:

HAL_StatusTypeDef BH1750_get_lumen(BH1750_device_t* dev)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
	BH1750_read_dev(dev);
 8001220:	6878      	ldr	r0, [r7, #4]
 8001222:	f7ff ffae 	bl	8001182 <BH1750_read_dev>
	BH1750_convert(dev);
 8001226:	6878      	ldr	r0, [r7, #4]
 8001228:	f7ff ffc6 	bl	80011b8 <BH1750_convert>
	return HAL_OK;
 800122c:	2300      	movs	r3, #0
}
 800122e:	4618      	mov	r0, r3
 8001230:	3708      	adds	r7, #8
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
	...

08001238 <rtc_init>:

static I2C_HandleTypeDef *ds_i2c;

// Initialize the RTC with I2C
void rtc_init(I2C_HandleTypeDef *i2c)
{
 8001238:	b480      	push	{r7}
 800123a:	b083      	sub	sp, #12
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
    ds_i2c = i2c;
 8001240:	4a04      	ldr	r2, [pc, #16]	@ (8001254 <rtc_init+0x1c>)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6013      	str	r3, [r2, #0]
}
 8001246:	bf00      	nop
 8001248:	370c      	adds	r7, #12
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr
 8001252:	bf00      	nop
 8001254:	2000026c 	.word	0x2000026c

08001258 <SHT31_Config>:
};
uint16_t MilsPerMeasure[5] = {2005, 1005, 505, 255, 105}; // table 9 page 11 in column mps, + 5ms for correctly read
//                           0.5     1    2    4   10
uint8_t MeasureTime[3] = {13,5,3}; // table 4 page 7

void SHT31_Config(uint8_t address, I2C_HandleTypeDef* hi2c) {
 8001258:	b5b0      	push	{r4, r5, r7, lr}
 800125a:	b082      	sub	sp, #8
 800125c:	af00      	add	r7, sp, #0
 800125e:	4603      	mov	r3, r0
 8001260:	6039      	str	r1, [r7, #0]
 8001262:	71fb      	strb	r3, [r7, #7]
	sht31.address = address;
 8001264:	4a0c      	ldr	r2, [pc, #48]	@ (8001298 <SHT31_Config+0x40>)
 8001266:	79fb      	ldrb	r3, [r7, #7]
 8001268:	7013      	strb	r3, [r2, #0]
	sht31.hi2c = hi2c;
 800126a:	4a0b      	ldr	r2, [pc, #44]	@ (8001298 <SHT31_Config+0x40>)
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	6053      	str	r3, [r2, #4]

	sht31.mode = SHT31_SingleShot;
 8001270:	4b09      	ldr	r3, [pc, #36]	@ (8001298 <SHT31_Config+0x40>)
 8001272:	2200      	movs	r2, #0
 8001274:	721a      	strb	r2, [r3, #8]
	sht31.isCurrentlyPeriodic = 0;
 8001276:	4b08      	ldr	r3, [pc, #32]	@ (8001298 <SHT31_Config+0x40>)
 8001278:	2200      	movs	r2, #0
 800127a:	60da      	str	r2, [r3, #12]

	sht31.lastMeasureTime = HAL_GetTick();
 800127c:	f001 fde0 	bl	8002e40 <HAL_GetTick>
 8001280:	4603      	mov	r3, r0
 8001282:	2200      	movs	r2, #0
 8001284:	461c      	mov	r4, r3
 8001286:	4615      	mov	r5, r2
 8001288:	4b03      	ldr	r3, [pc, #12]	@ (8001298 <SHT31_Config+0x40>)
 800128a:	e9c3 4504 	strd	r4, r5, [r3, #16]
}
 800128e:	bf00      	nop
 8001290:	3708      	adds	r7, #8
 8001292:	46bd      	mov	sp, r7
 8001294:	bdb0      	pop	{r4, r5, r7, pc}
 8001296:	bf00      	nop
 8001298:	20000270 	.word	0x20000270

0800129c <SHT31_SendCommand>:

SHT31_Status SHT31_SendCommand(uint16_t command) {
 800129c:	b580      	push	{r7, lr}
 800129e:	b086      	sub	sp, #24
 80012a0:	af02      	add	r7, sp, #8
 80012a2:	4603      	mov	r3, r0
 80012a4:	80fb      	strh	r3, [r7, #6]
	uint8_t buffer[2] = {command >> 8, command & (0xFF)};
 80012a6:	88fb      	ldrh	r3, [r7, #6]
 80012a8:	0a1b      	lsrs	r3, r3, #8
 80012aa:	b29b      	uxth	r3, r3
 80012ac:	b2db      	uxtb	r3, r3
 80012ae:	733b      	strb	r3, [r7, #12]
 80012b0:	88fb      	ldrh	r3, [r7, #6]
 80012b2:	b2db      	uxtb	r3, r3
 80012b4:	737b      	strb	r3, [r7, #13]
	HAL_StatusTypeDef ret = HAL_I2C_Master_Transmit(sht31.hi2c, sht31.address<<1, buffer, 2, HAL_MAX_DELAY);
 80012b6:	4b0d      	ldr	r3, [pc, #52]	@ (80012ec <SHT31_SendCommand+0x50>)
 80012b8:	6858      	ldr	r0, [r3, #4]
 80012ba:	4b0c      	ldr	r3, [pc, #48]	@ (80012ec <SHT31_SendCommand+0x50>)
 80012bc:	781b      	ldrb	r3, [r3, #0]
 80012be:	005b      	lsls	r3, r3, #1
 80012c0:	b299      	uxth	r1, r3
 80012c2:	f107 020c 	add.w	r2, r7, #12
 80012c6:	f04f 33ff 	mov.w	r3, #4294967295
 80012ca:	9300      	str	r3, [sp, #0]
 80012cc:	2302      	movs	r3, #2
 80012ce:	f002 faa9 	bl	8003824 <HAL_I2C_Master_Transmit>
 80012d2:	4603      	mov	r3, r0
 80012d4:	73fb      	strb	r3, [r7, #15]
	if(ret == HAL_OK) {
 80012d6:	7bfb      	ldrb	r3, [r7, #15]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d101      	bne.n	80012e0 <SHT31_SendCommand+0x44>
		return SHT31_OK;
 80012dc:	2300      	movs	r3, #0
 80012de:	e000      	b.n	80012e2 <SHT31_SendCommand+0x46>
	}
	return SHT31_Transmit_Error;
 80012e0:	2304      	movs	r3, #4
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	3710      	adds	r7, #16
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	20000270 	.word	0x20000270

080012f0 <SHT31_GetBytes>:

SHT31_Status SHT31_GetBytes(uint8_t* buffer, int num) {
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b086      	sub	sp, #24
 80012f4:	af02      	add	r7, sp, #8
 80012f6:	6078      	str	r0, [r7, #4]
 80012f8:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef ret = HAL_I2C_Master_Receive(sht31.hi2c, sht31.address<<1, buffer, num, HAL_MAX_DELAY);
 80012fa:	4b0d      	ldr	r3, [pc, #52]	@ (8001330 <SHT31_GetBytes+0x40>)
 80012fc:	6858      	ldr	r0, [r3, #4]
 80012fe:	4b0c      	ldr	r3, [pc, #48]	@ (8001330 <SHT31_GetBytes+0x40>)
 8001300:	781b      	ldrb	r3, [r3, #0]
 8001302:	005b      	lsls	r3, r3, #1
 8001304:	b299      	uxth	r1, r3
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	b29b      	uxth	r3, r3
 800130a:	f04f 32ff 	mov.w	r2, #4294967295
 800130e:	9200      	str	r2, [sp, #0]
 8001310:	687a      	ldr	r2, [r7, #4]
 8001312:	f002 fb85 	bl	8003a20 <HAL_I2C_Master_Receive>
 8001316:	4603      	mov	r3, r0
 8001318:	73fb      	strb	r3, [r7, #15]
	if(ret == HAL_OK) {
 800131a:	7bfb      	ldrb	r3, [r7, #15]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d101      	bne.n	8001324 <SHT31_GetBytes+0x34>
		return SHT31_OK;
 8001320:	2300      	movs	r3, #0
 8001322:	e000      	b.n	8001326 <SHT31_GetBytes+0x36>
	}
	return SHT31_Transmit_Error;
 8001324:	2304      	movs	r3, #4
}
 8001326:	4618      	mov	r0, r3
 8001328:	3710      	adds	r7, #16
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	20000270 	.word	0x20000270

08001334 <SHT31_GetData>:

SHT31_Status SHT31_GetData(Mode mode, Repeatability rep, ClockStretch stretch,MPS mps) {
 8001334:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001338:	b089      	sub	sp, #36	@ 0x24
 800133a:	af00      	add	r7, sp, #0
 800133c:	4606      	mov	r6, r0
 800133e:	4608      	mov	r0, r1
 8001340:	4611      	mov	r1, r2
 8001342:	461a      	mov	r2, r3
 8001344:	4633      	mov	r3, r6
 8001346:	73fb      	strb	r3, [r7, #15]
 8001348:	4603      	mov	r3, r0
 800134a:	73bb      	strb	r3, [r7, #14]
 800134c:	460b      	mov	r3, r1
 800134e:	737b      	strb	r3, [r7, #13]
 8001350:	4613      	mov	r3, r2
 8001352:	733b      	strb	r3, [r7, #12]
	uint16_t command = SHT31_GetCommand(mode, rep, stretch, mps);
 8001354:	7b3b      	ldrb	r3, [r7, #12]
 8001356:	7b7a      	ldrb	r2, [r7, #13]
 8001358:	7bb9      	ldrb	r1, [r7, #14]
 800135a:	7bf8      	ldrb	r0, [r7, #15]
 800135c:	f000 f896 	bl	800148c <SHT31_GetCommand>
 8001360:	4603      	mov	r3, r0
 8001362:	83bb      	strh	r3, [r7, #28]

	SHT31_Status ret;

	if(sht31.mode == SHT31_SingleShot) {
 8001364:	4b46      	ldr	r3, [pc, #280]	@ (8001480 <SHT31_GetData+0x14c>)
 8001366:	7a1b      	ldrb	r3, [r3, #8]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d10a      	bne.n	8001382 <SHT31_GetData+0x4e>

		ret = SHT31_SendCommand(command);
 800136c:	8bbb      	ldrh	r3, [r7, #28]
 800136e:	4618      	mov	r0, r3
 8001370:	f7ff ff94 	bl	800129c <SHT31_SendCommand>
 8001374:	4603      	mov	r3, r0
 8001376:	77fb      	strb	r3, [r7, #31]
		if(ret != SHT31_OK) {
 8001378:	7ffb      	ldrb	r3, [r7, #31]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d03e      	beq.n	80013fc <SHT31_GetData+0xc8>
			return SHT31_Transmit_Error;
 800137e:	2304      	movs	r3, #4
 8001380:	e078      	b.n	8001474 <SHT31_GetData+0x140>
		}

	}
	else if(sht31.mode == SHT31_Periodic){
 8001382:	4b3f      	ldr	r3, [pc, #252]	@ (8001480 <SHT31_GetData+0x14c>)
 8001384:	7a1b      	ldrb	r3, [r3, #8]
 8001386:	2b01      	cmp	r3, #1
 8001388:	d138      	bne.n	80013fc <SHT31_GetData+0xc8>
		if(HAL_GetTick() - sht31.lastMeasureTime > MilsPerMeasure[mps]) { // must wait for enough time before read in Periodic mode
 800138a:	f001 fd59 	bl	8002e40 <HAL_GetTick>
 800138e:	4603      	mov	r3, r0
 8001390:	2200      	movs	r2, #0
 8001392:	469a      	mov	sl, r3
 8001394:	4693      	mov	fp, r2
 8001396:	4b3a      	ldr	r3, [pc, #232]	@ (8001480 <SHT31_GetData+0x14c>)
 8001398:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800139c:	ebba 0402 	subs.w	r4, sl, r2
 80013a0:	eb6b 0503 	sbc.w	r5, fp, r3
 80013a4:	7b3b      	ldrb	r3, [r7, #12]
 80013a6:	4a37      	ldr	r2, [pc, #220]	@ (8001484 <SHT31_GetData+0x150>)
 80013a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80013ac:	b29b      	uxth	r3, r3
 80013ae:	2200      	movs	r2, #0
 80013b0:	4698      	mov	r8, r3
 80013b2:	4691      	mov	r9, r2
 80013b4:	45a0      	cmp	r8, r4
 80013b6:	eb79 0305 	sbcs.w	r3, r9, r5
 80013ba:	da1d      	bge.n	80013f8 <SHT31_GetData+0xc4>
			sht31.lastMeasureTime = HAL_GetTick();
 80013bc:	f001 fd40 	bl	8002e40 <HAL_GetTick>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2200      	movs	r2, #0
 80013c4:	603b      	str	r3, [r7, #0]
 80013c6:	607a      	str	r2, [r7, #4]
 80013c8:	4b2d      	ldr	r3, [pc, #180]	@ (8001480 <SHT31_GetData+0x14c>)
 80013ca:	e9d7 1200 	ldrd	r1, r2, [r7]
 80013ce:	e9c3 1204 	strd	r1, r2, [r3, #16]

			if(sht31.isCurrentlyPeriodic == 0) { // Just the first period in Periodic mode need to send command
 80013d2:	4b2b      	ldr	r3, [pc, #172]	@ (8001480 <SHT31_GetData+0x14c>)
 80013d4:	68db      	ldr	r3, [r3, #12]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d110      	bne.n	80013fc <SHT31_GetData+0xc8>

				ret = SHT31_SendCommand(command);
 80013da:	8bbb      	ldrh	r3, [r7, #28]
 80013dc:	4618      	mov	r0, r3
 80013de:	f7ff ff5d 	bl	800129c <SHT31_SendCommand>
 80013e2:	4603      	mov	r3, r0
 80013e4:	77fb      	strb	r3, [r7, #31]
				if(ret != SHT31_OK) {
 80013e6:	7ffb      	ldrb	r3, [r7, #31]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d001      	beq.n	80013f0 <SHT31_GetData+0xbc>
					return SHT31_Transmit_Error;
 80013ec:	2304      	movs	r3, #4
 80013ee:	e041      	b.n	8001474 <SHT31_GetData+0x140>
				}

				sht31.isCurrentlyPeriodic = 1;
 80013f0:	4b23      	ldr	r3, [pc, #140]	@ (8001480 <SHT31_GetData+0x14c>)
 80013f2:	2201      	movs	r2, #1
 80013f4:	60da      	str	r2, [r3, #12]
 80013f6:	e001      	b.n	80013fc <SHT31_GetData+0xc8>
			}
		}
		else {
			return SHT31_Not_Ready;
 80013f8:	2303      	movs	r3, #3
 80013fa:	e03b      	b.n	8001474 <SHT31_GetData+0x140>
		}
	}

	HAL_Delay(MeasureTime[rep]); // measure duration in table 4 page 7
 80013fc:	7bbb      	ldrb	r3, [r7, #14]
 80013fe:	4a22      	ldr	r2, [pc, #136]	@ (8001488 <SHT31_GetData+0x154>)
 8001400:	5cd3      	ldrb	r3, [r2, r3]
 8001402:	4618      	mov	r0, r3
 8001404:	f001 fd28 	bl	8002e58 <HAL_Delay>
	uint8_t buffer[6];
	SHT31_GetBytes(buffer, 6);
 8001408:	f107 0314 	add.w	r3, r7, #20
 800140c:	2106      	movs	r1, #6
 800140e:	4618      	mov	r0, r3
 8001410:	f7ff ff6e 	bl	80012f0 <SHT31_GetBytes>



	if(buffer[2] != SHT31_CRC_8(&buffer[0], 2)) {
 8001414:	7dbc      	ldrb	r4, [r7, #22]
 8001416:	f107 0314 	add.w	r3, r7, #20
 800141a:	2102      	movs	r1, #2
 800141c:	4618      	mov	r0, r3
 800141e:	f000 f871 	bl	8001504 <SHT31_CRC_8>
 8001422:	4603      	mov	r3, r0
 8001424:	429c      	cmp	r4, r3
 8001426:	d002      	beq.n	800142e <SHT31_GetData+0xfa>
		ret =  SHT31_Data_Error;
 8001428:	2301      	movs	r3, #1
 800142a:	77fb      	strb	r3, [r7, #31]
 800142c:	e009      	b.n	8001442 <SHT31_GetData+0x10e>
	}
	else {
		sht31.temperature_raw = (buffer[0] << 8) + buffer[1];
 800142e:	7d3b      	ldrb	r3, [r7, #20]
 8001430:	021b      	lsls	r3, r3, #8
 8001432:	b29b      	uxth	r3, r3
 8001434:	7d7a      	ldrb	r2, [r7, #21]
 8001436:	4413      	add	r3, r2
 8001438:	b29a      	uxth	r2, r3
 800143a:	4b11      	ldr	r3, [pc, #68]	@ (8001480 <SHT31_GetData+0x14c>)
 800143c:	831a      	strh	r2, [r3, #24]
		ret = SHT31_OK;
 800143e:	2300      	movs	r3, #0
 8001440:	77fb      	strb	r3, [r7, #31]
	}

	if(buffer[5] != SHT31_CRC_8(&buffer[3], 2)) {
 8001442:	7e7c      	ldrb	r4, [r7, #25]
 8001444:	f107 0314 	add.w	r3, r7, #20
 8001448:	3303      	adds	r3, #3
 800144a:	2102      	movs	r1, #2
 800144c:	4618      	mov	r0, r3
 800144e:	f000 f859 	bl	8001504 <SHT31_CRC_8>
 8001452:	4603      	mov	r3, r0
 8001454:	429c      	cmp	r4, r3
 8001456:	d002      	beq.n	800145e <SHT31_GetData+0x12a>
		ret =  SHT31_Data_Error;
 8001458:	2301      	movs	r3, #1
 800145a:	77fb      	strb	r3, [r7, #31]
 800145c:	e009      	b.n	8001472 <SHT31_GetData+0x13e>
	}
	else {
		sht31.humidity_raw = (buffer[3] << 8) + buffer[4];
 800145e:	7dfb      	ldrb	r3, [r7, #23]
 8001460:	021b      	lsls	r3, r3, #8
 8001462:	b29b      	uxth	r3, r3
 8001464:	7e3a      	ldrb	r2, [r7, #24]
 8001466:	4413      	add	r3, r2
 8001468:	b29a      	uxth	r2, r3
 800146a:	4b05      	ldr	r3, [pc, #20]	@ (8001480 <SHT31_GetData+0x14c>)
 800146c:	835a      	strh	r2, [r3, #26]
		ret = SHT31_OK;
 800146e:	2300      	movs	r3, #0
 8001470:	77fb      	strb	r3, [r7, #31]
	}
	return ret;
 8001472:	7ffb      	ldrb	r3, [r7, #31]



}
 8001474:	4618      	mov	r0, r3
 8001476:	3724      	adds	r7, #36	@ 0x24
 8001478:	46bd      	mov	sp, r7
 800147a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800147e:	bf00      	nop
 8001480:	20000270 	.word	0x20000270
 8001484:	2000002c 	.word	0x2000002c
 8001488:	20000038 	.word	0x20000038

0800148c <SHT31_GetCommand>:

uint16_t SHT31_GetCommand(Mode mode, Repeatability rep, ClockStretch stretch,MPS mps) {
 800148c:	b490      	push	{r4, r7}
 800148e:	b082      	sub	sp, #8
 8001490:	af00      	add	r7, sp, #0
 8001492:	4604      	mov	r4, r0
 8001494:	4608      	mov	r0, r1
 8001496:	4611      	mov	r1, r2
 8001498:	461a      	mov	r2, r3
 800149a:	4623      	mov	r3, r4
 800149c:	71fb      	strb	r3, [r7, #7]
 800149e:	4603      	mov	r3, r0
 80014a0:	71bb      	strb	r3, [r7, #6]
 80014a2:	460b      	mov	r3, r1
 80014a4:	717b      	strb	r3, [r7, #5]
 80014a6:	4613      	mov	r3, r2
 80014a8:	713b      	strb	r3, [r7, #4]
	if(mode == SHT31_SingleShot) {
 80014aa:	79fb      	ldrb	r3, [r7, #7]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d10c      	bne.n	80014ca <SHT31_GetCommand+0x3e>
		sht31.mode = SHT31_SingleShot;
 80014b0:	4b11      	ldr	r3, [pc, #68]	@ (80014f8 <SHT31_GetCommand+0x6c>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	721a      	strb	r2, [r3, #8]
		return MeasureSingleShotCMD[stretch][rep];
 80014b6:	797a      	ldrb	r2, [r7, #5]
 80014b8:	79b9      	ldrb	r1, [r7, #6]
 80014ba:	4810      	ldr	r0, [pc, #64]	@ (80014fc <SHT31_GetCommand+0x70>)
 80014bc:	4613      	mov	r3, r2
 80014be:	005b      	lsls	r3, r3, #1
 80014c0:	4413      	add	r3, r2
 80014c2:	440b      	add	r3, r1
 80014c4:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 80014c8:	e010      	b.n	80014ec <SHT31_GetCommand+0x60>
	}
	else if(mode == SHT31_Periodic) {
 80014ca:	79fb      	ldrb	r3, [r7, #7]
 80014cc:	2b01      	cmp	r3, #1
 80014ce:	d10c      	bne.n	80014ea <SHT31_GetCommand+0x5e>
		sht31.mode = SHT31_Periodic;
 80014d0:	4b09      	ldr	r3, [pc, #36]	@ (80014f8 <SHT31_GetCommand+0x6c>)
 80014d2:	2201      	movs	r2, #1
 80014d4:	721a      	strb	r2, [r3, #8]

		return MeasurePeriodicCMD[mps][rep];
 80014d6:	793a      	ldrb	r2, [r7, #4]
 80014d8:	79b9      	ldrb	r1, [r7, #6]
 80014da:	4809      	ldr	r0, [pc, #36]	@ (8001500 <SHT31_GetCommand+0x74>)
 80014dc:	4613      	mov	r3, r2
 80014de:	005b      	lsls	r3, r3, #1
 80014e0:	4413      	add	r3, r2
 80014e2:	440b      	add	r3, r1
 80014e4:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 80014e8:	e000      	b.n	80014ec <SHT31_GetCommand+0x60>
	}
	return 0x0;
 80014ea:	2300      	movs	r3, #0
}
 80014ec:	4618      	mov	r0, r3
 80014ee:	3708      	adds	r7, #8
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bc90      	pop	{r4, r7}
 80014f4:	4770      	bx	lr
 80014f6:	bf00      	nop
 80014f8:	20000270 	.word	0x20000270
 80014fc:	20000000 	.word	0x20000000
 8001500:	2000000c 	.word	0x2000000c

08001504 <SHT31_CRC_8>:


uint8_t SHT31_CRC_8(uint8_t* data, int len) {
 8001504:	b480      	push	{r7}
 8001506:	b085      	sub	sp, #20
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
 800150c:	6039      	str	r1, [r7, #0]
	uint8_t crc = 0xFF;
 800150e:	23ff      	movs	r3, #255	@ 0xff
 8001510:	73fb      	strb	r3, [r7, #15]
	const uint8_t poly = 0x31;
 8001512:	2331      	movs	r3, #49	@ 0x31
 8001514:	733b      	strb	r3, [r7, #12]

	for(uint8_t byte = len; byte; byte--) {
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	73bb      	strb	r3, [r7, #14]
 800151a:	e023      	b.n	8001564 <SHT31_CRC_8+0x60>
		crc ^= *(data++);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	1c5a      	adds	r2, r3, #1
 8001520:	607a      	str	r2, [r7, #4]
 8001522:	781a      	ldrb	r2, [r3, #0]
 8001524:	7bfb      	ldrb	r3, [r7, #15]
 8001526:	4053      	eors	r3, r2
 8001528:	73fb      	strb	r3, [r7, #15]
		for(uint8_t i = 8; i; i--) {
 800152a:	2308      	movs	r3, #8
 800152c:	737b      	strb	r3, [r7, #13]
 800152e:	e013      	b.n	8001558 <SHT31_CRC_8+0x54>
			crc = (crc & 0x80)? (crc<<1)^poly : (crc<<1);
 8001530:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001534:	2b00      	cmp	r3, #0
 8001536:	da08      	bge.n	800154a <SHT31_CRC_8+0x46>
 8001538:	7bfb      	ldrb	r3, [r7, #15]
 800153a:	005b      	lsls	r3, r3, #1
 800153c:	b25a      	sxtb	r2, r3
 800153e:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8001542:	4053      	eors	r3, r2
 8001544:	b25b      	sxtb	r3, r3
 8001546:	b2db      	uxtb	r3, r3
 8001548:	e002      	b.n	8001550 <SHT31_CRC_8+0x4c>
 800154a:	7bfb      	ldrb	r3, [r7, #15]
 800154c:	005b      	lsls	r3, r3, #1
 800154e:	b2db      	uxtb	r3, r3
 8001550:	73fb      	strb	r3, [r7, #15]
		for(uint8_t i = 8; i; i--) {
 8001552:	7b7b      	ldrb	r3, [r7, #13]
 8001554:	3b01      	subs	r3, #1
 8001556:	737b      	strb	r3, [r7, #13]
 8001558:	7b7b      	ldrb	r3, [r7, #13]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d1e8      	bne.n	8001530 <SHT31_CRC_8+0x2c>
	for(uint8_t byte = len; byte; byte--) {
 800155e:	7bbb      	ldrb	r3, [r7, #14]
 8001560:	3b01      	subs	r3, #1
 8001562:	73bb      	strb	r3, [r7, #14]
 8001564:	7bbb      	ldrb	r3, [r7, #14]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d1d8      	bne.n	800151c <SHT31_CRC_8+0x18>
		}
	}
	return crc;
 800156a:	7bfb      	ldrb	r3, [r7, #15]
}
 800156c:	4618      	mov	r0, r3
 800156e:	3714      	adds	r7, #20
 8001570:	46bd      	mov	sp, r7
 8001572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001576:	4770      	bx	lr

08001578 <SHT31_GetHumidity>:



float SHT31_GetHumidity() {
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0
	return 100.0*(sht31.humidity_raw)/65535;
 800157c:	4b12      	ldr	r3, [pc, #72]	@ (80015c8 <SHT31_GetHumidity+0x50>)
 800157e:	8b5b      	ldrh	r3, [r3, #26]
 8001580:	4618      	mov	r0, r3
 8001582:	f7fe ffcf 	bl	8000524 <__aeabi_i2d>
 8001586:	f04f 0200 	mov.w	r2, #0
 800158a:	4b10      	ldr	r3, [pc, #64]	@ (80015cc <SHT31_GetHumidity+0x54>)
 800158c:	f7ff f834 	bl	80005f8 <__aeabi_dmul>
 8001590:	4602      	mov	r2, r0
 8001592:	460b      	mov	r3, r1
 8001594:	4610      	mov	r0, r2
 8001596:	4619      	mov	r1, r3
 8001598:	a309      	add	r3, pc, #36	@ (adr r3, 80015c0 <SHT31_GetHumidity+0x48>)
 800159a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800159e:	f7ff f955 	bl	800084c <__aeabi_ddiv>
 80015a2:	4602      	mov	r2, r0
 80015a4:	460b      	mov	r3, r1
 80015a6:	4610      	mov	r0, r2
 80015a8:	4619      	mov	r1, r3
 80015aa:	f7ff fb1d 	bl	8000be8 <__aeabi_d2f>
 80015ae:	4603      	mov	r3, r0
 80015b0:	ee07 3a90 	vmov	s15, r3
}
 80015b4:	eeb0 0a67 	vmov.f32	s0, s15
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	f3af 8000 	nop.w
 80015c0:	00000000 	.word	0x00000000
 80015c4:	40efffe0 	.word	0x40efffe0
 80015c8:	20000270 	.word	0x20000270
 80015cc:	40590000 	.word	0x40590000

080015d0 <SHT31_GetTemperature>:
float SHT31_GetTemperature() {
 80015d0:	b580      	push	{r7, lr}
 80015d2:	af00      	add	r7, sp, #0
	return 175.0*(sht31.temperature_raw)/65535 - 45;
 80015d4:	4b18      	ldr	r3, [pc, #96]	@ (8001638 <SHT31_GetTemperature+0x68>)
 80015d6:	8b1b      	ldrh	r3, [r3, #24]
 80015d8:	4618      	mov	r0, r3
 80015da:	f7fe ffa3 	bl	8000524 <__aeabi_i2d>
 80015de:	a312      	add	r3, pc, #72	@ (adr r3, 8001628 <SHT31_GetTemperature+0x58>)
 80015e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015e4:	f7ff f808 	bl	80005f8 <__aeabi_dmul>
 80015e8:	4602      	mov	r2, r0
 80015ea:	460b      	mov	r3, r1
 80015ec:	4610      	mov	r0, r2
 80015ee:	4619      	mov	r1, r3
 80015f0:	a30f      	add	r3, pc, #60	@ (adr r3, 8001630 <SHT31_GetTemperature+0x60>)
 80015f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015f6:	f7ff f929 	bl	800084c <__aeabi_ddiv>
 80015fa:	4602      	mov	r2, r0
 80015fc:	460b      	mov	r3, r1
 80015fe:	4610      	mov	r0, r2
 8001600:	4619      	mov	r1, r3
 8001602:	f04f 0200 	mov.w	r2, #0
 8001606:	4b0d      	ldr	r3, [pc, #52]	@ (800163c <SHT31_GetTemperature+0x6c>)
 8001608:	f7fe fe3e 	bl	8000288 <__aeabi_dsub>
 800160c:	4602      	mov	r2, r0
 800160e:	460b      	mov	r3, r1
 8001610:	4610      	mov	r0, r2
 8001612:	4619      	mov	r1, r3
 8001614:	f7ff fae8 	bl	8000be8 <__aeabi_d2f>
 8001618:	4603      	mov	r3, r0
 800161a:	ee07 3a90 	vmov	s15, r3
}
 800161e:	eeb0 0a67 	vmov.f32	s0, s15
 8001622:	bd80      	pop	{r7, pc}
 8001624:	f3af 8000 	nop.w
 8001628:	00000000 	.word	0x00000000
 800162c:	4065e000 	.word	0x4065e000
 8001630:	00000000 	.word	0x00000000
 8001634:	40efffe0 	.word	0x40efffe0
 8001638:	20000270 	.word	0x20000270
 800163c:	40468000 	.word	0x40468000

08001640 <auto_baud>:
//	  GPS_Init(&gps, gps.huart);
//  }
int baud_num = -1;
int baud[9] = {4800, 9600, 19200, 38400, 57600, 115200, 230400, 460800, 921600};

int auto_baud(TAU1201_t *_gps, int baudrate){
 8001640:	b580      	push	{r7, lr}
 8001642:	b082      	sub	sp, #8
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
 8001648:	6039      	str	r1, [r7, #0]
//	Check if this baudrate ok or not
	_gps->huart->Init.BaudRate = baudrate;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	683a      	ldr	r2, [r7, #0]
 8001650:	605a      	str	r2, [r3, #4]
	if (HAL_UART_Init(_gps->huart) != HAL_OK){
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4618      	mov	r0, r3
 8001658:	f006 f860 	bl	800771c <HAL_UART_Init>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d001      	beq.n	8001666 <auto_baud+0x26>
		Error_Handler();
 8001662:	f001 f87f 	bl	8002764 <Error_Handler>
	}

	HAL_UART_Receive_IT(_gps->huart, &rx_data, 1);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	2201      	movs	r2, #1
 800166c:	4913      	ldr	r1, [pc, #76]	@ (80016bc <auto_baud+0x7c>)
 800166e:	4618      	mov	r0, r3
 8001670:	f006 f9fc 	bl	8007a6c <HAL_UART_Receive_IT>
	HAL_Delay(1000);
 8001674:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001678:	f001 fbee 	bl	8002e58 <HAL_Delay>
// If baudrate ok, module founded, return OK
	if(_gps->module_found == 1) return GPS_OK;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	791b      	ldrb	r3, [r3, #4]
 8001680:	2b01      	cmp	r3, #1
 8001682:	d101      	bne.n	8001688 <auto_baud+0x48>
 8001684:	2301      	movs	r3, #1
 8001686:	e015      	b.n	80016b4 <auto_baud+0x74>
// Else check another baudrate
	++baud_num;
 8001688:	4b0d      	ldr	r3, [pc, #52]	@ (80016c0 <auto_baud+0x80>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	3301      	adds	r3, #1
 800168e:	4a0c      	ldr	r2, [pc, #48]	@ (80016c0 <auto_baud+0x80>)
 8001690:	6013      	str	r3, [r2, #0]
	if(baud_num > 8) return GPS_ERROR;
 8001692:	4b0b      	ldr	r3, [pc, #44]	@ (80016c0 <auto_baud+0x80>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	2b08      	cmp	r3, #8
 8001698:	dd02      	ble.n	80016a0 <auto_baud+0x60>
 800169a:	f04f 33ff 	mov.w	r3, #4294967295
 800169e:	e009      	b.n	80016b4 <auto_baud+0x74>
	return auto_baud(_gps, baud[baud_num]);
 80016a0:	4b07      	ldr	r3, [pc, #28]	@ (80016c0 <auto_baud+0x80>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a07      	ldr	r2, [pc, #28]	@ (80016c4 <auto_baud+0x84>)
 80016a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016aa:	4619      	mov	r1, r3
 80016ac:	6878      	ldr	r0, [r7, #4]
 80016ae:	f7ff ffc7 	bl	8001640 <auto_baud>
 80016b2:	4603      	mov	r3, r0
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	3708      	adds	r7, #8
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	20000298 	.word	0x20000298
 80016c0:	2000003c 	.word	0x2000003c
 80016c4:	20000040 	.word	0x20000040

080016c8 <GPS_Init>:

int GPS_Init(TAU1201_t *_gps, UART_HandleTypeDef *_huart){
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
 80016d0:	6039      	str	r1, [r7, #0]
	_gps->huart = _huart;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	683a      	ldr	r2, [r7, #0]
 80016d6:	601a      	str	r2, [r3, #0]
	_gps->module_found = 0;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2200      	movs	r2, #0
 80016dc:	711a      	strb	r2, [r3, #4]

	return auto_baud(_gps, _gps->huart->Init.BaudRate);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	4619      	mov	r1, r3
 80016e6:	6878      	ldr	r0, [r7, #4]
 80016e8:	f7ff ffaa 	bl	8001640 <auto_baud>
 80016ec:	4603      	mov	r3, r0
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	3708      	adds	r7, #8
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
	...

080016f8 <GPS_UART_CallBack>:

void GPS_UART_CallBack(TAU1201_t *_gps){
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b082      	sub	sp, #8
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
	if (rx_data != '\n' && rx_index < sizeof(rx_buffer)) {
 8001700:	4b1a      	ldr	r3, [pc, #104]	@ (800176c <GPS_UART_CallBack+0x74>)
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	2b0a      	cmp	r3, #10
 8001706:	d010      	beq.n	800172a <GPS_UART_CallBack+0x32>
 8001708:	4b19      	ldr	r3, [pc, #100]	@ (8001770 <GPS_UART_CallBack+0x78>)
 800170a:	781b      	ldrb	r3, [r3, #0]
 800170c:	b25b      	sxtb	r3, r3
 800170e:	2b00      	cmp	r3, #0
 8001710:	db0b      	blt.n	800172a <GPS_UART_CallBack+0x32>
		rx_buffer[rx_index++] = rx_data;
 8001712:	4b17      	ldr	r3, [pc, #92]	@ (8001770 <GPS_UART_CallBack+0x78>)
 8001714:	781b      	ldrb	r3, [r3, #0]
 8001716:	1c5a      	adds	r2, r3, #1
 8001718:	b2d1      	uxtb	r1, r2
 800171a:	4a15      	ldr	r2, [pc, #84]	@ (8001770 <GPS_UART_CallBack+0x78>)
 800171c:	7011      	strb	r1, [r2, #0]
 800171e:	461a      	mov	r2, r3
 8001720:	4b12      	ldr	r3, [pc, #72]	@ (800176c <GPS_UART_CallBack+0x74>)
 8001722:	7819      	ldrb	r1, [r3, #0]
 8001724:	4b13      	ldr	r3, [pc, #76]	@ (8001774 <GPS_UART_CallBack+0x7c>)
 8001726:	5499      	strb	r1, [r3, r2]
 8001728:	e015      	b.n	8001756 <GPS_UART_CallBack+0x5e>
		GPS_print((char*)rx_buffer);
		#endif



		if(GPS_validate(_gps, (char*) rx_buffer)){
 800172a:	4912      	ldr	r1, [pc, #72]	@ (8001774 <GPS_UART_CallBack+0x7c>)
 800172c:	6878      	ldr	r0, [r7, #4]
 800172e:	f000 f823 	bl	8001778 <GPS_validate>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	d006      	beq.n	8001746 <GPS_UART_CallBack+0x4e>
#if (GPS_DEBUG == 2)
			GPS_print_uart((char*)rx_buffer);
#endif
			_gps->module_found = 1;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2201      	movs	r2, #1
 800173c:	711a      	strb	r2, [r3, #4]
			GPS_parse(_gps, (char*) rx_buffer);
 800173e:	490d      	ldr	r1, [pc, #52]	@ (8001774 <GPS_UART_CallBack+0x7c>)
 8001740:	6878      	ldr	r0, [r7, #4]
 8001742:	f000 f87d 	bl	8001840 <GPS_parse>
		}

		rx_index = 0;
 8001746:	4b0a      	ldr	r3, [pc, #40]	@ (8001770 <GPS_UART_CallBack+0x78>)
 8001748:	2200      	movs	r2, #0
 800174a:	701a      	strb	r2, [r3, #0]
		memset(rx_buffer, 0, sizeof(rx_buffer));
 800174c:	2280      	movs	r2, #128	@ 0x80
 800174e:	2100      	movs	r1, #0
 8001750:	4808      	ldr	r0, [pc, #32]	@ (8001774 <GPS_UART_CallBack+0x7c>)
 8001752:	f008 fa7f 	bl	8009c54 <memset>
	}
	HAL_UART_Receive_IT(_gps->huart, &rx_data, 1);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	2201      	movs	r2, #1
 800175c:	4903      	ldr	r1, [pc, #12]	@ (800176c <GPS_UART_CallBack+0x74>)
 800175e:	4618      	mov	r0, r3
 8001760:	f006 f984 	bl	8007a6c <HAL_UART_Receive_IT>
}
 8001764:	bf00      	nop
 8001766:	3708      	adds	r7, #8
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}
 800176c:	20000298 	.word	0x20000298
 8001770:	2000031c 	.word	0x2000031c
 8001774:	2000029c 	.word	0x2000029c

08001778 <GPS_validate>:


int GPS_validate(TAU1201_t *_gps, char *nmeastr){
 8001778:	b580      	push	{r7, lr}
 800177a:	b086      	sub	sp, #24
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
 8001780:	6039      	str	r1, [r7, #0]
    char check[3];
    char checkcalcstr[3];
    int i;
    int calculated_check;

    i=0;
 8001782:	2300      	movs	r3, #0
 8001784:	617b      	str	r3, [r7, #20]
    calculated_check=0;
 8001786:	2300      	movs	r3, #0
 8001788:	613b      	str	r3, [r7, #16]

    // check to ensure that the string starts with a $
    if(nmeastr[i] == '$')
 800178a:	697b      	ldr	r3, [r7, #20]
 800178c:	683a      	ldr	r2, [r7, #0]
 800178e:	4413      	add	r3, r2
 8001790:	781b      	ldrb	r3, [r3, #0]
 8001792:	2b24      	cmp	r3, #36	@ 0x24
 8001794:	d103      	bne.n	800179e <GPS_validate+0x26>
        i++;
 8001796:	697b      	ldr	r3, [r7, #20]
 8001798:	3301      	adds	r3, #1
 800179a:	617b      	str	r3, [r7, #20]
    else
        return 0;

    //No NULL reached, 75 char largest possible NMEA message, no '*' reached
    while((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75)){
 800179c:	e00c      	b.n	80017b8 <GPS_validate+0x40>
        return 0;
 800179e:	2300      	movs	r3, #0
 80017a0:	e047      	b.n	8001832 <GPS_validate+0xba>
        calculated_check ^= nmeastr[i];// calculate the checksum
 80017a2:	697b      	ldr	r3, [r7, #20]
 80017a4:	683a      	ldr	r2, [r7, #0]
 80017a6:	4413      	add	r3, r2
 80017a8:	781b      	ldrb	r3, [r3, #0]
 80017aa:	461a      	mov	r2, r3
 80017ac:	693b      	ldr	r3, [r7, #16]
 80017ae:	4053      	eors	r3, r2
 80017b0:	613b      	str	r3, [r7, #16]
        i++;
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	3301      	adds	r3, #1
 80017b6:	617b      	str	r3, [r7, #20]
    while((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75)){
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	683a      	ldr	r2, [r7, #0]
 80017bc:	4413      	add	r3, r2
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d008      	beq.n	80017d6 <GPS_validate+0x5e>
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	683a      	ldr	r2, [r7, #0]
 80017c8:	4413      	add	r3, r2
 80017ca:	781b      	ldrb	r3, [r3, #0]
 80017cc:	2b2a      	cmp	r3, #42	@ 0x2a
 80017ce:	d002      	beq.n	80017d6 <GPS_validate+0x5e>
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	2b4a      	cmp	r3, #74	@ 0x4a
 80017d4:	dde5      	ble.n	80017a2 <GPS_validate+0x2a>
    }

    if(i >= 75){
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	2b4a      	cmp	r3, #74	@ 0x4a
 80017da:	dd01      	ble.n	80017e0 <GPS_validate+0x68>
        return 0;// the string was too long so return an error
 80017dc:	2300      	movs	r3, #0
 80017de:	e028      	b.n	8001832 <GPS_validate+0xba>
    }

    if (nmeastr[i] == '*'){
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	683a      	ldr	r2, [r7, #0]
 80017e4:	4413      	add	r3, r2
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	2b2a      	cmp	r3, #42	@ 0x2a
 80017ea:	d119      	bne.n	8001820 <GPS_validate+0xa8>
        check[0] = nmeastr[i+1];    //put hex chars in check string
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	3301      	adds	r3, #1
 80017f0:	683a      	ldr	r2, [r7, #0]
 80017f2:	4413      	add	r3, r2
 80017f4:	781b      	ldrb	r3, [r3, #0]
 80017f6:	733b      	strb	r3, [r7, #12]
        check[1] = nmeastr[i+2];
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	3302      	adds	r3, #2
 80017fc:	683a      	ldr	r2, [r7, #0]
 80017fe:	4413      	add	r3, r2
 8001800:	781b      	ldrb	r3, [r3, #0]
 8001802:	737b      	strb	r3, [r7, #13]
        check[2] = 0;
 8001804:	2300      	movs	r3, #0
 8001806:	73bb      	strb	r3, [r7, #14]
    }
    else
        return 0;// no checksum separator found there for invalid

    sprintf(checkcalcstr,"%02X",calculated_check);
 8001808:	f107 0308 	add.w	r3, r7, #8
 800180c:	693a      	ldr	r2, [r7, #16]
 800180e:	490b      	ldr	r1, [pc, #44]	@ (800183c <GPS_validate+0xc4>)
 8001810:	4618      	mov	r0, r3
 8001812:	f008 f8fb 	bl	8009a0c <siprintf>
    return((checkcalcstr[0] == check[0])
 8001816:	7a3a      	ldrb	r2, [r7, #8]
 8001818:	7b3b      	ldrb	r3, [r7, #12]
        && (checkcalcstr[1] == check[1])) ? 1 : 0 ;
 800181a:	429a      	cmp	r2, r3
 800181c:	d108      	bne.n	8001830 <GPS_validate+0xb8>
 800181e:	e001      	b.n	8001824 <GPS_validate+0xac>
        return 0;// no checksum separator found there for invalid
 8001820:	2300      	movs	r3, #0
 8001822:	e006      	b.n	8001832 <GPS_validate+0xba>
        && (checkcalcstr[1] == check[1])) ? 1 : 0 ;
 8001824:	7a7a      	ldrb	r2, [r7, #9]
 8001826:	7b7b      	ldrb	r3, [r7, #13]
 8001828:	429a      	cmp	r2, r3
 800182a:	d101      	bne.n	8001830 <GPS_validate+0xb8>
 800182c:	2301      	movs	r3, #1
 800182e:	e000      	b.n	8001832 <GPS_validate+0xba>
 8001830:	2300      	movs	r3, #0
	return 0;
}
 8001832:	4618      	mov	r0, r3
 8001834:	3718      	adds	r7, #24
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	0800d9b4 	.word	0x0800d9b4

08001840 <GPS_parse>:
//
void GPS_parse(TAU1201_t *_gps, char *GPSstrParse){
 8001840:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001842:	b08f      	sub	sp, #60	@ 0x3c
 8001844:	af08      	add	r7, sp, #32
 8001846:	60f8      	str	r0, [r7, #12]
 8001848:	60b9      	str	r1, [r7, #8]
//	09:06:45  $GPGLL,1050.69077,N,10647.77953,E,090645.00,A,A*67
//	09:06:45  $GPRMC,090645.00,A,1050.69077,N,10647.77953,E,0.754,,020624,,,A*7A
//	09:06:45  $GPVTG,,T,,M,0.754,N,1.396,K,A*28

/* Command for NEO7, 8M modules*/
    if(!strncmp(GPSstrParse, "$GPGGA", 6)){
 800184a:	2206      	movs	r2, #6
 800184c:	4998      	ldr	r1, [pc, #608]	@ (8001ab0 <GPS_parse+0x270>)
 800184e:	68b8      	ldr	r0, [r7, #8]
 8001850:	f008 fa08 	bl	8009c64 <strncmp>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d14a      	bne.n	80018f0 <GPS_parse+0xb0>
    	if (sscanf(GPSstrParse, "$GPGGA,%f,%f,%c,%f,%c,%d,%d,%f,%f,%c", &_gps->utc_time, &_gps->nmea_latitude, &_gps->ns, &_gps->nmea_longitude, &_gps->ew, &_gps->lock, &_gps->satelites, &_gps->hdop, &_gps->msl_altitude, &_gps->msl_units) >= 1){
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	f103 0c1c 	add.w	ip, r3, #28
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	f103 0e18 	add.w	lr, r3, #24
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	3320      	adds	r3, #32
 800186a:	607b      	str	r3, [r7, #4]
 800186c:	68fa      	ldr	r2, [r7, #12]
 800186e:	3214      	adds	r2, #20
 8001870:	68f9      	ldr	r1, [r7, #12]
 8001872:	3121      	adds	r1, #33	@ 0x21
 8001874:	68f8      	ldr	r0, [r7, #12]
 8001876:	3024      	adds	r0, #36	@ 0x24
 8001878:	68fc      	ldr	r4, [r7, #12]
 800187a:	3428      	adds	r4, #40	@ 0x28
 800187c:	68fd      	ldr	r5, [r7, #12]
 800187e:	352c      	adds	r5, #44	@ 0x2c
 8001880:	68fe      	ldr	r6, [r7, #12]
 8001882:	3630      	adds	r6, #48	@ 0x30
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	3334      	adds	r3, #52	@ 0x34
 8001888:	9307      	str	r3, [sp, #28]
 800188a:	9606      	str	r6, [sp, #24]
 800188c:	9505      	str	r5, [sp, #20]
 800188e:	9404      	str	r4, [sp, #16]
 8001890:	9003      	str	r0, [sp, #12]
 8001892:	9102      	str	r1, [sp, #8]
 8001894:	9201      	str	r2, [sp, #4]
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	9300      	str	r3, [sp, #0]
 800189a:	4673      	mov	r3, lr
 800189c:	4662      	mov	r2, ip
 800189e:	4985      	ldr	r1, [pc, #532]	@ (8001ab4 <GPS_parse+0x274>)
 80018a0:	68b8      	ldr	r0, [r7, #8]
 80018a2:	f008 f8d3 	bl	8009a4c <siscanf>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	f340 8153 	ble.w	8001b54 <GPS_parse+0x314>
    		_gps->dec_latitude = GPS_nmea_to_dec(_gps->nmea_latitude, _gps->ns);
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	edd3 7a06 	vldr	s15, [r3, #24]
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018ba:	4618      	mov	r0, r3
 80018bc:	eeb0 0a67 	vmov.f32	s0, s15
 80018c0:	f000 f956 	bl	8001b70 <GPS_nmea_to_dec>
 80018c4:	eef0 7a40 	vmov.f32	s15, s0
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	edc3 7a03 	vstr	s15, [r3, #12]
    		_gps->dec_longitude = GPS_nmea_to_dec(_gps->nmea_longitude, _gps->ew);
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	edd3 7a05 	vldr	s15, [r3, #20]
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80018da:	4618      	mov	r0, r3
 80018dc:	eeb0 0a67 	vmov.f32	s0, s15
 80018e0:	f000 f946 	bl	8001b70 <GPS_nmea_to_dec>
 80018e4:	eef0 7a40 	vmov.f32	s15, s0
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	edc3 7a02 	vstr	s15, [r3, #8]
    		return;
 80018ee:	e131      	b.n	8001b54 <GPS_parse+0x314>
    	}
    }

    else if (!strncmp(GPSstrParse, "$GPRMC", 6)){
 80018f0:	2206      	movs	r2, #6
 80018f2:	4971      	ldr	r1, [pc, #452]	@ (8001ab8 <GPS_parse+0x278>)
 80018f4:	68b8      	ldr	r0, [r7, #8]
 80018f6:	f008 f9b5 	bl	8009c64 <strncmp>
 80018fa:	4603      	mov	r3, r0
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d137      	bne.n	8001970 <GPS_parse+0x130>
		char utc_uint;
    	if(sscanf(GPSstrParse, "$GPRMC,%f,%c,%f,%c,%f,%c,%f,%f,%d", &_gps->utc_time, &utc_uint, &_gps->nmea_latitude, &_gps->ns, &_gps->nmea_longitude, &_gps->ew, &_gps->speed_k, &_gps->course_d, &_gps->date) >= 1){
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	f103 0c1c 	add.w	ip, r3, #28
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	3318      	adds	r3, #24
 800190a:	68fa      	ldr	r2, [r7, #12]
 800190c:	3220      	adds	r2, #32
 800190e:	68f9      	ldr	r1, [r7, #12]
 8001910:	3114      	adds	r1, #20
 8001912:	68f8      	ldr	r0, [r7, #12]
 8001914:	3021      	adds	r0, #33	@ 0x21
 8001916:	68fc      	ldr	r4, [r7, #12]
 8001918:	3438      	adds	r4, #56	@ 0x38
 800191a:	68fd      	ldr	r5, [r7, #12]
 800191c:	353c      	adds	r5, #60	@ 0x3c
 800191e:	68fe      	ldr	r6, [r7, #12]
 8001920:	3640      	adds	r6, #64	@ 0x40
 8001922:	f107 0e17 	add.w	lr, r7, #23
 8001926:	9606      	str	r6, [sp, #24]
 8001928:	9505      	str	r5, [sp, #20]
 800192a:	9404      	str	r4, [sp, #16]
 800192c:	9003      	str	r0, [sp, #12]
 800192e:	9102      	str	r1, [sp, #8]
 8001930:	9201      	str	r2, [sp, #4]
 8001932:	9300      	str	r3, [sp, #0]
 8001934:	4673      	mov	r3, lr
 8001936:	4662      	mov	r2, ip
 8001938:	4960      	ldr	r1, [pc, #384]	@ (8001abc <GPS_parse+0x27c>)
 800193a:	68b8      	ldr	r0, [r7, #8]
 800193c:	f008 f886 	bl	8009a4c <siscanf>
 8001940:	4603      	mov	r3, r0
 8001942:	2b00      	cmp	r3, #0
 8001944:	f340 8106 	ble.w	8001b54 <GPS_parse+0x314>
    			_gps->speed_km = (_gps->speed_k * 1.852);
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800194c:	4618      	mov	r0, r3
 800194e:	f7fe fdfb 	bl	8000548 <__aeabi_f2d>
 8001952:	a355      	add	r3, pc, #340	@ (adr r3, 8001aa8 <GPS_parse+0x268>)
 8001954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001958:	f7fe fe4e 	bl	80005f8 <__aeabi_dmul>
 800195c:	4602      	mov	r2, r0
 800195e:	460b      	mov	r3, r1
 8001960:	4610      	mov	r0, r2
 8001962:	4619      	mov	r1, r3
 8001964:	f7ff f940 	bl	8000be8 <__aeabi_d2f>
 8001968:	4602      	mov	r2, r0
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	659a      	str	r2, [r3, #88]	@ 0x58
 800196e:	e0f1      	b.n	8001b54 <GPS_parse+0x314>
    		return;
    	}
    }

    else if (!strncmp(GPSstrParse, "$GPGLL", 6)){
 8001970:	2206      	movs	r2, #6
 8001972:	4953      	ldr	r1, [pc, #332]	@ (8001ac0 <GPS_parse+0x280>)
 8001974:	68b8      	ldr	r0, [r7, #8]
 8001976:	f008 f975 	bl	8009c64 <strncmp>
 800197a:	4603      	mov	r3, r0
 800197c:	2b00      	cmp	r3, #0
 800197e:	d11a      	bne.n	80019b6 <GPS_parse+0x176>
        if(sscanf(GPSstrParse, "$GPGLL,%f,%c,%f,%c,%f,%c", &_gps->nmea_latitude, &_gps->ns, &_gps->nmea_longitude, &_gps->ew, &_gps->utc_time, &_gps->gll_status) >= 1)
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	f103 0418 	add.w	r4, r3, #24
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	f103 0520 	add.w	r5, r3, #32
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	3314      	adds	r3, #20
 8001990:	68fa      	ldr	r2, [r7, #12]
 8001992:	3221      	adds	r2, #33	@ 0x21
 8001994:	68f9      	ldr	r1, [r7, #12]
 8001996:	311c      	adds	r1, #28
 8001998:	68f8      	ldr	r0, [r7, #12]
 800199a:	3044      	adds	r0, #68	@ 0x44
 800199c:	9003      	str	r0, [sp, #12]
 800199e:	9102      	str	r1, [sp, #8]
 80019a0:	9201      	str	r2, [sp, #4]
 80019a2:	9300      	str	r3, [sp, #0]
 80019a4:	462b      	mov	r3, r5
 80019a6:	4622      	mov	r2, r4
 80019a8:	4946      	ldr	r1, [pc, #280]	@ (8001ac4 <GPS_parse+0x284>)
 80019aa:	68b8      	ldr	r0, [r7, #8]
 80019ac:	f008 f84e 	bl	8009a4c <siscanf>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	e0ce      	b.n	8001b54 <GPS_parse+0x314>
    //	06:16:34  $GNZDA,061634.000,05,06,2024,00,00*49
    //	06:16:34  $GNTXT,01,01,01,ANT_OK*50

    	      //  $GPVTG,,T,,M,0.580,N,1.075,K,A*2D

    else if(!strncmp(GPSstrParse, "$GNGGA", 6)){
 80019b6:	2206      	movs	r2, #6
 80019b8:	4943      	ldr	r1, [pc, #268]	@ (8001ac8 <GPS_parse+0x288>)
 80019ba:	68b8      	ldr	r0, [r7, #8]
 80019bc:	f008 f952 	bl	8009c64 <strncmp>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d14a      	bne.n	8001a5c <GPS_parse+0x21c>
    	if (sscanf(GPSstrParse, "$GNGGA,%f,%f,%c,%f,%c,%d,%d,%f,%f,%c", &_gps->utc_time, &_gps->nmea_latitude, &_gps->ns, &_gps->nmea_longitude, &_gps->ew, &_gps->lock, &_gps->satelites, &_gps->hdop, &_gps->msl_altitude, &_gps->msl_units) >= 1){
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	f103 0c1c 	add.w	ip, r3, #28
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	f103 0e18 	add.w	lr, r3, #24
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	3320      	adds	r3, #32
 80019d6:	607b      	str	r3, [r7, #4]
 80019d8:	68fa      	ldr	r2, [r7, #12]
 80019da:	3214      	adds	r2, #20
 80019dc:	68f9      	ldr	r1, [r7, #12]
 80019de:	3121      	adds	r1, #33	@ 0x21
 80019e0:	68f8      	ldr	r0, [r7, #12]
 80019e2:	3024      	adds	r0, #36	@ 0x24
 80019e4:	68fc      	ldr	r4, [r7, #12]
 80019e6:	3428      	adds	r4, #40	@ 0x28
 80019e8:	68fd      	ldr	r5, [r7, #12]
 80019ea:	352c      	adds	r5, #44	@ 0x2c
 80019ec:	68fe      	ldr	r6, [r7, #12]
 80019ee:	3630      	adds	r6, #48	@ 0x30
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	3334      	adds	r3, #52	@ 0x34
 80019f4:	9307      	str	r3, [sp, #28]
 80019f6:	9606      	str	r6, [sp, #24]
 80019f8:	9505      	str	r5, [sp, #20]
 80019fa:	9404      	str	r4, [sp, #16]
 80019fc:	9003      	str	r0, [sp, #12]
 80019fe:	9102      	str	r1, [sp, #8]
 8001a00:	9201      	str	r2, [sp, #4]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	9300      	str	r3, [sp, #0]
 8001a06:	4673      	mov	r3, lr
 8001a08:	4662      	mov	r2, ip
 8001a0a:	4930      	ldr	r1, [pc, #192]	@ (8001acc <GPS_parse+0x28c>)
 8001a0c:	68b8      	ldr	r0, [r7, #8]
 8001a0e:	f008 f81d 	bl	8009a4c <siscanf>
 8001a12:	4603      	mov	r3, r0
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	f340 809d 	ble.w	8001b54 <GPS_parse+0x314>
    		_gps->dec_latitude = GPS_nmea_to_dec(_gps->nmea_latitude, _gps->ns);
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	edd3 7a06 	vldr	s15, [r3, #24]
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a26:	4618      	mov	r0, r3
 8001a28:	eeb0 0a67 	vmov.f32	s0, s15
 8001a2c:	f000 f8a0 	bl	8001b70 <GPS_nmea_to_dec>
 8001a30:	eef0 7a40 	vmov.f32	s15, s0
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	edc3 7a03 	vstr	s15, [r3, #12]
    		_gps->dec_longitude = GPS_nmea_to_dec(_gps->nmea_longitude, _gps->ew);
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	edd3 7a05 	vldr	s15, [r3, #20]
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001a46:	4618      	mov	r0, r3
 8001a48:	eeb0 0a67 	vmov.f32	s0, s15
 8001a4c:	f000 f890 	bl	8001b70 <GPS_nmea_to_dec>
 8001a50:	eef0 7a40 	vmov.f32	s15, s0
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	edc3 7a02 	vstr	s15, [r3, #8]
    		return;
 8001a5a:	e07b      	b.n	8001b54 <GPS_parse+0x314>
    	}
    }

    else if (!strncmp(GPSstrParse, "$GNGLL", 6)){
 8001a5c:	2206      	movs	r2, #6
 8001a5e:	491c      	ldr	r1, [pc, #112]	@ (8001ad0 <GPS_parse+0x290>)
 8001a60:	68b8      	ldr	r0, [r7, #8]
 8001a62:	f008 f8ff 	bl	8009c64 <strncmp>
 8001a66:	4603      	mov	r3, r0
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d135      	bne.n	8001ad8 <GPS_parse+0x298>
        if(sscanf(GPSstrParse, "$GNGLL,%f,%c,%f,%c,%f,%c", &_gps->nmea_latitude, &_gps->ns, &_gps->nmea_longitude, &_gps->ew, &_gps->utc_time, &_gps->gll_status) >= 1)
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	f103 0418 	add.w	r4, r3, #24
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	f103 0520 	add.w	r5, r3, #32
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	3314      	adds	r3, #20
 8001a7c:	68fa      	ldr	r2, [r7, #12]
 8001a7e:	3221      	adds	r2, #33	@ 0x21
 8001a80:	68f9      	ldr	r1, [r7, #12]
 8001a82:	311c      	adds	r1, #28
 8001a84:	68f8      	ldr	r0, [r7, #12]
 8001a86:	3044      	adds	r0, #68	@ 0x44
 8001a88:	9003      	str	r0, [sp, #12]
 8001a8a:	9102      	str	r1, [sp, #8]
 8001a8c:	9201      	str	r2, [sp, #4]
 8001a8e:	9300      	str	r3, [sp, #0]
 8001a90:	462b      	mov	r3, r5
 8001a92:	4622      	mov	r2, r4
 8001a94:	490f      	ldr	r1, [pc, #60]	@ (8001ad4 <GPS_parse+0x294>)
 8001a96:	68b8      	ldr	r0, [r7, #8]
 8001a98:	f007 ffd8 	bl	8009a4c <siscanf>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	e058      	b.n	8001b54 <GPS_parse+0x314>
 8001aa2:	bf00      	nop
 8001aa4:	f3af 8000 	nop.w
 8001aa8:	c083126f 	.word	0xc083126f
 8001aac:	3ffda1ca 	.word	0x3ffda1ca
 8001ab0:	0800d9bc 	.word	0x0800d9bc
 8001ab4:	0800d9c4 	.word	0x0800d9c4
 8001ab8:	0800d9ec 	.word	0x0800d9ec
 8001abc:	0800d9f4 	.word	0x0800d9f4
 8001ac0:	0800da18 	.word	0x0800da18
 8001ac4:	0800da20 	.word	0x0800da20
 8001ac8:	0800da3c 	.word	0x0800da3c
 8001acc:	0800da44 	.word	0x0800da44
 8001ad0:	0800da6c 	.word	0x0800da6c
 8001ad4:	0800da74 	.word	0x0800da74
            return;
    }
	//	06:16:34  $GNRMC,061634.000,A,1050.68724,N,10647.78479,E,0.001,23.42,050624,,,A*7F
    //	09:06:45  $GPRMC,090645.00,A,1050.69077,N,10647.77953,E,0.754,,020624,,,A*7A

    else if (!strncmp(GPSstrParse, "$GNRMC", 6)){
 8001ad8:	2206      	movs	r2, #6
 8001ada:	4923      	ldr	r1, [pc, #140]	@ (8001b68 <GPS_parse+0x328>)
 8001adc:	68b8      	ldr	r0, [r7, #8]
 8001ade:	f008 f8c1 	bl	8009c64 <strncmp>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d135      	bne.n	8001b54 <GPS_parse+0x314>
		char utc_uint;
    	if(sscanf(GPSstrParse, "$GNRMC,%f,%c,%f,%c,%f,%c,%f,%f,%d", &_gps->utc_time, &utc_uint, &_gps->nmea_latitude, &_gps->ns, &_gps->nmea_longitude, &_gps->ew, &_gps->speed_k, &_gps->course_d, &_gps->date) >= 1){
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	f103 0c1c 	add.w	ip, r3, #28
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	3318      	adds	r3, #24
 8001af2:	68fa      	ldr	r2, [r7, #12]
 8001af4:	3220      	adds	r2, #32
 8001af6:	68f9      	ldr	r1, [r7, #12]
 8001af8:	3114      	adds	r1, #20
 8001afa:	68f8      	ldr	r0, [r7, #12]
 8001afc:	3021      	adds	r0, #33	@ 0x21
 8001afe:	68fc      	ldr	r4, [r7, #12]
 8001b00:	3438      	adds	r4, #56	@ 0x38
 8001b02:	68fd      	ldr	r5, [r7, #12]
 8001b04:	353c      	adds	r5, #60	@ 0x3c
 8001b06:	68fe      	ldr	r6, [r7, #12]
 8001b08:	3640      	adds	r6, #64	@ 0x40
 8001b0a:	f107 0e16 	add.w	lr, r7, #22
 8001b0e:	9606      	str	r6, [sp, #24]
 8001b10:	9505      	str	r5, [sp, #20]
 8001b12:	9404      	str	r4, [sp, #16]
 8001b14:	9003      	str	r0, [sp, #12]
 8001b16:	9102      	str	r1, [sp, #8]
 8001b18:	9201      	str	r2, [sp, #4]
 8001b1a:	9300      	str	r3, [sp, #0]
 8001b1c:	4673      	mov	r3, lr
 8001b1e:	4662      	mov	r2, ip
 8001b20:	4912      	ldr	r1, [pc, #72]	@ (8001b6c <GPS_parse+0x32c>)
 8001b22:	68b8      	ldr	r0, [r7, #8]
 8001b24:	f007 ff92 	bl	8009a4c <siscanf>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	dd12      	ble.n	8001b54 <GPS_parse+0x314>
    		_gps->speed_km = (_gps->speed_k * 1.852);
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b32:	4618      	mov	r0, r3
 8001b34:	f7fe fd08 	bl	8000548 <__aeabi_f2d>
 8001b38:	a309      	add	r3, pc, #36	@ (adr r3, 8001b60 <GPS_parse+0x320>)
 8001b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b3e:	f7fe fd5b 	bl	80005f8 <__aeabi_dmul>
 8001b42:	4602      	mov	r2, r0
 8001b44:	460b      	mov	r3, r1
 8001b46:	4610      	mov	r0, r2
 8001b48:	4619      	mov	r1, r3
 8001b4a:	f7ff f84d 	bl	8000be8 <__aeabi_d2f>
 8001b4e:	4602      	mov	r2, r0
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	659a      	str	r2, [r3, #88]	@ 0x58
//        if(sscanf(GPSstrParse, "$GNVTG,%f,%c,%f,%c,%f,%c,%f,%c", &_gps->course_t, &_gps->course_t_unit, &_gps->course_m, &_gps->course_m_unit, &_gps->speed_k, &_gps->speed_k_unit, &_gps->speed_km, &_gps->speed_km_unit) >= 1)
//            return;
//    }


}
 8001b54:	371c      	adds	r7, #28
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	f3af 8000 	nop.w
 8001b60:	c083126f 	.word	0xc083126f
 8001b64:	3ffda1ca 	.word	0x3ffda1ca
 8001b68:	0800da90 	.word	0x0800da90
 8001b6c:	0800da98 	.word	0x0800da98

08001b70 <GPS_nmea_to_dec>:

float GPS_nmea_to_dec(float deg_coord, char nsew){
 8001b70:	b480      	push	{r7}
 8001b72:	b087      	sub	sp, #28
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	ed87 0a01 	vstr	s0, [r7, #4]
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	70fb      	strb	r3, [r7, #3]
    int degree = (int)(deg_coord/100);
 8001b7e:	ed97 7a01 	vldr	s14, [r7, #4]
 8001b82:	eddf 6a20 	vldr	s13, [pc, #128]	@ 8001c04 <GPS_nmea_to_dec+0x94>
 8001b86:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b8a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b8e:	ee17 3a90 	vmov	r3, s15
 8001b92:	613b      	str	r3, [r7, #16]
    float minutes = deg_coord - degree*100;
 8001b94:	693b      	ldr	r3, [r7, #16]
 8001b96:	2264      	movs	r2, #100	@ 0x64
 8001b98:	fb02 f303 	mul.w	r3, r2, r3
 8001b9c:	ee07 3a90 	vmov	s15, r3
 8001ba0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ba4:	ed97 7a01 	vldr	s14, [r7, #4]
 8001ba8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bac:	edc7 7a03 	vstr	s15, [r7, #12]
    float dec_deg = minutes / 60;
 8001bb0:	ed97 7a03 	vldr	s14, [r7, #12]
 8001bb4:	eddf 6a14 	vldr	s13, [pc, #80]	@ 8001c08 <GPS_nmea_to_dec+0x98>
 8001bb8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001bbc:	edc7 7a02 	vstr	s15, [r7, #8]
    float decimal = degree + dec_deg;
 8001bc0:	693b      	ldr	r3, [r7, #16]
 8001bc2:	ee07 3a90 	vmov	s15, r3
 8001bc6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bca:	ed97 7a02 	vldr	s14, [r7, #8]
 8001bce:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bd2:	edc7 7a05 	vstr	s15, [r7, #20]
    if (nsew == 'S' || nsew == 'W') { // return negative
 8001bd6:	78fb      	ldrb	r3, [r7, #3]
 8001bd8:	2b53      	cmp	r3, #83	@ 0x53
 8001bda:	d002      	beq.n	8001be2 <GPS_nmea_to_dec+0x72>
 8001bdc:	78fb      	ldrb	r3, [r7, #3]
 8001bde:	2b57      	cmp	r3, #87	@ 0x57
 8001be0:	d105      	bne.n	8001bee <GPS_nmea_to_dec+0x7e>
        decimal *= -1;
 8001be2:	edd7 7a05 	vldr	s15, [r7, #20]
 8001be6:	eef1 7a67 	vneg.f32	s15, s15
 8001bea:	edc7 7a05 	vstr	s15, [r7, #20]
    }
    return decimal;
 8001bee:	697b      	ldr	r3, [r7, #20]
 8001bf0:	ee07 3a90 	vmov	s15, r3
}
 8001bf4:	eeb0 0a67 	vmov.f32	s0, s15
 8001bf8:	371c      	adds	r7, #28
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr
 8001c02:	bf00      	nop
 8001c04:	42c80000 	.word	0x42c80000
 8001c08:	42700000 	.word	0x42700000

08001c0c <getLatitude>:

float getLatitude(TAU1201_t *_gps){
 8001c0c:	b480      	push	{r7}
 8001c0e:	b083      	sub	sp, #12
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
	return _gps->dec_latitude;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	68db      	ldr	r3, [r3, #12]
 8001c18:	ee07 3a90 	vmov	s15, r3
}
 8001c1c:	eeb0 0a67 	vmov.f32	s0, s15
 8001c20:	370c      	adds	r7, #12
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr

08001c2a <getLongitude>:

float getLongitude(TAU1201_t *_gps){
 8001c2a:	b480      	push	{r7}
 8001c2c:	b083      	sub	sp, #12
 8001c2e:	af00      	add	r7, sp, #0
 8001c30:	6078      	str	r0, [r7, #4]
	return _gps->dec_longitude;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	689b      	ldr	r3, [r3, #8]
 8001c36:	ee07 3a90 	vmov	s15, r3
}
 8001c3a:	eeb0 0a67 	vmov.f32	s0, s15
 8001c3e:	370c      	adds	r7, #12
 8001c40:	46bd      	mov	sp, r7
 8001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c46:	4770      	bx	lr

08001c48 <getSpeed>:

float getSpeed(TAU1201_t *_gps){
 8001c48:	b480      	push	{r7}
 8001c4a:	b083      	sub	sp, #12
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
	return _gps->speed_km;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c54:	ee07 3a90 	vmov	s15, r3
}
 8001c58:	eeb0 0a67 	vmov.f32	s0, s15
 8001c5c:	370c      	adds	r7, #12
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr
	...

08001c68 <SIMTransmit>:
uint8_t buffer[100] = {0};             // Bộ đệm nhận dữ liệu từ module SIM
uint32_t previousTick;                 // Biến lưu th�?i gian trước đó

// Hàm gửi lệnh AT đến module SIM và nhận phản hồi
void SIMTransmit(char *cmd)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b082      	sub	sp, #8
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  memset(buffer, 0, sizeof(buffer));                             // Xóa bộ đệm trước khi sử dụng
 8001c70:	2264      	movs	r2, #100	@ 0x64
 8001c72:	2100      	movs	r1, #0
 8001c74:	4818      	ldr	r0, [pc, #96]	@ (8001cd8 <SIMTransmit+0x70>)
 8001c76:	f007 ffed 	bl	8009c54 <memset>
  HAL_UART_Transmit(&huart2, (uint8_t *)cmd, strlen(cmd), 1000); // Gửi lệnh AT qua UART2
 8001c7a:	6878      	ldr	r0, [r7, #4]
 8001c7c:	f7fe faf8 	bl	8000270 <strlen>
 8001c80:	4603      	mov	r3, r0
 8001c82:	b29a      	uxth	r2, r3
 8001c84:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c88:	6879      	ldr	r1, [r7, #4]
 8001c8a:	4814      	ldr	r0, [pc, #80]	@ (8001cdc <SIMTransmit+0x74>)
 8001c8c:	f005 fd96 	bl	80077bc <HAL_UART_Transmit>
  HAL_UART_Receive(&huart2, buffer, 100, 1000);                  // Nhận phản hồi từ module SIM
 8001c90:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c94:	2264      	movs	r2, #100	@ 0x64
 8001c96:	4910      	ldr	r1, [pc, #64]	@ (8001cd8 <SIMTransmit+0x70>)
 8001c98:	4810      	ldr	r0, [pc, #64]	@ (8001cdc <SIMTransmit+0x74>)
 8001c9a:	f005 fe1a 	bl	80078d2 <HAL_UART_Receive>

  // Gửi phản hồi nhận được qua UART6 để debug
  HAL_UART_Transmit(&huart6, (uint8_t *)"Response: ", strlen("Response: "), 1000);
 8001c9e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ca2:	220a      	movs	r2, #10
 8001ca4:	490e      	ldr	r1, [pc, #56]	@ (8001ce0 <SIMTransmit+0x78>)
 8001ca6:	480f      	ldr	r0, [pc, #60]	@ (8001ce4 <SIMTransmit+0x7c>)
 8001ca8:	f005 fd88 	bl	80077bc <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart6, buffer, strlen((char *)buffer), 1000);
 8001cac:	480a      	ldr	r0, [pc, #40]	@ (8001cd8 <SIMTransmit+0x70>)
 8001cae:	f7fe fadf 	bl	8000270 <strlen>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	b29a      	uxth	r2, r3
 8001cb6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001cba:	4907      	ldr	r1, [pc, #28]	@ (8001cd8 <SIMTransmit+0x70>)
 8001cbc:	4809      	ldr	r0, [pc, #36]	@ (8001ce4 <SIMTransmit+0x7c>)
 8001cbe:	f005 fd7d 	bl	80077bc <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart6, (uint8_t *)"\r\n", 2, 1000);
 8001cc2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001cc6:	2202      	movs	r2, #2
 8001cc8:	4907      	ldr	r1, [pc, #28]	@ (8001ce8 <SIMTransmit+0x80>)
 8001cca:	4806      	ldr	r0, [pc, #24]	@ (8001ce4 <SIMTransmit+0x7c>)
 8001ccc:	f005 fd76 	bl	80077bc <HAL_UART_Transmit>
}
 8001cd0:	bf00      	nop
 8001cd2:	3708      	adds	r7, #8
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	200006c4 	.word	0x200006c4
 8001cdc:	200004cc 	.word	0x200004cc
 8001ce0:	0800dabc 	.word	0x0800dabc
 8001ce4:	2000055c 	.word	0x2000055c
 8001ce8:	0800dac8 	.word	0x0800dac8

08001cec <checkAPN>:

// Hàm kiểm tra cấu hình APN trên module SIM
void checkAPN(void)
{
 8001cec:	b590      	push	{r4, r7, lr}
 8001cee:	b083      	sub	sp, #12
 8001cf0:	af00      	add	r7, sp, #0
  uint8_t APNisOK = 0;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	71fb      	strb	r3, [r7, #7]
  previousTick = HAL_GetTick(); // Ghi nhận th�?i gian bắt đầu kiểm tra
 8001cf6:	f001 f8a3 	bl	8002e40 <HAL_GetTick>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	4a22      	ldr	r2, [pc, #136]	@ (8001d88 <checkAPN+0x9c>)
 8001cfe:	6013      	str	r3, [r2, #0]

  while (!APNisOK && previousTick + timeOut > HAL_GetTick())
 8001d00:	e026      	b.n	8001d50 <checkAPN+0x64>
  {
    SIMTransmit("AT+CGDCONT?\r\n"); // Gửi lệnh kiểm tra cấu hình APN hiện tại
 8001d02:	4822      	ldr	r0, [pc, #136]	@ (8001d8c <checkAPN+0xa0>)
 8001d04:	f7ff ffb0 	bl	8001c68 <SIMTransmit>

    if (strstr((char *)buffer, apn)) // Kiểm tra phản hồi chứa thông tin APN đúng
 8001d08:	4921      	ldr	r1, [pc, #132]	@ (8001d90 <checkAPN+0xa4>)
 8001d0a:	4822      	ldr	r0, [pc, #136]	@ (8001d94 <checkAPN+0xa8>)
 8001d0c:	f007 ffbc 	bl	8009c88 <strstr>
 8001d10:	4603      	mov	r3, r0
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d009      	beq.n	8001d2a <checkAPN+0x3e>
    {
      APNisOK = 1;
 8001d16:	2301      	movs	r3, #1
 8001d18:	71fb      	strb	r3, [r7, #7]
      HAL_UART_Transmit(&huart6, (uint8_t *)"APN duoc cau hinh thanh cong!.\r\n", strlen("APN duoc cau hinh thanh cong!.\r\n"), 1000);
 8001d1a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d1e:	2220      	movs	r2, #32
 8001d20:	491d      	ldr	r1, [pc, #116]	@ (8001d98 <checkAPN+0xac>)
 8001d22:	481e      	ldr	r0, [pc, #120]	@ (8001d9c <checkAPN+0xb0>)
 8001d24:	f005 fd4a 	bl	80077bc <HAL_UART_Transmit>
 8001d28:	e00e      	b.n	8001d48 <checkAPN+0x5c>
    }
    else
    {
      HAL_UART_Transmit(&huart6, (uint8_t *)"APN cau hinh sai...\r\n", strlen("APN cau hinh sai...\r\n"), 1000);
 8001d2a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d2e:	2215      	movs	r2, #21
 8001d30:	491b      	ldr	r1, [pc, #108]	@ (8001da0 <checkAPN+0xb4>)
 8001d32:	481a      	ldr	r0, [pc, #104]	@ (8001d9c <checkAPN+0xb0>)
 8001d34:	f005 fd42 	bl	80077bc <HAL_UART_Transmit>
      sprintf(ATcommand, "AT+CGDCONT=1,\"IP\",\"%s\",\"0.0.0.0\",0,0\r\n", apn); // Lệnh cấu hình lại APN
 8001d38:	4a15      	ldr	r2, [pc, #84]	@ (8001d90 <checkAPN+0xa4>)
 8001d3a:	491a      	ldr	r1, [pc, #104]	@ (8001da4 <checkAPN+0xb8>)
 8001d3c:	481a      	ldr	r0, [pc, #104]	@ (8001da8 <checkAPN+0xbc>)
 8001d3e:	f007 fe65 	bl	8009a0c <siprintf>
      SIMTransmit(ATcommand);
 8001d42:	4819      	ldr	r0, [pc, #100]	@ (8001da8 <checkAPN+0xbc>)
 8001d44:	f7ff ff90 	bl	8001c68 <SIMTransmit>
    }
    HAL_Delay(1000); // �?ợi 1 giây trước khi thử lại
 8001d48:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001d4c:	f001 f884 	bl	8002e58 <HAL_Delay>
  while (!APNisOK && previousTick + timeOut > HAL_GetTick())
 8001d50:	79fb      	ldrb	r3, [r7, #7]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d109      	bne.n	8001d6a <checkAPN+0x7e>
 8001d56:	4b0c      	ldr	r3, [pc, #48]	@ (8001d88 <checkAPN+0x9c>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f242 7210 	movw	r2, #10000	@ 0x2710
 8001d5e:	189c      	adds	r4, r3, r2
 8001d60:	f001 f86e 	bl	8002e40 <HAL_GetTick>
 8001d64:	4603      	mov	r3, r0
 8001d66:	429c      	cmp	r4, r3
 8001d68:	d8cb      	bhi.n	8001d02 <checkAPN+0x16>
  }

  if (!APNisOK) // Nếu không thành công sau th�?i gian ch�?
 8001d6a:	79fb      	ldrb	r3, [r7, #7]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d106      	bne.n	8001d7e <checkAPN+0x92>
  {
    HAL_UART_Transmit(&huart6, (uint8_t *)"APN configuration failed.\r\n", strlen("APN configuration failed.\r\n"), 1000);
 8001d70:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d74:	221b      	movs	r2, #27
 8001d76:	490d      	ldr	r1, [pc, #52]	@ (8001dac <checkAPN+0xc0>)
 8001d78:	4808      	ldr	r0, [pc, #32]	@ (8001d9c <checkAPN+0xb0>)
 8001d7a:	f005 fd1f 	bl	80077bc <HAL_UART_Transmit>
  }
}
 8001d7e:	bf00      	nop
 8001d80:	370c      	adds	r7, #12
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd90      	pop	{r4, r7, pc}
 8001d86:	bf00      	nop
 8001d88:	20000728 	.word	0x20000728
 8001d8c:	0800dacc 	.word	0x0800dacc
 8001d90:	0800ddac 	.word	0x0800ddac
 8001d94:	200006c4 	.word	0x200006c4
 8001d98:	0800dadc 	.word	0x0800dadc
 8001d9c:	2000055c 	.word	0x2000055c
 8001da0:	0800db00 	.word	0x0800db00
 8001da4:	0800db18 	.word	0x0800db18
 8001da8:	20000674 	.word	0x20000674
 8001dac:	0800db40 	.word	0x0800db40

08001db0 <httpPost>:

void httpPost(void)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	af00      	add	r7, sp, #0
  // Cấu hình HTTP
  SIMTransmit("AT+HTTPINIT\r\n"); // Khởi tạo HTTP
 8001db4:	482b      	ldr	r0, [pc, #172]	@ (8001e64 <httpPost+0xb4>)
 8001db6:	f7ff ff57 	bl	8001c68 <SIMTransmit>
  HAL_Delay(2000);                // �?ợi một chút sau khi khởi tạo
 8001dba:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001dbe:	f001 f84b 	bl	8002e58 <HAL_Delay>

  // Cấu hình URL (Server và Endpoint)
  sprintf(ATcommand, "AT+HTTPPARA=\"URL\",\"https://%s%s\"\r\n", server, resource);
 8001dc2:	4b29      	ldr	r3, [pc, #164]	@ (8001e68 <httpPost+0xb8>)
 8001dc4:	4a29      	ldr	r2, [pc, #164]	@ (8001e6c <httpPost+0xbc>)
 8001dc6:	492a      	ldr	r1, [pc, #168]	@ (8001e70 <httpPost+0xc0>)
 8001dc8:	482a      	ldr	r0, [pc, #168]	@ (8001e74 <httpPost+0xc4>)
 8001dca:	f007 fe1f 	bl	8009a0c <siprintf>
  SIMTransmit(ATcommand); // Cấu hình URL của server
 8001dce:	4829      	ldr	r0, [pc, #164]	@ (8001e74 <httpPost+0xc4>)
 8001dd0:	f7ff ff4a 	bl	8001c68 <SIMTransmit>
  HAL_Delay(2000);
 8001dd4:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001dd8:	f001 f83e 	bl	8002e58 <HAL_Delay>

  // Cấu hình loại nội dung (Content-Type)
  SIMTransmit("AT+HTTPPARA=\"CONTENT\",\"application/x-www-form-urlencoded\"\r\n");
 8001ddc:	4826      	ldr	r0, [pc, #152]	@ (8001e78 <httpPost+0xc8>)
 8001dde:	f7ff ff43 	bl	8001c68 <SIMTransmit>
  HAL_Delay(2000);
 8001de2:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001de6:	f001 f837 	bl	8002e58 <HAL_Delay>

  // Xác định kích thước dữ liệu POST
  sprintf(ATcommand, "AT+HTTPDATA=%d,10000\r\n", strlen(content)); // Th�?i gian ch�? 10000ms
 8001dea:	4824      	ldr	r0, [pc, #144]	@ (8001e7c <httpPost+0xcc>)
 8001dec:	f7fe fa40 	bl	8000270 <strlen>
 8001df0:	4603      	mov	r3, r0
 8001df2:	461a      	mov	r2, r3
 8001df4:	4922      	ldr	r1, [pc, #136]	@ (8001e80 <httpPost+0xd0>)
 8001df6:	481f      	ldr	r0, [pc, #124]	@ (8001e74 <httpPost+0xc4>)
 8001df8:	f007 fe08 	bl	8009a0c <siprintf>
  SIMTransmit(ATcommand);
 8001dfc:	481d      	ldr	r0, [pc, #116]	@ (8001e74 <httpPost+0xc4>)
 8001dfe:	f7ff ff33 	bl	8001c68 <SIMTransmit>
  HAL_Delay(2000);
 8001e02:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001e06:	f001 f827 	bl	8002e58 <HAL_Delay>

  // Gửi dữ liệu POST
  SIMTransmit(content); // Nội dung sẽ được gửi dưới dạng body của POST
 8001e0a:	481c      	ldr	r0, [pc, #112]	@ (8001e7c <httpPost+0xcc>)
 8001e0c:	f7ff ff2c 	bl	8001c68 <SIMTransmit>
  HAL_Delay(2000);
 8001e10:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001e14:	f001 f820 	bl	8002e58 <HAL_Delay>

  // Gửi lệnh POST đến server
  SIMTransmit("AT+HTTPACTION=1\r\n"); // 1 là HTTP POST
 8001e18:	481a      	ldr	r0, [pc, #104]	@ (8001e84 <httpPost+0xd4>)
 8001e1a:	f7ff ff25 	bl	8001c68 <SIMTransmit>
  HAL_Delay(5000);                    // �?ợi phản hồi từ server
 8001e1e:	f241 3088 	movw	r0, #5000	@ 0x1388
 8001e22:	f001 f819 	bl	8002e58 <HAL_Delay>

  // Kiểm tra mã trạng thái HTTP từ server (200 OK)
  if (strstr((char *)buffer, "+HTTPACTION: 1,200"))
 8001e26:	4918      	ldr	r1, [pc, #96]	@ (8001e88 <httpPost+0xd8>)
 8001e28:	4818      	ldr	r0, [pc, #96]	@ (8001e8c <httpPost+0xdc>)
 8001e2a:	f007 ff2d 	bl	8009c88 <strstr>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d007      	beq.n	8001e44 <httpPost+0x94>
  {
    HAL_UART_Transmit(&huart6, (uint8_t *)"POST success.\r\n", strlen("POST success.\r\n"), 1000);
 8001e34:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e38:	220f      	movs	r2, #15
 8001e3a:	4915      	ldr	r1, [pc, #84]	@ (8001e90 <httpPost+0xe0>)
 8001e3c:	4815      	ldr	r0, [pc, #84]	@ (8001e94 <httpPost+0xe4>)
 8001e3e:	f005 fcbd 	bl	80077bc <HAL_UART_Transmit>
 8001e42:	e006      	b.n	8001e52 <httpPost+0xa2>
  }
  else
  {
    HAL_UART_Transmit(&huart6, (uint8_t *)"POST failed.\r\n", strlen("POST failed.\r\n"), 1000);
 8001e44:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e48:	220e      	movs	r2, #14
 8001e4a:	4913      	ldr	r1, [pc, #76]	@ (8001e98 <httpPost+0xe8>)
 8001e4c:	4811      	ldr	r0, [pc, #68]	@ (8001e94 <httpPost+0xe4>)
 8001e4e:	f005 fcb5 	bl	80077bc <HAL_UART_Transmit>
  }

  // �?óng HTTP
  SIMTransmit("AT+HTTPTERM\r\n");
 8001e52:	4812      	ldr	r0, [pc, #72]	@ (8001e9c <httpPost+0xec>)
 8001e54:	f7ff ff08 	bl	8001c68 <SIMTransmit>
  HAL_Delay(2000);
 8001e58:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001e5c:	f000 fffc 	bl	8002e58 <HAL_Delay>
}
 8001e60:	bf00      	nop
 8001e62:	bd80      	pop	{r7, pc}
 8001e64:	0800db5c 	.word	0x0800db5c
 8001e68:	0800ddcc 	.word	0x0800ddcc
 8001e6c:	0800ddb8 	.word	0x0800ddb8
 8001e70:	0800db6c 	.word	0x0800db6c
 8001e74:	20000674 	.word	0x20000674
 8001e78:	0800db90 	.word	0x0800db90
 8001e7c:	200005ac 	.word	0x200005ac
 8001e80:	0800dbcc 	.word	0x0800dbcc
 8001e84:	0800dbe4 	.word	0x0800dbe4
 8001e88:	0800dbf8 	.word	0x0800dbf8
 8001e8c:	200006c4 	.word	0x200006c4
 8001e90:	0800dc0c 	.word	0x0800dc0c
 8001e94:	2000055c 	.word	0x2000055c
 8001e98:	0800dc1c 	.word	0x0800dc1c
 8001e9c:	0800dc2c 	.word	0x0800dc2c

08001ea0 <bcdToDec>:
{
  return (uint8_t)( (val/10*16) + (val%10) );
}
// Convert binary coded decimal to normal decimal numbers
int bcdToDec(uint8_t val)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b083      	sub	sp, #12
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	71fb      	strb	r3, [r7, #7]
  return (int)( (val/16*10) + (val%16) );
 8001eaa:	79fb      	ldrb	r3, [r7, #7]
 8001eac:	091b      	lsrs	r3, r3, #4
 8001eae:	b2db      	uxtb	r3, r3
 8001eb0:	461a      	mov	r2, r3
 8001eb2:	4613      	mov	r3, r2
 8001eb4:	009b      	lsls	r3, r3, #2
 8001eb6:	4413      	add	r3, r2
 8001eb8:	005b      	lsls	r3, r3, #1
 8001eba:	461a      	mov	r2, r3
 8001ebc:	79fb      	ldrb	r3, [r7, #7]
 8001ebe:	f003 030f 	and.w	r3, r3, #15
 8001ec2:	4413      	add	r3, r2
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	370c      	adds	r7, #12
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ece:	4770      	bx	lr

08001ed0 <Get_Time>:
	set_time[6] = decToBcd(year);

	HAL_I2C_Mem_Write(&hi2c1, DS3231_ADDRESS, 0x00, 1, set_time, 7, 1000);
}
void Get_Time (void)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b086      	sub	sp, #24
 8001ed4:	af04      	add	r7, sp, #16
	uint8_t get_time[7];
	HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDRESS, 0x00, 1, get_time, 7, 1000);
 8001ed6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001eda:	9302      	str	r3, [sp, #8]
 8001edc:	2307      	movs	r3, #7
 8001ede:	9301      	str	r3, [sp, #4]
 8001ee0:	463b      	mov	r3, r7
 8001ee2:	9300      	str	r3, [sp, #0]
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	21d0      	movs	r1, #208	@ 0xd0
 8001eea:	481f      	ldr	r0, [pc, #124]	@ (8001f68 <Get_Time+0x98>)
 8001eec:	f001 ffca 	bl	8003e84 <HAL_I2C_Mem_Read>
	time.seconds = bcdToDec(get_time[0]);
 8001ef0:	783b      	ldrb	r3, [r7, #0]
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f7ff ffd4 	bl	8001ea0 <bcdToDec>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	b2da      	uxtb	r2, r3
 8001efc:	4b1b      	ldr	r3, [pc, #108]	@ (8001f6c <Get_Time+0x9c>)
 8001efe:	701a      	strb	r2, [r3, #0]
	time.minutes = bcdToDec(get_time[1]);
 8001f00:	787b      	ldrb	r3, [r7, #1]
 8001f02:	4618      	mov	r0, r3
 8001f04:	f7ff ffcc 	bl	8001ea0 <bcdToDec>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	b2da      	uxtb	r2, r3
 8001f0c:	4b17      	ldr	r3, [pc, #92]	@ (8001f6c <Get_Time+0x9c>)
 8001f0e:	705a      	strb	r2, [r3, #1]
	time.hour = bcdToDec(get_time[2]);
 8001f10:	78bb      	ldrb	r3, [r7, #2]
 8001f12:	4618      	mov	r0, r3
 8001f14:	f7ff ffc4 	bl	8001ea0 <bcdToDec>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	b2da      	uxtb	r2, r3
 8001f1c:	4b13      	ldr	r3, [pc, #76]	@ (8001f6c <Get_Time+0x9c>)
 8001f1e:	709a      	strb	r2, [r3, #2]
	time.dayofweek = bcdToDec(get_time[3]);
 8001f20:	78fb      	ldrb	r3, [r7, #3]
 8001f22:	4618      	mov	r0, r3
 8001f24:	f7ff ffbc 	bl	8001ea0 <bcdToDec>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	b2da      	uxtb	r2, r3
 8001f2c:	4b0f      	ldr	r3, [pc, #60]	@ (8001f6c <Get_Time+0x9c>)
 8001f2e:	70da      	strb	r2, [r3, #3]
	time.dayofmonth = bcdToDec(get_time[4]);
 8001f30:	793b      	ldrb	r3, [r7, #4]
 8001f32:	4618      	mov	r0, r3
 8001f34:	f7ff ffb4 	bl	8001ea0 <bcdToDec>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	b2da      	uxtb	r2, r3
 8001f3c:	4b0b      	ldr	r3, [pc, #44]	@ (8001f6c <Get_Time+0x9c>)
 8001f3e:	711a      	strb	r2, [r3, #4]
	time.month = bcdToDec(get_time[5]);
 8001f40:	797b      	ldrb	r3, [r7, #5]
 8001f42:	4618      	mov	r0, r3
 8001f44:	f7ff ffac 	bl	8001ea0 <bcdToDec>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	b2da      	uxtb	r2, r3
 8001f4c:	4b07      	ldr	r3, [pc, #28]	@ (8001f6c <Get_Time+0x9c>)
 8001f4e:	715a      	strb	r2, [r3, #5]
	time.year = bcdToDec(get_time[6]);
 8001f50:	79bb      	ldrb	r3, [r7, #6]
 8001f52:	4618      	mov	r0, r3
 8001f54:	f7ff ffa4 	bl	8001ea0 <bcdToDec>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	b2da      	uxtb	r2, r3
 8001f5c:	4b03      	ldr	r3, [pc, #12]	@ (8001f6c <Get_Time+0x9c>)
 8001f5e:	719a      	strb	r2, [r3, #6]
}
 8001f60:	bf00      	nop
 8001f62:	3708      	adds	r7, #8
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}
 8001f68:	200003e8 	.word	0x200003e8
 8001f6c:	20000738 	.word	0x20000738

08001f70 <HAL_UART_RxCpltCallback>:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
	}

	//KiemTraNguongBuzzer(temperature, )
}
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b082      	sub	sp, #8
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
//	    }
//
//	    // Bắt đầu nhận byte tiếp theo qua UART ở chế độ ngắt
//	    HAL_UART_Receive_IT(&huart2, &recvd_data, 1);
//	}
		if(huart->Instance == huart3.Instance){
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681a      	ldr	r2, [r3, #0]
 8001f7c:	4b0f      	ldr	r3, [pc, #60]	@ (8001fbc <HAL_UART_RxCpltCallback+0x4c>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	429a      	cmp	r2, r3
 8001f82:	d103      	bne.n	8001f8c <HAL_UART_RxCpltCallback+0x1c>
			GPS_UART_CallBack(&gps);
 8001f84:	480e      	ldr	r0, [pc, #56]	@ (8001fc0 <HAL_UART_RxCpltCallback+0x50>)
 8001f86:	f7ff fbb7 	bl	80016f8 <GPS_UART_CallBack>
//				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
//			}
			//HAL_UART_Receive_IT(&huart4, &NhanDuLieuBuzzerBangNgat, sizeof(NhanDuLieuBuzzerBangNgat));

}
}
 8001f8a:	e013      	b.n	8001fb4 <HAL_UART_RxCpltCallback+0x44>
		else if(huart->Instance == huart4.Instance)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	4b0c      	ldr	r3, [pc, #48]	@ (8001fc4 <HAL_UART_RxCpltCallback+0x54>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	429a      	cmp	r2, r3
 8001f96:	d10d      	bne.n	8001fb4 <HAL_UART_RxCpltCallback+0x44>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 8001f98:	2201      	movs	r2, #1
 8001f9a:	2102      	movs	r1, #2
 8001f9c:	480a      	ldr	r0, [pc, #40]	@ (8001fc8 <HAL_UART_RxCpltCallback+0x58>)
 8001f9e:	f001 facd 	bl	800353c <HAL_GPIO_WritePin>
				HAL_Delay(1000);
 8001fa2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001fa6:	f000 ff57 	bl	8002e58 <HAL_Delay>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8001faa:	2200      	movs	r2, #0
 8001fac:	2102      	movs	r1, #2
 8001fae:	4806      	ldr	r0, [pc, #24]	@ (8001fc8 <HAL_UART_RxCpltCallback+0x58>)
 8001fb0:	f001 fac4 	bl	800353c <HAL_GPIO_WritePin>
}
 8001fb4:	bf00      	nop
 8001fb6:	3708      	adds	r7, #8
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	20000514 	.word	0x20000514
 8001fc0:	20000388 	.word	0x20000388
 8001fc4:	20000484 	.word	0x20000484
 8001fc8:	40020400 	.word	0x40020400

08001fcc <HAL_UART_TxCpltCallback>:
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b083      	sub	sp, #12
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
	//memset(MangLuuDuLieuDuocLuu, 0, strlen(MangLuuDuLieuDuocLuu));
	//uint8_t pinStateSensor = HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, 1);
	//uint8_t pin_state = (GPIOD->IDR & (1 << 4)) >> 4; // �?�?c trạng thái của chân PD4

}
 8001fd4:	bf00      	nop
 8001fd6:	370c      	adds	r7, #12
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr

08001fe0 <KiemTraNguongBuzzer>:

void KiemTraNguongBuzzer(float NhietDoHienTai, float DoAmHienTai)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b082      	sub	sp, #8
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	ed87 0a01 	vstr	s0, [r7, #4]
 8001fea:	edc7 0a00 	vstr	s1, [r7]
	if((NhietDoHienTai > NguongNhietDoDuoi) && (DoAmHienTai < NguongDoAmTren ))
 8001fee:	4b16      	ldr	r3, [pc, #88]	@ (8002048 <KiemTraNguongBuzzer+0x68>)
 8001ff0:	edd3 7a00 	vldr	s15, [r3]
 8001ff4:	ed97 7a01 	vldr	s14, [r7, #4]
 8001ff8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ffc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002000:	dd18      	ble.n	8002034 <KiemTraNguongBuzzer+0x54>
 8002002:	4b12      	ldr	r3, [pc, #72]	@ (800204c <KiemTraNguongBuzzer+0x6c>)
 8002004:	edd3 7a00 	vldr	s15, [r3]
 8002008:	ed97 7a00 	vldr	s14, [r7]
 800200c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002010:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002014:	d50e      	bpl.n	8002034 <KiemTraNguongBuzzer+0x54>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 8002016:	2201      	movs	r2, #1
 8002018:	2102      	movs	r1, #2
 800201a:	480d      	ldr	r0, [pc, #52]	@ (8002050 <KiemTraNguongBuzzer+0x70>)
 800201c:	f001 fa8e 	bl	800353c <HAL_GPIO_WritePin>
		//HAL_TIM_Base_Start_IT(&htim2);
		HAL_Delay(500);
 8002020:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002024:	f000 ff18 	bl	8002e58 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8002028:	2200      	movs	r2, #0
 800202a:	2102      	movs	r1, #2
 800202c:	4808      	ldr	r0, [pc, #32]	@ (8002050 <KiemTraNguongBuzzer+0x70>)
 800202e:	f001 fa85 	bl	800353c <HAL_GPIO_WritePin>
 8002032:	e005      	b.n	8002040 <KiemTraNguongBuzzer+0x60>
	}
	else
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8002034:	2200      	movs	r2, #0
 8002036:	2102      	movs	r1, #2
 8002038:	4805      	ldr	r0, [pc, #20]	@ (8002050 <KiemTraNguongBuzzer+0x70>)
 800203a:	f001 fa7f 	bl	800353c <HAL_GPIO_WritePin>
	}
}
 800203e:	bf00      	nop
 8002040:	bf00      	nop
 8002042:	3708      	adds	r7, #8
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}
 8002048:	20000070 	.word	0x20000070
 800204c:	20000074 	.word	0x20000074
 8002050:	40020400 	.word	0x40020400

08002054 <RunMainProgram>:

void RunMainProgram()
{
 8002054:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002058:	b09d      	sub	sp, #116	@ 0x74
 800205a:	af12      	add	r7, sp, #72	@ 0x48
	printf("Get location completed, using location from GPS module\r\n");
 800205c:	4847      	ldr	r0, [pc, #284]	@ (800217c <RunMainProgram+0x128>)
 800205e:	f007 fccd 	bl	80099fc <puts>
				Latitude = getLatitude(&gps);
 8002062:	4847      	ldr	r0, [pc, #284]	@ (8002180 <RunMainProgram+0x12c>)
 8002064:	f7ff fdd2 	bl	8001c0c <getLatitude>
 8002068:	eef0 7a40 	vmov.f32	s15, s0
 800206c:	4b45      	ldr	r3, [pc, #276]	@ (8002184 <RunMainProgram+0x130>)
 800206e:	edc3 7a00 	vstr	s15, [r3]
				Longitude = getLongitude(&gps);
 8002072:	4843      	ldr	r0, [pc, #268]	@ (8002180 <RunMainProgram+0x12c>)
 8002074:	f7ff fdd9 	bl	8001c2a <getLongitude>
 8002078:	eef0 7a40 	vmov.f32	s15, s0
 800207c:	4b42      	ldr	r3, [pc, #264]	@ (8002188 <RunMainProgram+0x134>)
 800207e:	edc3 7a00 	vstr	s15, [r3]
				Speed = getSpeed(&gps);
 8002082:	483f      	ldr	r0, [pc, #252]	@ (8002180 <RunMainProgram+0x12c>)
 8002084:	f7ff fde0 	bl	8001c48 <getSpeed>
 8002088:	eef0 7a40 	vmov.f32	s15, s0
 800208c:	4b3f      	ldr	r3, [pc, #252]	@ (800218c <RunMainProgram+0x138>)
 800208e:	edc3 7a00 	vstr	s15, [r3]


	sprintf(MangLuuDuLieuDuocLuu,"%02d:%02d:%02d:%02d-%02d-20%02d NhietDo=%.2f DoAm=%.2f Latitude=%.2f%c Longtitude=%.2f%c Speed_km=%.3f\r\n",
			time.hour,
 8002092:	4b3f      	ldr	r3, [pc, #252]	@ (8002190 <RunMainProgram+0x13c>)
 8002094:	789b      	ldrb	r3, [r3, #2]
	sprintf(MangLuuDuLieuDuocLuu,"%02d:%02d:%02d:%02d-%02d-20%02d NhietDo=%.2f DoAm=%.2f Latitude=%.2f%c Longtitude=%.2f%c Speed_km=%.3f\r\n",
 8002096:	627b      	str	r3, [r7, #36]	@ 0x24
			time.minutes,
 8002098:	4b3d      	ldr	r3, [pc, #244]	@ (8002190 <RunMainProgram+0x13c>)
 800209a:	785b      	ldrb	r3, [r3, #1]
	sprintf(MangLuuDuLieuDuocLuu,"%02d:%02d:%02d:%02d-%02d-20%02d NhietDo=%.2f DoAm=%.2f Latitude=%.2f%c Longtitude=%.2f%c Speed_km=%.3f\r\n",
 800209c:	623b      	str	r3, [r7, #32]
			time.seconds,
 800209e:	4b3c      	ldr	r3, [pc, #240]	@ (8002190 <RunMainProgram+0x13c>)
 80020a0:	781b      	ldrb	r3, [r3, #0]
	sprintf(MangLuuDuLieuDuocLuu,"%02d:%02d:%02d:%02d-%02d-20%02d NhietDo=%.2f DoAm=%.2f Latitude=%.2f%c Longtitude=%.2f%c Speed_km=%.3f\r\n",
 80020a2:	61fb      	str	r3, [r7, #28]
			time.dayofmonth,
 80020a4:	4b3a      	ldr	r3, [pc, #232]	@ (8002190 <RunMainProgram+0x13c>)
 80020a6:	791b      	ldrb	r3, [r3, #4]
	sprintf(MangLuuDuLieuDuocLuu,"%02d:%02d:%02d:%02d-%02d-20%02d NhietDo=%.2f DoAm=%.2f Latitude=%.2f%c Longtitude=%.2f%c Speed_km=%.3f\r\n",
 80020a8:	61bb      	str	r3, [r7, #24]
			time.month,
 80020aa:	4b39      	ldr	r3, [pc, #228]	@ (8002190 <RunMainProgram+0x13c>)
 80020ac:	795b      	ldrb	r3, [r3, #5]
	sprintf(MangLuuDuLieuDuocLuu,"%02d:%02d:%02d:%02d-%02d-20%02d NhietDo=%.2f DoAm=%.2f Latitude=%.2f%c Longtitude=%.2f%c Speed_km=%.3f\r\n",
 80020ae:	617b      	str	r3, [r7, #20]
			time.year,
 80020b0:	4b37      	ldr	r3, [pc, #220]	@ (8002190 <RunMainProgram+0x13c>)
 80020b2:	799b      	ldrb	r3, [r3, #6]
	sprintf(MangLuuDuLieuDuocLuu,"%02d:%02d:%02d:%02d-%02d-20%02d NhietDo=%.2f DoAm=%.2f Latitude=%.2f%c Longtitude=%.2f%c Speed_km=%.3f\r\n",
 80020b4:	613b      	str	r3, [r7, #16]
 80020b6:	4b37      	ldr	r3, [pc, #220]	@ (8002194 <RunMainProgram+0x140>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4618      	mov	r0, r3
 80020bc:	f7fe fa44 	bl	8000548 <__aeabi_f2d>
 80020c0:	4682      	mov	sl, r0
 80020c2:	468b      	mov	fp, r1
 80020c4:	4b34      	ldr	r3, [pc, #208]	@ (8002198 <RunMainProgram+0x144>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4618      	mov	r0, r3
 80020ca:	f7fe fa3d 	bl	8000548 <__aeabi_f2d>
 80020ce:	e9c7 0102 	strd	r0, r1, [r7, #8]
			temperature,
			humidity,
			gps.dec_latitude,
 80020d2:	4b2b      	ldr	r3, [pc, #172]	@ (8002180 <RunMainProgram+0x12c>)
 80020d4:	68db      	ldr	r3, [r3, #12]
	sprintf(MangLuuDuLieuDuocLuu,"%02d:%02d:%02d:%02d-%02d-20%02d NhietDo=%.2f DoAm=%.2f Latitude=%.2f%c Longtitude=%.2f%c Speed_km=%.3f\r\n",
 80020d6:	4618      	mov	r0, r3
 80020d8:	f7fe fa36 	bl	8000548 <__aeabi_f2d>
 80020dc:	4680      	mov	r8, r0
 80020de:	4689      	mov	r9, r1
			gps.ns,
 80020e0:	4b27      	ldr	r3, [pc, #156]	@ (8002180 <RunMainProgram+0x12c>)
 80020e2:	f893 3020 	ldrb.w	r3, [r3, #32]
	sprintf(MangLuuDuLieuDuocLuu,"%02d:%02d:%02d:%02d-%02d-20%02d NhietDo=%.2f DoAm=%.2f Latitude=%.2f%c Longtitude=%.2f%c Speed_km=%.3f\r\n",
 80020e6:	607b      	str	r3, [r7, #4]
			gps.dec_longitude,
 80020e8:	4b25      	ldr	r3, [pc, #148]	@ (8002180 <RunMainProgram+0x12c>)
 80020ea:	689b      	ldr	r3, [r3, #8]
	sprintf(MangLuuDuLieuDuocLuu,"%02d:%02d:%02d:%02d-%02d-20%02d NhietDo=%.2f DoAm=%.2f Latitude=%.2f%c Longtitude=%.2f%c Speed_km=%.3f\r\n",
 80020ec:	4618      	mov	r0, r3
 80020ee:	f7fe fa2b 	bl	8000548 <__aeabi_f2d>
 80020f2:	4604      	mov	r4, r0
 80020f4:	460d      	mov	r5, r1
			gps.ew,
 80020f6:	4b22      	ldr	r3, [pc, #136]	@ (8002180 <RunMainProgram+0x12c>)
 80020f8:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
	sprintf(MangLuuDuLieuDuocLuu,"%02d:%02d:%02d:%02d-%02d-20%02d NhietDo=%.2f DoAm=%.2f Latitude=%.2f%c Longtitude=%.2f%c Speed_km=%.3f\r\n",
 80020fc:	461e      	mov	r6, r3
			gps.speed_km
 80020fe:	4b20      	ldr	r3, [pc, #128]	@ (8002180 <RunMainProgram+0x12c>)
 8002100:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
	sprintf(MangLuuDuLieuDuocLuu,"%02d:%02d:%02d:%02d-%02d-20%02d NhietDo=%.2f DoAm=%.2f Latitude=%.2f%c Longtitude=%.2f%c Speed_km=%.3f\r\n",
 8002102:	4618      	mov	r0, r3
 8002104:	f7fe fa20 	bl	8000548 <__aeabi_f2d>
 8002108:	4602      	mov	r2, r0
 800210a:	460b      	mov	r3, r1
 800210c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8002110:	960e      	str	r6, [sp, #56]	@ 0x38
 8002112:	e9cd 450c 	strd	r4, r5, [sp, #48]	@ 0x30
 8002116:	6879      	ldr	r1, [r7, #4]
 8002118:	910a      	str	r1, [sp, #40]	@ 0x28
 800211a:	e9cd 8908 	strd	r8, r9, [sp, #32]
 800211e:	ed97 7b02 	vldr	d7, [r7, #8]
 8002122:	ed8d 7b06 	vstr	d7, [sp, #24]
 8002126:	e9cd ab04 	strd	sl, fp, [sp, #16]
 800212a:	6939      	ldr	r1, [r7, #16]
 800212c:	9103      	str	r1, [sp, #12]
 800212e:	6979      	ldr	r1, [r7, #20]
 8002130:	9102      	str	r1, [sp, #8]
 8002132:	69b9      	ldr	r1, [r7, #24]
 8002134:	9101      	str	r1, [sp, #4]
 8002136:	69f9      	ldr	r1, [r7, #28]
 8002138:	9100      	str	r1, [sp, #0]
 800213a:	6a3b      	ldr	r3, [r7, #32]
 800213c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800213e:	4917      	ldr	r1, [pc, #92]	@ (800219c <RunMainProgram+0x148>)
 8002140:	4817      	ldr	r0, [pc, #92]	@ (80021a0 <RunMainProgram+0x14c>)
 8002142:	f007 fc63 	bl	8009a0c <siprintf>
	);
	HAL_UART_Transmit_IT(&huart4, MangLuuDuLieuDuocLuu, sizeof(MangLuuDuLieuDuocLuu));
 8002146:	2264      	movs	r2, #100	@ 0x64
 8002148:	4915      	ldr	r1, [pc, #84]	@ (80021a0 <RunMainProgram+0x14c>)
 800214a:	4816      	ldr	r0, [pc, #88]	@ (80021a4 <RunMainProgram+0x150>)
 800214c:	f005 fc58 	bl	8007a00 <HAL_UART_Transmit_IT>
	HAL_UART_Receive_IT(&huart4, &NhanDuLieuBuzzerBangNgat,sizeof(NhanDuLieuBuzzerBangNgat));
 8002150:	2201      	movs	r2, #1
 8002152:	4915      	ldr	r1, [pc, #84]	@ (80021a8 <RunMainProgram+0x154>)
 8002154:	4813      	ldr	r0, [pc, #76]	@ (80021a4 <RunMainProgram+0x150>)
 8002156:	f005 fc89 	bl	8007a6c <HAL_UART_Receive_IT>
	KiemTraNguongBuzzer(temperature, humidity);
 800215a:	4b0e      	ldr	r3, [pc, #56]	@ (8002194 <RunMainProgram+0x140>)
 800215c:	edd3 7a00 	vldr	s15, [r3]
 8002160:	4b0d      	ldr	r3, [pc, #52]	@ (8002198 <RunMainProgram+0x144>)
 8002162:	ed93 7a00 	vldr	s14, [r3]
 8002166:	eef0 0a47 	vmov.f32	s1, s14
 800216a:	eeb0 0a67 	vmov.f32	s0, s15
 800216e:	f7ff ff37 	bl	8001fe0 <KiemTraNguongBuzzer>
}
 8002172:	bf00      	nop
 8002174:	372c      	adds	r7, #44	@ 0x2c
 8002176:	46bd      	mov	sp, r7
 8002178:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800217c:	0800dc3c 	.word	0x0800dc3c
 8002180:	20000388 	.word	0x20000388
 8002184:	2000072c 	.word	0x2000072c
 8002188:	20000730 	.word	0x20000730
 800218c:	20000734 	.word	0x20000734
 8002190:	20000738 	.word	0x20000738
 8002194:	200005a4 	.word	0x200005a4
 8002198:	200005a8 	.word	0x200005a8
 800219c:	0800dc74 	.word	0x0800dc74
 80021a0:	20000320 	.word	0x20000320
 80021a4:	20000484 	.word	0x20000484
 80021a8:	20000384 	.word	0x20000384

080021ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80021ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80021b0:	b08c      	sub	sp, #48	@ 0x30
 80021b2:	af0a      	add	r7, sp, #40	@ 0x28

  /* USER CODE BEGIN 1 */
	BH1750_init_i2c(&hi2c1);
 80021b4:	4852      	ldr	r0, [pc, #328]	@ (8002300 <main+0x154>)
 80021b6:	f7fe ff1d 	bl	8000ff4 <BH1750_init_i2c>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80021ba:	f000 fddb 	bl	8002d74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80021be:	f000 f8c1 	bl	8002344 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80021c2:	f000 fa4d 	bl	8002660 <MX_GPIO_Init>
  MX_I2C1_Init();
 80021c6:	f000 f927 	bl	8002418 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 80021ca:	f000 f9f5 	bl	80025b8 <MX_USART3_UART_Init>
  MX_UART4_Init();
 80021ce:	f000 f99f 	bl	8002510 <MX_UART4_Init>
  MX_USART2_UART_Init();
 80021d2:	f000 f9c7 	bl	8002564 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 80021d6:	f000 fa19 	bl	800260c <MX_USART6_UART_Init>
  MX_TIM2_Init();
 80021da:	f000 f94b 	bl	8002474 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80021de:	4849      	ldr	r0, [pc, #292]	@ (8002304 <main+0x158>)
 80021e0:	f004 fe6c 	bl	8006ebc <HAL_TIM_Base_Start_IT>
  //Ringbuf_init();
  //Set_Time(05, 32, 9, 03, 17, 12, 24);

  // Initialize RTC with I2C handl
  rtc_init(&hi2c1);
 80021e4:	4846      	ldr	r0, [pc, #280]	@ (8002300 <main+0x154>)
 80021e6:	f7ff f827 	bl	8001238 <rtc_init>

  BH1750_device_t* test_dev = BH1750_init_dev_struct(&hi2c1, "test device", true);
 80021ea:	2201      	movs	r2, #1
 80021ec:	4946      	ldr	r1, [pc, #280]	@ (8002308 <main+0x15c>)
 80021ee:	4844      	ldr	r0, [pc, #272]	@ (8002300 <main+0x154>)
 80021f0:	f7fe ff6c 	bl	80010cc <BH1750_init_dev_struct>
 80021f4:	6078      	str	r0, [r7, #4]
  BH1750_init_dev(test_dev);
 80021f6:	6878      	ldr	r0, [r7, #4]
 80021f8:	f7fe ffae 	bl	8001158 <BH1750_init_dev>
  SHT31_Config(SHT31_ADDRESS_A, &hi2c1);
 80021fc:	4940      	ldr	r1, [pc, #256]	@ (8002300 <main+0x154>)
 80021fe:	2044      	movs	r0, #68	@ 0x44
 8002200:	f7ff f82a 	bl	8001258 <SHT31_Config>

  if(GPS_Init(&gps, &huart3) == GPS_OK){
 8002204:	4941      	ldr	r1, [pc, #260]	@ (800230c <main+0x160>)
 8002206:	4842      	ldr	r0, [pc, #264]	@ (8002310 <main+0x164>)
 8002208:	f7ff fa5e 	bl	80016c8 <GPS_Init>
 800220c:	4603      	mov	r3, r0
 800220e:	2b01      	cmp	r3, #1
 8002210:	d103      	bne.n	800221a <main+0x6e>
  	  printf("Init GPS module completed\r\n");
 8002212:	4840      	ldr	r0, [pc, #256]	@ (8002314 <main+0x168>)
 8002214:	f007 fbf2 	bl	80099fc <puts>
 8002218:	e002      	b.n	8002220 <main+0x74>
    }
    else{
  	  printf("Init GPS module error\r\n");
 800221a:	483f      	ldr	r0, [pc, #252]	@ (8002318 <main+0x16c>)
 800221c:	f007 fbee 	bl	80099fc <puts>
    }


  checkAPN(); // Kiểm tra APN trước khi sử dụng HTTP POST
 8002220:	f7ff fd64 	bl	8001cec <checkAPN>
  /* USER CODE BEGIN WHILE */
  while (1)
  {


	  RunMainProgram();
 8002224:	f7ff ff16 	bl	8002054 <RunMainProgram>
//=======================================SHT32+DS3231==============================================================
	  test_dev->poll(test_dev);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	691b      	ldr	r3, [r3, #16]
 800222c:	6878      	ldr	r0, [r7, #4]
 800222e:	4798      	blx	r3
      HAL_Delay(200);
 8002230:	20c8      	movs	r0, #200	@ 0xc8
 8002232:	f000 fe11 	bl	8002e58 <HAL_Delay>
	  if(SHT31_GetData(SHT31_Periodic, SHT31_Medium, SHT31_NON_Stretch, SHT31_1) == SHT31_OK) {
 8002236:	2301      	movs	r3, #1
 8002238:	2202      	movs	r2, #2
 800223a:	2101      	movs	r1, #1
 800223c:	2001      	movs	r0, #1
 800223e:	f7ff f879 	bl	8001334 <SHT31_GetData>
 8002242:	4603      	mov	r3, r0
 8002244:	2b00      	cmp	r3, #0
 8002246:	d10d      	bne.n	8002264 <main+0xb8>
	  	  	  		temperature = SHT31_GetTemperature();
 8002248:	f7ff f9c2 	bl	80015d0 <SHT31_GetTemperature>
 800224c:	eef0 7a40 	vmov.f32	s15, s0
 8002250:	4b32      	ldr	r3, [pc, #200]	@ (800231c <main+0x170>)
 8002252:	edc3 7a00 	vstr	s15, [r3]
	  	  	  		humidity = SHT31_GetHumidity();
 8002256:	f7ff f98f 	bl	8001578 <SHT31_GetHumidity>
 800225a:	eef0 7a40 	vmov.f32	s15, s0
 800225e:	4b30      	ldr	r3, [pc, #192]	@ (8002320 <main+0x174>)
 8002260:	edc3 7a00 	vstr	s15, [r3]
	  }
	  Get_Time();
 8002264:	f7ff fe34 	bl	8001ed0 <Get_Time>
	  sprintf (bufferDS3231, "%02d:%02d:%02d:%02d-%02d-20%02d", time.hour, time.minutes, time.seconds,time.dayofmonth, time.month, time.year);
 8002268:	4b2e      	ldr	r3, [pc, #184]	@ (8002324 <main+0x178>)
 800226a:	789b      	ldrb	r3, [r3, #2]
 800226c:	461c      	mov	r4, r3
 800226e:	4b2d      	ldr	r3, [pc, #180]	@ (8002324 <main+0x178>)
 8002270:	785b      	ldrb	r3, [r3, #1]
 8002272:	461d      	mov	r5, r3
 8002274:	4b2b      	ldr	r3, [pc, #172]	@ (8002324 <main+0x178>)
 8002276:	781b      	ldrb	r3, [r3, #0]
 8002278:	461a      	mov	r2, r3
 800227a:	4b2a      	ldr	r3, [pc, #168]	@ (8002324 <main+0x178>)
 800227c:	791b      	ldrb	r3, [r3, #4]
 800227e:	4619      	mov	r1, r3
 8002280:	4b28      	ldr	r3, [pc, #160]	@ (8002324 <main+0x178>)
 8002282:	795b      	ldrb	r3, [r3, #5]
 8002284:	4618      	mov	r0, r3
 8002286:	4b27      	ldr	r3, [pc, #156]	@ (8002324 <main+0x178>)
 8002288:	799b      	ldrb	r3, [r3, #6]
 800228a:	9303      	str	r3, [sp, #12]
 800228c:	9002      	str	r0, [sp, #8]
 800228e:	9101      	str	r1, [sp, #4]
 8002290:	9200      	str	r2, [sp, #0]
 8002292:	462b      	mov	r3, r5
 8002294:	4622      	mov	r2, r4
 8002296:	4924      	ldr	r1, [pc, #144]	@ (8002328 <main+0x17c>)
 8002298:	4824      	ldr	r0, [pc, #144]	@ (800232c <main+0x180>)
 800229a:	f007 fbb7 	bl	8009a0c <siprintf>
//	      }
//	      while (postDataDoAm >= 100) {
//	    	  postDataDoAm /= 10; // Chia cho 10 để loại bỏ chữ số cuối
//	      }

	  	 sprintf(content, "temperature=%.2f&humidity=%.2f&dust=%d&airperssure=%d&nodeid=%s&longitude=%.2f&latitude=%.2f",
 800229e:	4b1f      	ldr	r3, [pc, #124]	@ (800231c <main+0x170>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4618      	mov	r0, r3
 80022a4:	f7fe f950 	bl	8000548 <__aeabi_f2d>
 80022a8:	4682      	mov	sl, r0
 80022aa:	468b      	mov	fp, r1
 80022ac:	4b1c      	ldr	r3, [pc, #112]	@ (8002320 <main+0x174>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4618      	mov	r0, r3
 80022b2:	f7fe f949 	bl	8000548 <__aeabi_f2d>
 80022b6:	4604      	mov	r4, r0
 80022b8:	460d      	mov	r5, r1
 80022ba:	4b1d      	ldr	r3, [pc, #116]	@ (8002330 <main+0x184>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4618      	mov	r0, r3
 80022c0:	f7fe f942 	bl	8000548 <__aeabi_f2d>
 80022c4:	4680      	mov	r8, r0
 80022c6:	4689      	mov	r9, r1
 80022c8:	4b1a      	ldr	r3, [pc, #104]	@ (8002334 <main+0x188>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4618      	mov	r0, r3
 80022ce:	f7fe f93b 	bl	8000548 <__aeabi_f2d>
 80022d2:	4602      	mov	r2, r0
 80022d4:	460b      	mov	r3, r1
 80022d6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80022da:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80022de:	4b16      	ldr	r3, [pc, #88]	@ (8002338 <main+0x18c>)
 80022e0:	9304      	str	r3, [sp, #16]
 80022e2:	230b      	movs	r3, #11
 80022e4:	9303      	str	r3, [sp, #12]
 80022e6:	230b      	movs	r3, #11
 80022e8:	9302      	str	r3, [sp, #8]
 80022ea:	e9cd 4500 	strd	r4, r5, [sp]
 80022ee:	4652      	mov	r2, sl
 80022f0:	465b      	mov	r3, fp
 80022f2:	4912      	ldr	r1, [pc, #72]	@ (800233c <main+0x190>)
 80022f4:	4812      	ldr	r0, [pc, #72]	@ (8002340 <main+0x194>)
 80022f6:	f007 fb89 	bl	8009a0c <siprintf>
	  			temperature, humidity, 11, 11, nodeid, Longitude, Latitude);

	  httpPost();
 80022fa:	f7ff fd59 	bl	8001db0 <httpPost>
	  RunMainProgram();
 80022fe:	e791      	b.n	8002224 <main+0x78>
 8002300:	200003e8 	.word	0x200003e8
 8002304:	2000043c 	.word	0x2000043c
 8002308:	0800dce0 	.word	0x0800dce0
 800230c:	20000514 	.word	0x20000514
 8002310:	20000388 	.word	0x20000388
 8002314:	0800dcec 	.word	0x0800dcec
 8002318:	0800dd08 	.word	0x0800dd08
 800231c:	200005a4 	.word	0x200005a4
 8002320:	200005a8 	.word	0x200005a8
 8002324:	20000738 	.word	0x20000738
 8002328:	0800dd20 	.word	0x0800dd20
 800232c:	20000740 	.word	0x20000740
 8002330:	20000730 	.word	0x20000730
 8002334:	2000072c 	.word	0x2000072c
 8002338:	20000064 	.word	0x20000064
 800233c:	0800dd40 	.word	0x0800dd40
 8002340:	200005ac 	.word	0x200005ac

08002344 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b094      	sub	sp, #80	@ 0x50
 8002348:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800234a:	f107 0320 	add.w	r3, r7, #32
 800234e:	2230      	movs	r2, #48	@ 0x30
 8002350:	2100      	movs	r1, #0
 8002352:	4618      	mov	r0, r3
 8002354:	f007 fc7e 	bl	8009c54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002358:	f107 030c 	add.w	r3, r7, #12
 800235c:	2200      	movs	r2, #0
 800235e:	601a      	str	r2, [r3, #0]
 8002360:	605a      	str	r2, [r3, #4]
 8002362:	609a      	str	r2, [r3, #8]
 8002364:	60da      	str	r2, [r3, #12]
 8002366:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002368:	2300      	movs	r3, #0
 800236a:	60bb      	str	r3, [r7, #8]
 800236c:	4b28      	ldr	r3, [pc, #160]	@ (8002410 <SystemClock_Config+0xcc>)
 800236e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002370:	4a27      	ldr	r2, [pc, #156]	@ (8002410 <SystemClock_Config+0xcc>)
 8002372:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002376:	6413      	str	r3, [r2, #64]	@ 0x40
 8002378:	4b25      	ldr	r3, [pc, #148]	@ (8002410 <SystemClock_Config+0xcc>)
 800237a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800237c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002380:	60bb      	str	r3, [r7, #8]
 8002382:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002384:	2300      	movs	r3, #0
 8002386:	607b      	str	r3, [r7, #4]
 8002388:	4b22      	ldr	r3, [pc, #136]	@ (8002414 <SystemClock_Config+0xd0>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a21      	ldr	r2, [pc, #132]	@ (8002414 <SystemClock_Config+0xd0>)
 800238e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002392:	6013      	str	r3, [r2, #0]
 8002394:	4b1f      	ldr	r3, [pc, #124]	@ (8002414 <SystemClock_Config+0xd0>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800239c:	607b      	str	r3, [r7, #4]
 800239e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80023a0:	2302      	movs	r3, #2
 80023a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80023a4:	2301      	movs	r3, #1
 80023a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80023a8:	2310      	movs	r3, #16
 80023aa:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80023ac:	2302      	movs	r3, #2
 80023ae:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80023b0:	2300      	movs	r3, #0
 80023b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80023b4:	2308      	movs	r3, #8
 80023b6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80023b8:	23a8      	movs	r3, #168	@ 0xa8
 80023ba:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80023bc:	2302      	movs	r3, #2
 80023be:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80023c0:	2304      	movs	r3, #4
 80023c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80023c4:	f107 0320 	add.w	r3, r7, #32
 80023c8:	4618      	mov	r0, r3
 80023ca:	f004 f8cf 	bl	800656c <HAL_RCC_OscConfig>
 80023ce:	4603      	mov	r3, r0
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d001      	beq.n	80023d8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80023d4:	f000 f9c6 	bl	8002764 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80023d8:	230f      	movs	r3, #15
 80023da:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80023dc:	2302      	movs	r3, #2
 80023de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80023e0:	2300      	movs	r3, #0
 80023e2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80023e4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80023e8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80023ea:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80023ee:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80023f0:	f107 030c 	add.w	r3, r7, #12
 80023f4:	2105      	movs	r1, #5
 80023f6:	4618      	mov	r0, r3
 80023f8:	f004 fb30 	bl	8006a5c <HAL_RCC_ClockConfig>
 80023fc:	4603      	mov	r3, r0
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d001      	beq.n	8002406 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002402:	f000 f9af 	bl	8002764 <Error_Handler>
  }
}
 8002406:	bf00      	nop
 8002408:	3750      	adds	r7, #80	@ 0x50
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}
 800240e:	bf00      	nop
 8002410:	40023800 	.word	0x40023800
 8002414:	40007000 	.word	0x40007000

08002418 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800241c:	4b12      	ldr	r3, [pc, #72]	@ (8002468 <MX_I2C1_Init+0x50>)
 800241e:	4a13      	ldr	r2, [pc, #76]	@ (800246c <MX_I2C1_Init+0x54>)
 8002420:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002422:	4b11      	ldr	r3, [pc, #68]	@ (8002468 <MX_I2C1_Init+0x50>)
 8002424:	4a12      	ldr	r2, [pc, #72]	@ (8002470 <MX_I2C1_Init+0x58>)
 8002426:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002428:	4b0f      	ldr	r3, [pc, #60]	@ (8002468 <MX_I2C1_Init+0x50>)
 800242a:	2200      	movs	r2, #0
 800242c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800242e:	4b0e      	ldr	r3, [pc, #56]	@ (8002468 <MX_I2C1_Init+0x50>)
 8002430:	2200      	movs	r2, #0
 8002432:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002434:	4b0c      	ldr	r3, [pc, #48]	@ (8002468 <MX_I2C1_Init+0x50>)
 8002436:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800243a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800243c:	4b0a      	ldr	r3, [pc, #40]	@ (8002468 <MX_I2C1_Init+0x50>)
 800243e:	2200      	movs	r2, #0
 8002440:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002442:	4b09      	ldr	r3, [pc, #36]	@ (8002468 <MX_I2C1_Init+0x50>)
 8002444:	2200      	movs	r2, #0
 8002446:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002448:	4b07      	ldr	r3, [pc, #28]	@ (8002468 <MX_I2C1_Init+0x50>)
 800244a:	2200      	movs	r2, #0
 800244c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800244e:	4b06      	ldr	r3, [pc, #24]	@ (8002468 <MX_I2C1_Init+0x50>)
 8002450:	2200      	movs	r2, #0
 8002452:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002454:	4804      	ldr	r0, [pc, #16]	@ (8002468 <MX_I2C1_Init+0x50>)
 8002456:	f001 f88b 	bl	8003570 <HAL_I2C_Init>
 800245a:	4603      	mov	r3, r0
 800245c:	2b00      	cmp	r3, #0
 800245e:	d001      	beq.n	8002464 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002460:	f000 f980 	bl	8002764 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002464:	bf00      	nop
 8002466:	bd80      	pop	{r7, pc}
 8002468:	200003e8 	.word	0x200003e8
 800246c:	40005400 	.word	0x40005400
 8002470:	000186a0 	.word	0x000186a0

08002474 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b086      	sub	sp, #24
 8002478:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800247a:	f107 0308 	add.w	r3, r7, #8
 800247e:	2200      	movs	r2, #0
 8002480:	601a      	str	r2, [r3, #0]
 8002482:	605a      	str	r2, [r3, #4]
 8002484:	609a      	str	r2, [r3, #8]
 8002486:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002488:	463b      	mov	r3, r7
 800248a:	2200      	movs	r2, #0
 800248c:	601a      	str	r2, [r3, #0]
 800248e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002490:	4b1e      	ldr	r3, [pc, #120]	@ (800250c <MX_TIM2_Init+0x98>)
 8002492:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002496:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16799;
 8002498:	4b1c      	ldr	r3, [pc, #112]	@ (800250c <MX_TIM2_Init+0x98>)
 800249a:	f244 129f 	movw	r2, #16799	@ 0x419f
 800249e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024a0:	4b1a      	ldr	r3, [pc, #104]	@ (800250c <MX_TIM2_Init+0x98>)
 80024a2:	2200      	movs	r2, #0
 80024a4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 30000;
 80024a6:	4b19      	ldr	r3, [pc, #100]	@ (800250c <MX_TIM2_Init+0x98>)
 80024a8:	f247 5230 	movw	r2, #30000	@ 0x7530
 80024ac:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024ae:	4b17      	ldr	r3, [pc, #92]	@ (800250c <MX_TIM2_Init+0x98>)
 80024b0:	2200      	movs	r2, #0
 80024b2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024b4:	4b15      	ldr	r3, [pc, #84]	@ (800250c <MX_TIM2_Init+0x98>)
 80024b6:	2200      	movs	r2, #0
 80024b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80024ba:	4814      	ldr	r0, [pc, #80]	@ (800250c <MX_TIM2_Init+0x98>)
 80024bc:	f004 fcae 	bl	8006e1c <HAL_TIM_Base_Init>
 80024c0:	4603      	mov	r3, r0
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d001      	beq.n	80024ca <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80024c6:	f000 f94d 	bl	8002764 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80024ca:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80024ce:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80024d0:	f107 0308 	add.w	r3, r7, #8
 80024d4:	4619      	mov	r1, r3
 80024d6:	480d      	ldr	r0, [pc, #52]	@ (800250c <MX_TIM2_Init+0x98>)
 80024d8:	f004 fe50 	bl	800717c <HAL_TIM_ConfigClockSource>
 80024dc:	4603      	mov	r3, r0
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d001      	beq.n	80024e6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80024e2:	f000 f93f 	bl	8002764 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024e6:	2300      	movs	r3, #0
 80024e8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024ea:	2300      	movs	r3, #0
 80024ec:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80024ee:	463b      	mov	r3, r7
 80024f0:	4619      	mov	r1, r3
 80024f2:	4806      	ldr	r0, [pc, #24]	@ (800250c <MX_TIM2_Init+0x98>)
 80024f4:	f005 f882 	bl	80075fc <HAL_TIMEx_MasterConfigSynchronization>
 80024f8:	4603      	mov	r3, r0
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d001      	beq.n	8002502 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80024fe:	f000 f931 	bl	8002764 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002502:	bf00      	nop
 8002504:	3718      	adds	r7, #24
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop
 800250c:	2000043c 	.word	0x2000043c

08002510 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002514:	4b11      	ldr	r3, [pc, #68]	@ (800255c <MX_UART4_Init+0x4c>)
 8002516:	4a12      	ldr	r2, [pc, #72]	@ (8002560 <MX_UART4_Init+0x50>)
 8002518:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800251a:	4b10      	ldr	r3, [pc, #64]	@ (800255c <MX_UART4_Init+0x4c>)
 800251c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002520:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002522:	4b0e      	ldr	r3, [pc, #56]	@ (800255c <MX_UART4_Init+0x4c>)
 8002524:	2200      	movs	r2, #0
 8002526:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002528:	4b0c      	ldr	r3, [pc, #48]	@ (800255c <MX_UART4_Init+0x4c>)
 800252a:	2200      	movs	r2, #0
 800252c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800252e:	4b0b      	ldr	r3, [pc, #44]	@ (800255c <MX_UART4_Init+0x4c>)
 8002530:	2200      	movs	r2, #0
 8002532:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002534:	4b09      	ldr	r3, [pc, #36]	@ (800255c <MX_UART4_Init+0x4c>)
 8002536:	220c      	movs	r2, #12
 8002538:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800253a:	4b08      	ldr	r3, [pc, #32]	@ (800255c <MX_UART4_Init+0x4c>)
 800253c:	2200      	movs	r2, #0
 800253e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002540:	4b06      	ldr	r3, [pc, #24]	@ (800255c <MX_UART4_Init+0x4c>)
 8002542:	2200      	movs	r2, #0
 8002544:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002546:	4805      	ldr	r0, [pc, #20]	@ (800255c <MX_UART4_Init+0x4c>)
 8002548:	f005 f8e8 	bl	800771c <HAL_UART_Init>
 800254c:	4603      	mov	r3, r0
 800254e:	2b00      	cmp	r3, #0
 8002550:	d001      	beq.n	8002556 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8002552:	f000 f907 	bl	8002764 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002556:	bf00      	nop
 8002558:	bd80      	pop	{r7, pc}
 800255a:	bf00      	nop
 800255c:	20000484 	.word	0x20000484
 8002560:	40004c00 	.word	0x40004c00

08002564 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002568:	4b11      	ldr	r3, [pc, #68]	@ (80025b0 <MX_USART2_UART_Init+0x4c>)
 800256a:	4a12      	ldr	r2, [pc, #72]	@ (80025b4 <MX_USART2_UART_Init+0x50>)
 800256c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800256e:	4b10      	ldr	r3, [pc, #64]	@ (80025b0 <MX_USART2_UART_Init+0x4c>)
 8002570:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002574:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002576:	4b0e      	ldr	r3, [pc, #56]	@ (80025b0 <MX_USART2_UART_Init+0x4c>)
 8002578:	2200      	movs	r2, #0
 800257a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800257c:	4b0c      	ldr	r3, [pc, #48]	@ (80025b0 <MX_USART2_UART_Init+0x4c>)
 800257e:	2200      	movs	r2, #0
 8002580:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002582:	4b0b      	ldr	r3, [pc, #44]	@ (80025b0 <MX_USART2_UART_Init+0x4c>)
 8002584:	2200      	movs	r2, #0
 8002586:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002588:	4b09      	ldr	r3, [pc, #36]	@ (80025b0 <MX_USART2_UART_Init+0x4c>)
 800258a:	220c      	movs	r2, #12
 800258c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800258e:	4b08      	ldr	r3, [pc, #32]	@ (80025b0 <MX_USART2_UART_Init+0x4c>)
 8002590:	2200      	movs	r2, #0
 8002592:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002594:	4b06      	ldr	r3, [pc, #24]	@ (80025b0 <MX_USART2_UART_Init+0x4c>)
 8002596:	2200      	movs	r2, #0
 8002598:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800259a:	4805      	ldr	r0, [pc, #20]	@ (80025b0 <MX_USART2_UART_Init+0x4c>)
 800259c:	f005 f8be 	bl	800771c <HAL_UART_Init>
 80025a0:	4603      	mov	r3, r0
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d001      	beq.n	80025aa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80025a6:	f000 f8dd 	bl	8002764 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80025aa:	bf00      	nop
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	bf00      	nop
 80025b0:	200004cc 	.word	0x200004cc
 80025b4:	40004400 	.word	0x40004400

080025b8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80025bc:	4b11      	ldr	r3, [pc, #68]	@ (8002604 <MX_USART3_UART_Init+0x4c>)
 80025be:	4a12      	ldr	r2, [pc, #72]	@ (8002608 <MX_USART3_UART_Init+0x50>)
 80025c0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80025c2:	4b10      	ldr	r3, [pc, #64]	@ (8002604 <MX_USART3_UART_Init+0x4c>)
 80025c4:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80025c8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80025ca:	4b0e      	ldr	r3, [pc, #56]	@ (8002604 <MX_USART3_UART_Init+0x4c>)
 80025cc:	2200      	movs	r2, #0
 80025ce:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80025d0:	4b0c      	ldr	r3, [pc, #48]	@ (8002604 <MX_USART3_UART_Init+0x4c>)
 80025d2:	2200      	movs	r2, #0
 80025d4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80025d6:	4b0b      	ldr	r3, [pc, #44]	@ (8002604 <MX_USART3_UART_Init+0x4c>)
 80025d8:	2200      	movs	r2, #0
 80025da:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80025dc:	4b09      	ldr	r3, [pc, #36]	@ (8002604 <MX_USART3_UART_Init+0x4c>)
 80025de:	220c      	movs	r2, #12
 80025e0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80025e2:	4b08      	ldr	r3, [pc, #32]	@ (8002604 <MX_USART3_UART_Init+0x4c>)
 80025e4:	2200      	movs	r2, #0
 80025e6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80025e8:	4b06      	ldr	r3, [pc, #24]	@ (8002604 <MX_USART3_UART_Init+0x4c>)
 80025ea:	2200      	movs	r2, #0
 80025ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80025ee:	4805      	ldr	r0, [pc, #20]	@ (8002604 <MX_USART3_UART_Init+0x4c>)
 80025f0:	f005 f894 	bl	800771c <HAL_UART_Init>
 80025f4:	4603      	mov	r3, r0
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d001      	beq.n	80025fe <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80025fa:	f000 f8b3 	bl	8002764 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80025fe:	bf00      	nop
 8002600:	bd80      	pop	{r7, pc}
 8002602:	bf00      	nop
 8002604:	20000514 	.word	0x20000514
 8002608:	40004800 	.word	0x40004800

0800260c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002610:	4b11      	ldr	r3, [pc, #68]	@ (8002658 <MX_USART6_UART_Init+0x4c>)
 8002612:	4a12      	ldr	r2, [pc, #72]	@ (800265c <MX_USART6_UART_Init+0x50>)
 8002614:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8002616:	4b10      	ldr	r3, [pc, #64]	@ (8002658 <MX_USART6_UART_Init+0x4c>)
 8002618:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800261c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800261e:	4b0e      	ldr	r3, [pc, #56]	@ (8002658 <MX_USART6_UART_Init+0x4c>)
 8002620:	2200      	movs	r2, #0
 8002622:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002624:	4b0c      	ldr	r3, [pc, #48]	@ (8002658 <MX_USART6_UART_Init+0x4c>)
 8002626:	2200      	movs	r2, #0
 8002628:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800262a:	4b0b      	ldr	r3, [pc, #44]	@ (8002658 <MX_USART6_UART_Init+0x4c>)
 800262c:	2200      	movs	r2, #0
 800262e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002630:	4b09      	ldr	r3, [pc, #36]	@ (8002658 <MX_USART6_UART_Init+0x4c>)
 8002632:	220c      	movs	r2, #12
 8002634:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002636:	4b08      	ldr	r3, [pc, #32]	@ (8002658 <MX_USART6_UART_Init+0x4c>)
 8002638:	2200      	movs	r2, #0
 800263a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800263c:	4b06      	ldr	r3, [pc, #24]	@ (8002658 <MX_USART6_UART_Init+0x4c>)
 800263e:	2200      	movs	r2, #0
 8002640:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002642:	4805      	ldr	r0, [pc, #20]	@ (8002658 <MX_USART6_UART_Init+0x4c>)
 8002644:	f005 f86a 	bl	800771c <HAL_UART_Init>
 8002648:	4603      	mov	r3, r0
 800264a:	2b00      	cmp	r3, #0
 800264c:	d001      	beq.n	8002652 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800264e:	f000 f889 	bl	8002764 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002652:	bf00      	nop
 8002654:	bd80      	pop	{r7, pc}
 8002656:	bf00      	nop
 8002658:	2000055c 	.word	0x2000055c
 800265c:	40011400 	.word	0x40011400

08002660 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b08a      	sub	sp, #40	@ 0x28
 8002664:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002666:	f107 0314 	add.w	r3, r7, #20
 800266a:	2200      	movs	r2, #0
 800266c:	601a      	str	r2, [r3, #0]
 800266e:	605a      	str	r2, [r3, #4]
 8002670:	609a      	str	r2, [r3, #8]
 8002672:	60da      	str	r2, [r3, #12]
 8002674:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002676:	2300      	movs	r3, #0
 8002678:	613b      	str	r3, [r7, #16]
 800267a:	4b37      	ldr	r3, [pc, #220]	@ (8002758 <MX_GPIO_Init+0xf8>)
 800267c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800267e:	4a36      	ldr	r2, [pc, #216]	@ (8002758 <MX_GPIO_Init+0xf8>)
 8002680:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002684:	6313      	str	r3, [r2, #48]	@ 0x30
 8002686:	4b34      	ldr	r3, [pc, #208]	@ (8002758 <MX_GPIO_Init+0xf8>)
 8002688:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800268a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800268e:	613b      	str	r3, [r7, #16]
 8002690:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002692:	2300      	movs	r3, #0
 8002694:	60fb      	str	r3, [r7, #12]
 8002696:	4b30      	ldr	r3, [pc, #192]	@ (8002758 <MX_GPIO_Init+0xf8>)
 8002698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800269a:	4a2f      	ldr	r2, [pc, #188]	@ (8002758 <MX_GPIO_Init+0xf8>)
 800269c:	f043 0301 	orr.w	r3, r3, #1
 80026a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80026a2:	4b2d      	ldr	r3, [pc, #180]	@ (8002758 <MX_GPIO_Init+0xf8>)
 80026a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026a6:	f003 0301 	and.w	r3, r3, #1
 80026aa:	60fb      	str	r3, [r7, #12]
 80026ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80026ae:	2300      	movs	r3, #0
 80026b0:	60bb      	str	r3, [r7, #8]
 80026b2:	4b29      	ldr	r3, [pc, #164]	@ (8002758 <MX_GPIO_Init+0xf8>)
 80026b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026b6:	4a28      	ldr	r2, [pc, #160]	@ (8002758 <MX_GPIO_Init+0xf8>)
 80026b8:	f043 0302 	orr.w	r3, r3, #2
 80026bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80026be:	4b26      	ldr	r3, [pc, #152]	@ (8002758 <MX_GPIO_Init+0xf8>)
 80026c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026c2:	f003 0302 	and.w	r3, r3, #2
 80026c6:	60bb      	str	r3, [r7, #8]
 80026c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80026ca:	2300      	movs	r3, #0
 80026cc:	607b      	str	r3, [r7, #4]
 80026ce:	4b22      	ldr	r3, [pc, #136]	@ (8002758 <MX_GPIO_Init+0xf8>)
 80026d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026d2:	4a21      	ldr	r2, [pc, #132]	@ (8002758 <MX_GPIO_Init+0xf8>)
 80026d4:	f043 0304 	orr.w	r3, r3, #4
 80026d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80026da:	4b1f      	ldr	r3, [pc, #124]	@ (8002758 <MX_GPIO_Init+0xf8>)
 80026dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026de:	f003 0304 	and.w	r3, r3, #4
 80026e2:	607b      	str	r3, [r7, #4]
 80026e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80026e6:	2300      	movs	r3, #0
 80026e8:	603b      	str	r3, [r7, #0]
 80026ea:	4b1b      	ldr	r3, [pc, #108]	@ (8002758 <MX_GPIO_Init+0xf8>)
 80026ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ee:	4a1a      	ldr	r2, [pc, #104]	@ (8002758 <MX_GPIO_Init+0xf8>)
 80026f0:	f043 0308 	orr.w	r3, r3, #8
 80026f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80026f6:	4b18      	ldr	r3, [pc, #96]	@ (8002758 <MX_GPIO_Init+0xf8>)
 80026f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026fa:	f003 0308 	and.w	r3, r3, #8
 80026fe:	603b      	str	r3, [r7, #0]
 8002700:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8002702:	2200      	movs	r2, #0
 8002704:	2102      	movs	r1, #2
 8002706:	4815      	ldr	r0, [pc, #84]	@ (800275c <MX_GPIO_Init+0xfc>)
 8002708:	f000 ff18 	bl	800353c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_SENSOR_GPIO_Port, LED_SENSOR_Pin, GPIO_PIN_RESET);
 800270c:	2200      	movs	r2, #0
 800270e:	2110      	movs	r1, #16
 8002710:	4813      	ldr	r0, [pc, #76]	@ (8002760 <MX_GPIO_Init+0x100>)
 8002712:	f000 ff13 	bl	800353c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUZZER_Pin */
  GPIO_InitStruct.Pin = BUZZER_Pin;
 8002716:	2302      	movs	r3, #2
 8002718:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800271a:	2301      	movs	r3, #1
 800271c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800271e:	2300      	movs	r3, #0
 8002720:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002722:	2300      	movs	r3, #0
 8002724:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 8002726:	f107 0314 	add.w	r3, r7, #20
 800272a:	4619      	mov	r1, r3
 800272c:	480b      	ldr	r0, [pc, #44]	@ (800275c <MX_GPIO_Init+0xfc>)
 800272e:	f000 fd69 	bl	8003204 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_SENSOR_Pin */
  GPIO_InitStruct.Pin = LED_SENSOR_Pin;
 8002732:	2310      	movs	r3, #16
 8002734:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002736:	2301      	movs	r3, #1
 8002738:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800273a:	2300      	movs	r3, #0
 800273c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800273e:	2300      	movs	r3, #0
 8002740:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_SENSOR_GPIO_Port, &GPIO_InitStruct);
 8002742:	f107 0314 	add.w	r3, r7, #20
 8002746:	4619      	mov	r1, r3
 8002748:	4805      	ldr	r0, [pc, #20]	@ (8002760 <MX_GPIO_Init+0x100>)
 800274a:	f000 fd5b 	bl	8003204 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800274e:	bf00      	nop
 8002750:	3728      	adds	r7, #40	@ 0x28
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}
 8002756:	bf00      	nop
 8002758:	40023800 	.word	0x40023800
 800275c:	40020400 	.word	0x40020400
 8002760:	40020c00 	.word	0x40020c00

08002764 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002764:	b480      	push	{r7}
 8002766:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002768:	b672      	cpsid	i
}
 800276a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800276c:	bf00      	nop
 800276e:	e7fd      	b.n	800276c <Error_Handler+0x8>

08002770 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002770:	b480      	push	{r7}
 8002772:	b083      	sub	sp, #12
 8002774:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002776:	2300      	movs	r3, #0
 8002778:	607b      	str	r3, [r7, #4]
 800277a:	4b10      	ldr	r3, [pc, #64]	@ (80027bc <HAL_MspInit+0x4c>)
 800277c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800277e:	4a0f      	ldr	r2, [pc, #60]	@ (80027bc <HAL_MspInit+0x4c>)
 8002780:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002784:	6453      	str	r3, [r2, #68]	@ 0x44
 8002786:	4b0d      	ldr	r3, [pc, #52]	@ (80027bc <HAL_MspInit+0x4c>)
 8002788:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800278a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800278e:	607b      	str	r3, [r7, #4]
 8002790:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002792:	2300      	movs	r3, #0
 8002794:	603b      	str	r3, [r7, #0]
 8002796:	4b09      	ldr	r3, [pc, #36]	@ (80027bc <HAL_MspInit+0x4c>)
 8002798:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800279a:	4a08      	ldr	r2, [pc, #32]	@ (80027bc <HAL_MspInit+0x4c>)
 800279c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80027a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80027a2:	4b06      	ldr	r3, [pc, #24]	@ (80027bc <HAL_MspInit+0x4c>)
 80027a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027aa:	603b      	str	r3, [r7, #0]
 80027ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80027ae:	bf00      	nop
 80027b0:	370c      	adds	r7, #12
 80027b2:	46bd      	mov	sp, r7
 80027b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b8:	4770      	bx	lr
 80027ba:	bf00      	nop
 80027bc:	40023800 	.word	0x40023800

080027c0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b08a      	sub	sp, #40	@ 0x28
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027c8:	f107 0314 	add.w	r3, r7, #20
 80027cc:	2200      	movs	r2, #0
 80027ce:	601a      	str	r2, [r3, #0]
 80027d0:	605a      	str	r2, [r3, #4]
 80027d2:	609a      	str	r2, [r3, #8]
 80027d4:	60da      	str	r2, [r3, #12]
 80027d6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a21      	ldr	r2, [pc, #132]	@ (8002864 <HAL_I2C_MspInit+0xa4>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d13b      	bne.n	800285a <HAL_I2C_MspInit+0x9a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027e2:	2300      	movs	r3, #0
 80027e4:	613b      	str	r3, [r7, #16]
 80027e6:	4b20      	ldr	r3, [pc, #128]	@ (8002868 <HAL_I2C_MspInit+0xa8>)
 80027e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027ea:	4a1f      	ldr	r2, [pc, #124]	@ (8002868 <HAL_I2C_MspInit+0xa8>)
 80027ec:	f043 0302 	orr.w	r3, r3, #2
 80027f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80027f2:	4b1d      	ldr	r3, [pc, #116]	@ (8002868 <HAL_I2C_MspInit+0xa8>)
 80027f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027f6:	f003 0302 	and.w	r3, r3, #2
 80027fa:	613b      	str	r3, [r7, #16]
 80027fc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80027fe:	23c0      	movs	r3, #192	@ 0xc0
 8002800:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002802:	2312      	movs	r3, #18
 8002804:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002806:	2301      	movs	r3, #1
 8002808:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800280a:	2303      	movs	r3, #3
 800280c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800280e:	2304      	movs	r3, #4
 8002810:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002812:	f107 0314 	add.w	r3, r7, #20
 8002816:	4619      	mov	r1, r3
 8002818:	4814      	ldr	r0, [pc, #80]	@ (800286c <HAL_I2C_MspInit+0xac>)
 800281a:	f000 fcf3 	bl	8003204 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800281e:	2300      	movs	r3, #0
 8002820:	60fb      	str	r3, [r7, #12]
 8002822:	4b11      	ldr	r3, [pc, #68]	@ (8002868 <HAL_I2C_MspInit+0xa8>)
 8002824:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002826:	4a10      	ldr	r2, [pc, #64]	@ (8002868 <HAL_I2C_MspInit+0xa8>)
 8002828:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800282c:	6413      	str	r3, [r2, #64]	@ 0x40
 800282e:	4b0e      	ldr	r3, [pc, #56]	@ (8002868 <HAL_I2C_MspInit+0xa8>)
 8002830:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002832:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002836:	60fb      	str	r3, [r7, #12]
 8002838:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800283a:	2200      	movs	r2, #0
 800283c:	2100      	movs	r1, #0
 800283e:	201f      	movs	r0, #31
 8002840:	f000 fc09 	bl	8003056 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8002844:	201f      	movs	r0, #31
 8002846:	f000 fc22 	bl	800308e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800284a:	2200      	movs	r2, #0
 800284c:	2100      	movs	r1, #0
 800284e:	2020      	movs	r0, #32
 8002850:	f000 fc01 	bl	8003056 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8002854:	2020      	movs	r0, #32
 8002856:	f000 fc1a 	bl	800308e <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800285a:	bf00      	nop
 800285c:	3728      	adds	r7, #40	@ 0x28
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}
 8002862:	bf00      	nop
 8002864:	40005400 	.word	0x40005400
 8002868:	40023800 	.word	0x40023800
 800286c:	40020400 	.word	0x40020400

08002870 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b084      	sub	sp, #16
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002880:	d115      	bne.n	80028ae <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002882:	2300      	movs	r3, #0
 8002884:	60fb      	str	r3, [r7, #12]
 8002886:	4b0c      	ldr	r3, [pc, #48]	@ (80028b8 <HAL_TIM_Base_MspInit+0x48>)
 8002888:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800288a:	4a0b      	ldr	r2, [pc, #44]	@ (80028b8 <HAL_TIM_Base_MspInit+0x48>)
 800288c:	f043 0301 	orr.w	r3, r3, #1
 8002890:	6413      	str	r3, [r2, #64]	@ 0x40
 8002892:	4b09      	ldr	r3, [pc, #36]	@ (80028b8 <HAL_TIM_Base_MspInit+0x48>)
 8002894:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002896:	f003 0301 	and.w	r3, r3, #1
 800289a:	60fb      	str	r3, [r7, #12]
 800289c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800289e:	2200      	movs	r2, #0
 80028a0:	2100      	movs	r1, #0
 80028a2:	201c      	movs	r0, #28
 80028a4:	f000 fbd7 	bl	8003056 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80028a8:	201c      	movs	r0, #28
 80028aa:	f000 fbf0 	bl	800308e <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 80028ae:	bf00      	nop
 80028b0:	3710      	adds	r7, #16
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}
 80028b6:	bf00      	nop
 80028b8:	40023800 	.word	0x40023800

080028bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b090      	sub	sp, #64	@ 0x40
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028c4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80028c8:	2200      	movs	r2, #0
 80028ca:	601a      	str	r2, [r3, #0]
 80028cc:	605a      	str	r2, [r3, #4]
 80028ce:	609a      	str	r2, [r3, #8]
 80028d0:	60da      	str	r2, [r3, #12]
 80028d2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a6c      	ldr	r2, [pc, #432]	@ (8002a8c <HAL_UART_MspInit+0x1d0>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d134      	bne.n	8002948 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80028de:	2300      	movs	r3, #0
 80028e0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80028e2:	4b6b      	ldr	r3, [pc, #428]	@ (8002a90 <HAL_UART_MspInit+0x1d4>)
 80028e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028e6:	4a6a      	ldr	r2, [pc, #424]	@ (8002a90 <HAL_UART_MspInit+0x1d4>)
 80028e8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80028ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80028ee:	4b68      	ldr	r3, [pc, #416]	@ (8002a90 <HAL_UART_MspInit+0x1d4>)
 80028f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028f2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80028f6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80028f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028fa:	2300      	movs	r3, #0
 80028fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80028fe:	4b64      	ldr	r3, [pc, #400]	@ (8002a90 <HAL_UART_MspInit+0x1d4>)
 8002900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002902:	4a63      	ldr	r2, [pc, #396]	@ (8002a90 <HAL_UART_MspInit+0x1d4>)
 8002904:	f043 0301 	orr.w	r3, r3, #1
 8002908:	6313      	str	r3, [r2, #48]	@ 0x30
 800290a:	4b61      	ldr	r3, [pc, #388]	@ (8002a90 <HAL_UART_MspInit+0x1d4>)
 800290c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800290e:	f003 0301 	and.w	r3, r3, #1
 8002912:	627b      	str	r3, [r7, #36]	@ 0x24
 8002914:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002916:	2303      	movs	r3, #3
 8002918:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800291a:	2302      	movs	r3, #2
 800291c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800291e:	2300      	movs	r3, #0
 8002920:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002922:	2303      	movs	r3, #3
 8002924:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002926:	2308      	movs	r3, #8
 8002928:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800292a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800292e:	4619      	mov	r1, r3
 8002930:	4858      	ldr	r0, [pc, #352]	@ (8002a94 <HAL_UART_MspInit+0x1d8>)
 8002932:	f000 fc67 	bl	8003204 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8002936:	2200      	movs	r2, #0
 8002938:	2100      	movs	r1, #0
 800293a:	2034      	movs	r0, #52	@ 0x34
 800293c:	f000 fb8b 	bl	8003056 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8002940:	2034      	movs	r0, #52	@ 0x34
 8002942:	f000 fba4 	bl	800308e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002946:	e09d      	b.n	8002a84 <HAL_UART_MspInit+0x1c8>
  else if(huart->Instance==USART2)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a52      	ldr	r2, [pc, #328]	@ (8002a98 <HAL_UART_MspInit+0x1dc>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d12c      	bne.n	80029ac <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002952:	2300      	movs	r3, #0
 8002954:	623b      	str	r3, [r7, #32]
 8002956:	4b4e      	ldr	r3, [pc, #312]	@ (8002a90 <HAL_UART_MspInit+0x1d4>)
 8002958:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800295a:	4a4d      	ldr	r2, [pc, #308]	@ (8002a90 <HAL_UART_MspInit+0x1d4>)
 800295c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002960:	6413      	str	r3, [r2, #64]	@ 0x40
 8002962:	4b4b      	ldr	r3, [pc, #300]	@ (8002a90 <HAL_UART_MspInit+0x1d4>)
 8002964:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002966:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800296a:	623b      	str	r3, [r7, #32]
 800296c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800296e:	2300      	movs	r3, #0
 8002970:	61fb      	str	r3, [r7, #28]
 8002972:	4b47      	ldr	r3, [pc, #284]	@ (8002a90 <HAL_UART_MspInit+0x1d4>)
 8002974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002976:	4a46      	ldr	r2, [pc, #280]	@ (8002a90 <HAL_UART_MspInit+0x1d4>)
 8002978:	f043 0301 	orr.w	r3, r3, #1
 800297c:	6313      	str	r3, [r2, #48]	@ 0x30
 800297e:	4b44      	ldr	r3, [pc, #272]	@ (8002a90 <HAL_UART_MspInit+0x1d4>)
 8002980:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002982:	f003 0301 	and.w	r3, r3, #1
 8002986:	61fb      	str	r3, [r7, #28]
 8002988:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800298a:	230c      	movs	r3, #12
 800298c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800298e:	2302      	movs	r3, #2
 8002990:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002992:	2300      	movs	r3, #0
 8002994:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002996:	2303      	movs	r3, #3
 8002998:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800299a:	2307      	movs	r3, #7
 800299c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800299e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80029a2:	4619      	mov	r1, r3
 80029a4:	483b      	ldr	r0, [pc, #236]	@ (8002a94 <HAL_UART_MspInit+0x1d8>)
 80029a6:	f000 fc2d 	bl	8003204 <HAL_GPIO_Init>
}
 80029aa:	e06b      	b.n	8002a84 <HAL_UART_MspInit+0x1c8>
  else if(huart->Instance==USART3)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a3a      	ldr	r2, [pc, #232]	@ (8002a9c <HAL_UART_MspInit+0x1e0>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d135      	bne.n	8002a22 <HAL_UART_MspInit+0x166>
    __HAL_RCC_USART3_CLK_ENABLE();
 80029b6:	2300      	movs	r3, #0
 80029b8:	61bb      	str	r3, [r7, #24]
 80029ba:	4b35      	ldr	r3, [pc, #212]	@ (8002a90 <HAL_UART_MspInit+0x1d4>)
 80029bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029be:	4a34      	ldr	r2, [pc, #208]	@ (8002a90 <HAL_UART_MspInit+0x1d4>)
 80029c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80029c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80029c6:	4b32      	ldr	r3, [pc, #200]	@ (8002a90 <HAL_UART_MspInit+0x1d4>)
 80029c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ca:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80029ce:	61bb      	str	r3, [r7, #24]
 80029d0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029d2:	2300      	movs	r3, #0
 80029d4:	617b      	str	r3, [r7, #20]
 80029d6:	4b2e      	ldr	r3, [pc, #184]	@ (8002a90 <HAL_UART_MspInit+0x1d4>)
 80029d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029da:	4a2d      	ldr	r2, [pc, #180]	@ (8002a90 <HAL_UART_MspInit+0x1d4>)
 80029dc:	f043 0302 	orr.w	r3, r3, #2
 80029e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80029e2:	4b2b      	ldr	r3, [pc, #172]	@ (8002a90 <HAL_UART_MspInit+0x1d4>)
 80029e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029e6:	f003 0302 	and.w	r3, r3, #2
 80029ea:	617b      	str	r3, [r7, #20]
 80029ec:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80029ee:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80029f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029f4:	2302      	movs	r3, #2
 80029f6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029f8:	2300      	movs	r3, #0
 80029fa:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029fc:	2303      	movs	r3, #3
 80029fe:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002a00:	2307      	movs	r3, #7
 8002a02:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a04:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002a08:	4619      	mov	r1, r3
 8002a0a:	4825      	ldr	r0, [pc, #148]	@ (8002aa0 <HAL_UART_MspInit+0x1e4>)
 8002a0c:	f000 fbfa 	bl	8003204 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002a10:	2200      	movs	r2, #0
 8002a12:	2100      	movs	r1, #0
 8002a14:	2027      	movs	r0, #39	@ 0x27
 8002a16:	f000 fb1e 	bl	8003056 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002a1a:	2027      	movs	r0, #39	@ 0x27
 8002a1c:	f000 fb37 	bl	800308e <HAL_NVIC_EnableIRQ>
}
 8002a20:	e030      	b.n	8002a84 <HAL_UART_MspInit+0x1c8>
  else if(huart->Instance==USART6)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a1f      	ldr	r2, [pc, #124]	@ (8002aa4 <HAL_UART_MspInit+0x1e8>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d12b      	bne.n	8002a84 <HAL_UART_MspInit+0x1c8>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	613b      	str	r3, [r7, #16]
 8002a30:	4b17      	ldr	r3, [pc, #92]	@ (8002a90 <HAL_UART_MspInit+0x1d4>)
 8002a32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a34:	4a16      	ldr	r2, [pc, #88]	@ (8002a90 <HAL_UART_MspInit+0x1d4>)
 8002a36:	f043 0320 	orr.w	r3, r3, #32
 8002a3a:	6453      	str	r3, [r2, #68]	@ 0x44
 8002a3c:	4b14      	ldr	r3, [pc, #80]	@ (8002a90 <HAL_UART_MspInit+0x1d4>)
 8002a3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a40:	f003 0320 	and.w	r3, r3, #32
 8002a44:	613b      	str	r3, [r7, #16]
 8002a46:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a48:	2300      	movs	r3, #0
 8002a4a:	60fb      	str	r3, [r7, #12]
 8002a4c:	4b10      	ldr	r3, [pc, #64]	@ (8002a90 <HAL_UART_MspInit+0x1d4>)
 8002a4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a50:	4a0f      	ldr	r2, [pc, #60]	@ (8002a90 <HAL_UART_MspInit+0x1d4>)
 8002a52:	f043 0304 	orr.w	r3, r3, #4
 8002a56:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a58:	4b0d      	ldr	r3, [pc, #52]	@ (8002a90 <HAL_UART_MspInit+0x1d4>)
 8002a5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a5c:	f003 0304 	and.w	r3, r3, #4
 8002a60:	60fb      	str	r3, [r7, #12]
 8002a62:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002a64:	23c0      	movs	r3, #192	@ 0xc0
 8002a66:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a68:	2302      	movs	r3, #2
 8002a6a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a70:	2303      	movs	r3, #3
 8002a72:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002a74:	2308      	movs	r3, #8
 8002a76:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a78:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002a7c:	4619      	mov	r1, r3
 8002a7e:	480a      	ldr	r0, [pc, #40]	@ (8002aa8 <HAL_UART_MspInit+0x1ec>)
 8002a80:	f000 fbc0 	bl	8003204 <HAL_GPIO_Init>
}
 8002a84:	bf00      	nop
 8002a86:	3740      	adds	r7, #64	@ 0x40
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd80      	pop	{r7, pc}
 8002a8c:	40004c00 	.word	0x40004c00
 8002a90:	40023800 	.word	0x40023800
 8002a94:	40020000 	.word	0x40020000
 8002a98:	40004400 	.word	0x40004400
 8002a9c:	40004800 	.word	0x40004800
 8002aa0:	40020400 	.word	0x40020400
 8002aa4:	40011400 	.word	0x40011400
 8002aa8:	40020800 	.word	0x40020800

08002aac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002aac:	b480      	push	{r7}
 8002aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002ab0:	bf00      	nop
 8002ab2:	e7fd      	b.n	8002ab0 <NMI_Handler+0x4>

08002ab4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ab8:	bf00      	nop
 8002aba:	e7fd      	b.n	8002ab8 <HardFault_Handler+0x4>

08002abc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002abc:	b480      	push	{r7}
 8002abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ac0:	bf00      	nop
 8002ac2:	e7fd      	b.n	8002ac0 <MemManage_Handler+0x4>

08002ac4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ac8:	bf00      	nop
 8002aca:	e7fd      	b.n	8002ac8 <BusFault_Handler+0x4>

08002acc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002acc:	b480      	push	{r7}
 8002ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ad0:	bf00      	nop
 8002ad2:	e7fd      	b.n	8002ad0 <UsageFault_Handler+0x4>

08002ad4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002ad8:	bf00      	nop
 8002ada:	46bd      	mov	sp, r7
 8002adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae0:	4770      	bx	lr

08002ae2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ae2:	b480      	push	{r7}
 8002ae4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ae6:	bf00      	nop
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aee:	4770      	bx	lr

08002af0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002af0:	b480      	push	{r7}
 8002af2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002af4:	bf00      	nop
 8002af6:	46bd      	mov	sp, r7
 8002af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afc:	4770      	bx	lr

08002afe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002afe:	b580      	push	{r7, lr}
 8002b00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b02:	f000 f989 	bl	8002e18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b06:	bf00      	nop
 8002b08:	bd80      	pop	{r7, pc}
	...

08002b0c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002b10:	4802      	ldr	r0, [pc, #8]	@ (8002b1c <TIM2_IRQHandler+0x10>)
 8002b12:	f004 fa43 	bl	8006f9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002b16:	bf00      	nop
 8002b18:	bd80      	pop	{r7, pc}
 8002b1a:	bf00      	nop
 8002b1c:	2000043c 	.word	0x2000043c

08002b20 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002b24:	4802      	ldr	r0, [pc, #8]	@ (8002b30 <I2C1_EV_IRQHandler+0x10>)
 8002b26:	f001 fbdf 	bl	80042e8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002b2a:	bf00      	nop
 8002b2c:	bd80      	pop	{r7, pc}
 8002b2e:	bf00      	nop
 8002b30:	200003e8 	.word	0x200003e8

08002b34 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8002b38:	4802      	ldr	r0, [pc, #8]	@ (8002b44 <I2C1_ER_IRQHandler+0x10>)
 8002b3a:	f001 fd28 	bl	800458e <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8002b3e:	bf00      	nop
 8002b40:	bd80      	pop	{r7, pc}
 8002b42:	bf00      	nop
 8002b44:	200003e8 	.word	0x200003e8

08002b48 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002b4c:	4802      	ldr	r0, [pc, #8]	@ (8002b58 <USART3_IRQHandler+0x10>)
 8002b4e:	f004 ffb3 	bl	8007ab8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002b52:	bf00      	nop
 8002b54:	bd80      	pop	{r7, pc}
 8002b56:	bf00      	nop
 8002b58:	20000514 	.word	0x20000514

08002b5c <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8002b60:	4802      	ldr	r0, [pc, #8]	@ (8002b6c <UART4_IRQHandler+0x10>)
 8002b62:	f004 ffa9 	bl	8007ab8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8002b66:	bf00      	nop
 8002b68:	bd80      	pop	{r7, pc}
 8002b6a:	bf00      	nop
 8002b6c:	20000484 	.word	0x20000484

08002b70 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002b70:	b480      	push	{r7}
 8002b72:	af00      	add	r7, sp, #0
  return 1;
 8002b74:	2301      	movs	r3, #1
}
 8002b76:	4618      	mov	r0, r3
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7e:	4770      	bx	lr

08002b80 <_kill>:

int _kill(int pid, int sig)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b082      	sub	sp, #8
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
 8002b88:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002b8a:	f007 f8ed 	bl	8009d68 <__errno>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	2216      	movs	r2, #22
 8002b92:	601a      	str	r2, [r3, #0]
  return -1;
 8002b94:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b98:	4618      	mov	r0, r3
 8002b9a:	3708      	adds	r7, #8
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bd80      	pop	{r7, pc}

08002ba0 <_exit>:

void _exit (int status)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b082      	sub	sp, #8
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002ba8:	f04f 31ff 	mov.w	r1, #4294967295
 8002bac:	6878      	ldr	r0, [r7, #4]
 8002bae:	f7ff ffe7 	bl	8002b80 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002bb2:	bf00      	nop
 8002bb4:	e7fd      	b.n	8002bb2 <_exit+0x12>

08002bb6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002bb6:	b580      	push	{r7, lr}
 8002bb8:	b086      	sub	sp, #24
 8002bba:	af00      	add	r7, sp, #0
 8002bbc:	60f8      	str	r0, [r7, #12]
 8002bbe:	60b9      	str	r1, [r7, #8]
 8002bc0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	617b      	str	r3, [r7, #20]
 8002bc6:	e00a      	b.n	8002bde <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002bc8:	f3af 8000 	nop.w
 8002bcc:	4601      	mov	r1, r0
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	1c5a      	adds	r2, r3, #1
 8002bd2:	60ba      	str	r2, [r7, #8]
 8002bd4:	b2ca      	uxtb	r2, r1
 8002bd6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	3301      	adds	r3, #1
 8002bdc:	617b      	str	r3, [r7, #20]
 8002bde:	697a      	ldr	r2, [r7, #20]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	429a      	cmp	r2, r3
 8002be4:	dbf0      	blt.n	8002bc8 <_read+0x12>
  }

  return len;
 8002be6:	687b      	ldr	r3, [r7, #4]
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	3718      	adds	r7, #24
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}

08002bf0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b086      	sub	sp, #24
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	60f8      	str	r0, [r7, #12]
 8002bf8:	60b9      	str	r1, [r7, #8]
 8002bfa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	617b      	str	r3, [r7, #20]
 8002c00:	e009      	b.n	8002c16 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002c02:	68bb      	ldr	r3, [r7, #8]
 8002c04:	1c5a      	adds	r2, r3, #1
 8002c06:	60ba      	str	r2, [r7, #8]
 8002c08:	781b      	ldrb	r3, [r3, #0]
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	3301      	adds	r3, #1
 8002c14:	617b      	str	r3, [r7, #20]
 8002c16:	697a      	ldr	r2, [r7, #20]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	429a      	cmp	r2, r3
 8002c1c:	dbf1      	blt.n	8002c02 <_write+0x12>
  }
  return len;
 8002c1e:	687b      	ldr	r3, [r7, #4]
}
 8002c20:	4618      	mov	r0, r3
 8002c22:	3718      	adds	r7, #24
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bd80      	pop	{r7, pc}

08002c28 <_close>:

int _close(int file)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b083      	sub	sp, #12
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002c30:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	370c      	adds	r7, #12
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3e:	4770      	bx	lr

08002c40 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002c40:	b480      	push	{r7}
 8002c42:	b083      	sub	sp, #12
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
 8002c48:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002c50:	605a      	str	r2, [r3, #4]
  return 0;
 8002c52:	2300      	movs	r3, #0
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	370c      	adds	r7, #12
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5e:	4770      	bx	lr

08002c60 <_isatty>:

int _isatty(int file)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b083      	sub	sp, #12
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002c68:	2301      	movs	r3, #1
}
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	370c      	adds	r7, #12
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c74:	4770      	bx	lr

08002c76 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002c76:	b480      	push	{r7}
 8002c78:	b085      	sub	sp, #20
 8002c7a:	af00      	add	r7, sp, #0
 8002c7c:	60f8      	str	r0, [r7, #12]
 8002c7e:	60b9      	str	r1, [r7, #8]
 8002c80:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002c82:	2300      	movs	r3, #0
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	3714      	adds	r7, #20
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8e:	4770      	bx	lr

08002c90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b086      	sub	sp, #24
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002c98:	4a14      	ldr	r2, [pc, #80]	@ (8002cec <_sbrk+0x5c>)
 8002c9a:	4b15      	ldr	r3, [pc, #84]	@ (8002cf0 <_sbrk+0x60>)
 8002c9c:	1ad3      	subs	r3, r2, r3
 8002c9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002ca4:	4b13      	ldr	r3, [pc, #76]	@ (8002cf4 <_sbrk+0x64>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d102      	bne.n	8002cb2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002cac:	4b11      	ldr	r3, [pc, #68]	@ (8002cf4 <_sbrk+0x64>)
 8002cae:	4a12      	ldr	r2, [pc, #72]	@ (8002cf8 <_sbrk+0x68>)
 8002cb0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002cb2:	4b10      	ldr	r3, [pc, #64]	@ (8002cf4 <_sbrk+0x64>)
 8002cb4:	681a      	ldr	r2, [r3, #0]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	4413      	add	r3, r2
 8002cba:	693a      	ldr	r2, [r7, #16]
 8002cbc:	429a      	cmp	r2, r3
 8002cbe:	d207      	bcs.n	8002cd0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002cc0:	f007 f852 	bl	8009d68 <__errno>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	220c      	movs	r2, #12
 8002cc8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002cca:	f04f 33ff 	mov.w	r3, #4294967295
 8002cce:	e009      	b.n	8002ce4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002cd0:	4b08      	ldr	r3, [pc, #32]	@ (8002cf4 <_sbrk+0x64>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002cd6:	4b07      	ldr	r3, [pc, #28]	@ (8002cf4 <_sbrk+0x64>)
 8002cd8:	681a      	ldr	r2, [r3, #0]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	4413      	add	r3, r2
 8002cde:	4a05      	ldr	r2, [pc, #20]	@ (8002cf4 <_sbrk+0x64>)
 8002ce0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
}
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	3718      	adds	r7, #24
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}
 8002cec:	20020000 	.word	0x20020000
 8002cf0:	00000400 	.word	0x00000400
 8002cf4:	20000760 	.word	0x20000760
 8002cf8:	200008b8 	.word	0x200008b8

08002cfc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002d00:	4b06      	ldr	r3, [pc, #24]	@ (8002d1c <SystemInit+0x20>)
 8002d02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d06:	4a05      	ldr	r2, [pc, #20]	@ (8002d1c <SystemInit+0x20>)
 8002d08:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002d0c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002d10:	bf00      	nop
 8002d12:	46bd      	mov	sp, r7
 8002d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d18:	4770      	bx	lr
 8002d1a:	bf00      	nop
 8002d1c:	e000ed00 	.word	0xe000ed00

08002d20 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002d20:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002d58 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002d24:	f7ff ffea 	bl	8002cfc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002d28:	480c      	ldr	r0, [pc, #48]	@ (8002d5c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002d2a:	490d      	ldr	r1, [pc, #52]	@ (8002d60 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002d2c:	4a0d      	ldr	r2, [pc, #52]	@ (8002d64 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002d2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d30:	e002      	b.n	8002d38 <LoopCopyDataInit>

08002d32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d36:	3304      	adds	r3, #4

08002d38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d3c:	d3f9      	bcc.n	8002d32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d3e:	4a0a      	ldr	r2, [pc, #40]	@ (8002d68 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002d40:	4c0a      	ldr	r4, [pc, #40]	@ (8002d6c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002d42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d44:	e001      	b.n	8002d4a <LoopFillZerobss>

08002d46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d48:	3204      	adds	r2, #4

08002d4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d4c:	d3fb      	bcc.n	8002d46 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002d4e:	f007 f811 	bl	8009d74 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002d52:	f7ff fa2b 	bl	80021ac <main>
  bx  lr    
 8002d56:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002d58:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002d5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d60:	2000024c 	.word	0x2000024c
  ldr r2, =_sidata
 8002d64:	0800e24c 	.word	0x0800e24c
  ldr r2, =_sbss
 8002d68:	20000250 	.word	0x20000250
  ldr r4, =_ebss
 8002d6c:	200008b4 	.word	0x200008b4

08002d70 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002d70:	e7fe      	b.n	8002d70 <ADC_IRQHandler>
	...

08002d74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002d78:	4b0e      	ldr	r3, [pc, #56]	@ (8002db4 <HAL_Init+0x40>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a0d      	ldr	r2, [pc, #52]	@ (8002db4 <HAL_Init+0x40>)
 8002d7e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002d82:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002d84:	4b0b      	ldr	r3, [pc, #44]	@ (8002db4 <HAL_Init+0x40>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a0a      	ldr	r2, [pc, #40]	@ (8002db4 <HAL_Init+0x40>)
 8002d8a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002d8e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d90:	4b08      	ldr	r3, [pc, #32]	@ (8002db4 <HAL_Init+0x40>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a07      	ldr	r2, [pc, #28]	@ (8002db4 <HAL_Init+0x40>)
 8002d96:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d9a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d9c:	2003      	movs	r0, #3
 8002d9e:	f000 f94f 	bl	8003040 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002da2:	200f      	movs	r0, #15
 8002da4:	f000 f808 	bl	8002db8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002da8:	f7ff fce2 	bl	8002770 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002dac:	2300      	movs	r3, #0
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	bd80      	pop	{r7, pc}
 8002db2:	bf00      	nop
 8002db4:	40023c00 	.word	0x40023c00

08002db8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b082      	sub	sp, #8
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002dc0:	4b12      	ldr	r3, [pc, #72]	@ (8002e0c <HAL_InitTick+0x54>)
 8002dc2:	681a      	ldr	r2, [r3, #0]
 8002dc4:	4b12      	ldr	r3, [pc, #72]	@ (8002e10 <HAL_InitTick+0x58>)
 8002dc6:	781b      	ldrb	r3, [r3, #0]
 8002dc8:	4619      	mov	r1, r3
 8002dca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002dce:	fbb3 f3f1 	udiv	r3, r3, r1
 8002dd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f000 f967 	bl	80030aa <HAL_SYSTICK_Config>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d001      	beq.n	8002de6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	e00e      	b.n	8002e04 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2b0f      	cmp	r3, #15
 8002dea:	d80a      	bhi.n	8002e02 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002dec:	2200      	movs	r2, #0
 8002dee:	6879      	ldr	r1, [r7, #4]
 8002df0:	f04f 30ff 	mov.w	r0, #4294967295
 8002df4:	f000 f92f 	bl	8003056 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002df8:	4a06      	ldr	r2, [pc, #24]	@ (8002e14 <HAL_InitTick+0x5c>)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	e000      	b.n	8002e04 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	3708      	adds	r7, #8
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd80      	pop	{r7, pc}
 8002e0c:	20000078 	.word	0x20000078
 8002e10:	20000080 	.word	0x20000080
 8002e14:	2000007c 	.word	0x2000007c

08002e18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e1c:	4b06      	ldr	r3, [pc, #24]	@ (8002e38 <HAL_IncTick+0x20>)
 8002e1e:	781b      	ldrb	r3, [r3, #0]
 8002e20:	461a      	mov	r2, r3
 8002e22:	4b06      	ldr	r3, [pc, #24]	@ (8002e3c <HAL_IncTick+0x24>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4413      	add	r3, r2
 8002e28:	4a04      	ldr	r2, [pc, #16]	@ (8002e3c <HAL_IncTick+0x24>)
 8002e2a:	6013      	str	r3, [r2, #0]
}
 8002e2c:	bf00      	nop
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e34:	4770      	bx	lr
 8002e36:	bf00      	nop
 8002e38:	20000080 	.word	0x20000080
 8002e3c:	20000764 	.word	0x20000764

08002e40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e40:	b480      	push	{r7}
 8002e42:	af00      	add	r7, sp, #0
  return uwTick;
 8002e44:	4b03      	ldr	r3, [pc, #12]	@ (8002e54 <HAL_GetTick+0x14>)
 8002e46:	681b      	ldr	r3, [r3, #0]
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e50:	4770      	bx	lr
 8002e52:	bf00      	nop
 8002e54:	20000764 	.word	0x20000764

08002e58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b084      	sub	sp, #16
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e60:	f7ff ffee 	bl	8002e40 <HAL_GetTick>
 8002e64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e70:	d005      	beq.n	8002e7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002e72:	4b0a      	ldr	r3, [pc, #40]	@ (8002e9c <HAL_Delay+0x44>)
 8002e74:	781b      	ldrb	r3, [r3, #0]
 8002e76:	461a      	mov	r2, r3
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	4413      	add	r3, r2
 8002e7c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002e7e:	bf00      	nop
 8002e80:	f7ff ffde 	bl	8002e40 <HAL_GetTick>
 8002e84:	4602      	mov	r2, r0
 8002e86:	68bb      	ldr	r3, [r7, #8]
 8002e88:	1ad3      	subs	r3, r2, r3
 8002e8a:	68fa      	ldr	r2, [r7, #12]
 8002e8c:	429a      	cmp	r2, r3
 8002e8e:	d8f7      	bhi.n	8002e80 <HAL_Delay+0x28>
  {
  }
}
 8002e90:	bf00      	nop
 8002e92:	bf00      	nop
 8002e94:	3710      	adds	r7, #16
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}
 8002e9a:	bf00      	nop
 8002e9c:	20000080 	.word	0x20000080

08002ea0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b085      	sub	sp, #20
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	f003 0307 	and.w	r3, r3, #7
 8002eae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002eb0:	4b0c      	ldr	r3, [pc, #48]	@ (8002ee4 <__NVIC_SetPriorityGrouping+0x44>)
 8002eb2:	68db      	ldr	r3, [r3, #12]
 8002eb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002eb6:	68ba      	ldr	r2, [r7, #8]
 8002eb8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ec8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002ecc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ed0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ed2:	4a04      	ldr	r2, [pc, #16]	@ (8002ee4 <__NVIC_SetPriorityGrouping+0x44>)
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	60d3      	str	r3, [r2, #12]
}
 8002ed8:	bf00      	nop
 8002eda:	3714      	adds	r7, #20
 8002edc:	46bd      	mov	sp, r7
 8002ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee2:	4770      	bx	lr
 8002ee4:	e000ed00 	.word	0xe000ed00

08002ee8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002eec:	4b04      	ldr	r3, [pc, #16]	@ (8002f00 <__NVIC_GetPriorityGrouping+0x18>)
 8002eee:	68db      	ldr	r3, [r3, #12]
 8002ef0:	0a1b      	lsrs	r3, r3, #8
 8002ef2:	f003 0307 	and.w	r3, r3, #7
}
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efe:	4770      	bx	lr
 8002f00:	e000ed00 	.word	0xe000ed00

08002f04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b083      	sub	sp, #12
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	db0b      	blt.n	8002f2e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f16:	79fb      	ldrb	r3, [r7, #7]
 8002f18:	f003 021f 	and.w	r2, r3, #31
 8002f1c:	4907      	ldr	r1, [pc, #28]	@ (8002f3c <__NVIC_EnableIRQ+0x38>)
 8002f1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f22:	095b      	lsrs	r3, r3, #5
 8002f24:	2001      	movs	r0, #1
 8002f26:	fa00 f202 	lsl.w	r2, r0, r2
 8002f2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002f2e:	bf00      	nop
 8002f30:	370c      	adds	r7, #12
 8002f32:	46bd      	mov	sp, r7
 8002f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f38:	4770      	bx	lr
 8002f3a:	bf00      	nop
 8002f3c:	e000e100 	.word	0xe000e100

08002f40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b083      	sub	sp, #12
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	4603      	mov	r3, r0
 8002f48:	6039      	str	r1, [r7, #0]
 8002f4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	db0a      	blt.n	8002f6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	b2da      	uxtb	r2, r3
 8002f58:	490c      	ldr	r1, [pc, #48]	@ (8002f8c <__NVIC_SetPriority+0x4c>)
 8002f5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f5e:	0112      	lsls	r2, r2, #4
 8002f60:	b2d2      	uxtb	r2, r2
 8002f62:	440b      	add	r3, r1
 8002f64:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f68:	e00a      	b.n	8002f80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	b2da      	uxtb	r2, r3
 8002f6e:	4908      	ldr	r1, [pc, #32]	@ (8002f90 <__NVIC_SetPriority+0x50>)
 8002f70:	79fb      	ldrb	r3, [r7, #7]
 8002f72:	f003 030f 	and.w	r3, r3, #15
 8002f76:	3b04      	subs	r3, #4
 8002f78:	0112      	lsls	r2, r2, #4
 8002f7a:	b2d2      	uxtb	r2, r2
 8002f7c:	440b      	add	r3, r1
 8002f7e:	761a      	strb	r2, [r3, #24]
}
 8002f80:	bf00      	nop
 8002f82:	370c      	adds	r7, #12
 8002f84:	46bd      	mov	sp, r7
 8002f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8a:	4770      	bx	lr
 8002f8c:	e000e100 	.word	0xe000e100
 8002f90:	e000ed00 	.word	0xe000ed00

08002f94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b089      	sub	sp, #36	@ 0x24
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	60f8      	str	r0, [r7, #12]
 8002f9c:	60b9      	str	r1, [r7, #8]
 8002f9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	f003 0307 	and.w	r3, r3, #7
 8002fa6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002fa8:	69fb      	ldr	r3, [r7, #28]
 8002faa:	f1c3 0307 	rsb	r3, r3, #7
 8002fae:	2b04      	cmp	r3, #4
 8002fb0:	bf28      	it	cs
 8002fb2:	2304      	movcs	r3, #4
 8002fb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002fb6:	69fb      	ldr	r3, [r7, #28]
 8002fb8:	3304      	adds	r3, #4
 8002fba:	2b06      	cmp	r3, #6
 8002fbc:	d902      	bls.n	8002fc4 <NVIC_EncodePriority+0x30>
 8002fbe:	69fb      	ldr	r3, [r7, #28]
 8002fc0:	3b03      	subs	r3, #3
 8002fc2:	e000      	b.n	8002fc6 <NVIC_EncodePriority+0x32>
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fc8:	f04f 32ff 	mov.w	r2, #4294967295
 8002fcc:	69bb      	ldr	r3, [r7, #24]
 8002fce:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd2:	43da      	mvns	r2, r3
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	401a      	ands	r2, r3
 8002fd8:	697b      	ldr	r3, [r7, #20]
 8002fda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002fdc:	f04f 31ff 	mov.w	r1, #4294967295
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	fa01 f303 	lsl.w	r3, r1, r3
 8002fe6:	43d9      	mvns	r1, r3
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fec:	4313      	orrs	r3, r2
         );
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	3724      	adds	r7, #36	@ 0x24
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff8:	4770      	bx	lr
	...

08002ffc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b082      	sub	sp, #8
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	3b01      	subs	r3, #1
 8003008:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800300c:	d301      	bcc.n	8003012 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800300e:	2301      	movs	r3, #1
 8003010:	e00f      	b.n	8003032 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003012:	4a0a      	ldr	r2, [pc, #40]	@ (800303c <SysTick_Config+0x40>)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	3b01      	subs	r3, #1
 8003018:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800301a:	210f      	movs	r1, #15
 800301c:	f04f 30ff 	mov.w	r0, #4294967295
 8003020:	f7ff ff8e 	bl	8002f40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003024:	4b05      	ldr	r3, [pc, #20]	@ (800303c <SysTick_Config+0x40>)
 8003026:	2200      	movs	r2, #0
 8003028:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800302a:	4b04      	ldr	r3, [pc, #16]	@ (800303c <SysTick_Config+0x40>)
 800302c:	2207      	movs	r2, #7
 800302e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003030:	2300      	movs	r3, #0
}
 8003032:	4618      	mov	r0, r3
 8003034:	3708      	adds	r7, #8
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}
 800303a:	bf00      	nop
 800303c:	e000e010 	.word	0xe000e010

08003040 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b082      	sub	sp, #8
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003048:	6878      	ldr	r0, [r7, #4]
 800304a:	f7ff ff29 	bl	8002ea0 <__NVIC_SetPriorityGrouping>
}
 800304e:	bf00      	nop
 8003050:	3708      	adds	r7, #8
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}

08003056 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003056:	b580      	push	{r7, lr}
 8003058:	b086      	sub	sp, #24
 800305a:	af00      	add	r7, sp, #0
 800305c:	4603      	mov	r3, r0
 800305e:	60b9      	str	r1, [r7, #8]
 8003060:	607a      	str	r2, [r7, #4]
 8003062:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003064:	2300      	movs	r3, #0
 8003066:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003068:	f7ff ff3e 	bl	8002ee8 <__NVIC_GetPriorityGrouping>
 800306c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800306e:	687a      	ldr	r2, [r7, #4]
 8003070:	68b9      	ldr	r1, [r7, #8]
 8003072:	6978      	ldr	r0, [r7, #20]
 8003074:	f7ff ff8e 	bl	8002f94 <NVIC_EncodePriority>
 8003078:	4602      	mov	r2, r0
 800307a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800307e:	4611      	mov	r1, r2
 8003080:	4618      	mov	r0, r3
 8003082:	f7ff ff5d 	bl	8002f40 <__NVIC_SetPriority>
}
 8003086:	bf00      	nop
 8003088:	3718      	adds	r7, #24
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}

0800308e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800308e:	b580      	push	{r7, lr}
 8003090:	b082      	sub	sp, #8
 8003092:	af00      	add	r7, sp, #0
 8003094:	4603      	mov	r3, r0
 8003096:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003098:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800309c:	4618      	mov	r0, r3
 800309e:	f7ff ff31 	bl	8002f04 <__NVIC_EnableIRQ>
}
 80030a2:	bf00      	nop
 80030a4:	3708      	adds	r7, #8
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}

080030aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80030aa:	b580      	push	{r7, lr}
 80030ac:	b082      	sub	sp, #8
 80030ae:	af00      	add	r7, sp, #0
 80030b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80030b2:	6878      	ldr	r0, [r7, #4]
 80030b4:	f7ff ffa2 	bl	8002ffc <SysTick_Config>
 80030b8:	4603      	mov	r3, r0
}
 80030ba:	4618      	mov	r0, r3
 80030bc:	3708      	adds	r7, #8
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}

080030c2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80030c2:	b580      	push	{r7, lr}
 80030c4:	b084      	sub	sp, #16
 80030c6:	af00      	add	r7, sp, #0
 80030c8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030ce:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80030d0:	f7ff feb6 	bl	8002e40 <HAL_GetTick>
 80030d4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80030dc:	b2db      	uxtb	r3, r3
 80030de:	2b02      	cmp	r3, #2
 80030e0:	d008      	beq.n	80030f4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2280      	movs	r2, #128	@ 0x80
 80030e6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2200      	movs	r2, #0
 80030ec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80030f0:	2301      	movs	r3, #1
 80030f2:	e052      	b.n	800319a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	681a      	ldr	r2, [r3, #0]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f022 0216 	bic.w	r2, r2, #22
 8003102:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	695a      	ldr	r2, [r3, #20]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003112:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003118:	2b00      	cmp	r3, #0
 800311a:	d103      	bne.n	8003124 <HAL_DMA_Abort+0x62>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003120:	2b00      	cmp	r3, #0
 8003122:	d007      	beq.n	8003134 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	681a      	ldr	r2, [r3, #0]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f022 0208 	bic.w	r2, r2, #8
 8003132:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	681a      	ldr	r2, [r3, #0]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f022 0201 	bic.w	r2, r2, #1
 8003142:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003144:	e013      	b.n	800316e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003146:	f7ff fe7b 	bl	8002e40 <HAL_GetTick>
 800314a:	4602      	mov	r2, r0
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	1ad3      	subs	r3, r2, r3
 8003150:	2b05      	cmp	r3, #5
 8003152:	d90c      	bls.n	800316e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2220      	movs	r2, #32
 8003158:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2203      	movs	r2, #3
 800315e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2200      	movs	r2, #0
 8003166:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800316a:	2303      	movs	r3, #3
 800316c:	e015      	b.n	800319a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f003 0301 	and.w	r3, r3, #1
 8003178:	2b00      	cmp	r3, #0
 800317a:	d1e4      	bne.n	8003146 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003180:	223f      	movs	r2, #63	@ 0x3f
 8003182:	409a      	lsls	r2, r3
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2201      	movs	r2, #1
 800318c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2200      	movs	r2, #0
 8003194:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8003198:	2300      	movs	r3, #0
}
 800319a:	4618      	mov	r0, r3
 800319c:	3710      	adds	r7, #16
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}

080031a2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80031a2:	b480      	push	{r7}
 80031a4:	b083      	sub	sp, #12
 80031a6:	af00      	add	r7, sp, #0
 80031a8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80031b0:	b2db      	uxtb	r3, r3
 80031b2:	2b02      	cmp	r3, #2
 80031b4:	d004      	beq.n	80031c0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2280      	movs	r2, #128	@ 0x80
 80031ba:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80031bc:	2301      	movs	r3, #1
 80031be:	e00c      	b.n	80031da <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2205      	movs	r2, #5
 80031c4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	681a      	ldr	r2, [r3, #0]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f022 0201 	bic.w	r2, r2, #1
 80031d6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80031d8:	2300      	movs	r3, #0
}
 80031da:	4618      	mov	r0, r3
 80031dc:	370c      	adds	r7, #12
 80031de:	46bd      	mov	sp, r7
 80031e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e4:	4770      	bx	lr

080031e6 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80031e6:	b480      	push	{r7}
 80031e8:	b083      	sub	sp, #12
 80031ea:	af00      	add	r7, sp, #0
 80031ec:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80031f4:	b2db      	uxtb	r3, r3
}
 80031f6:	4618      	mov	r0, r3
 80031f8:	370c      	adds	r7, #12
 80031fa:	46bd      	mov	sp, r7
 80031fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003200:	4770      	bx	lr
	...

08003204 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003204:	b480      	push	{r7}
 8003206:	b089      	sub	sp, #36	@ 0x24
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
 800320c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800320e:	2300      	movs	r3, #0
 8003210:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003212:	2300      	movs	r3, #0
 8003214:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003216:	2300      	movs	r3, #0
 8003218:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800321a:	2300      	movs	r3, #0
 800321c:	61fb      	str	r3, [r7, #28]
 800321e:	e16b      	b.n	80034f8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003220:	2201      	movs	r2, #1
 8003222:	69fb      	ldr	r3, [r7, #28]
 8003224:	fa02 f303 	lsl.w	r3, r2, r3
 8003228:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	697a      	ldr	r2, [r7, #20]
 8003230:	4013      	ands	r3, r2
 8003232:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003234:	693a      	ldr	r2, [r7, #16]
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	429a      	cmp	r2, r3
 800323a:	f040 815a 	bne.w	80034f2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	f003 0303 	and.w	r3, r3, #3
 8003246:	2b01      	cmp	r3, #1
 8003248:	d005      	beq.n	8003256 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003252:	2b02      	cmp	r3, #2
 8003254:	d130      	bne.n	80032b8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	689b      	ldr	r3, [r3, #8]
 800325a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800325c:	69fb      	ldr	r3, [r7, #28]
 800325e:	005b      	lsls	r3, r3, #1
 8003260:	2203      	movs	r2, #3
 8003262:	fa02 f303 	lsl.w	r3, r2, r3
 8003266:	43db      	mvns	r3, r3
 8003268:	69ba      	ldr	r2, [r7, #24]
 800326a:	4013      	ands	r3, r2
 800326c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	68da      	ldr	r2, [r3, #12]
 8003272:	69fb      	ldr	r3, [r7, #28]
 8003274:	005b      	lsls	r3, r3, #1
 8003276:	fa02 f303 	lsl.w	r3, r2, r3
 800327a:	69ba      	ldr	r2, [r7, #24]
 800327c:	4313      	orrs	r3, r2
 800327e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	69ba      	ldr	r2, [r7, #24]
 8003284:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800328c:	2201      	movs	r2, #1
 800328e:	69fb      	ldr	r3, [r7, #28]
 8003290:	fa02 f303 	lsl.w	r3, r2, r3
 8003294:	43db      	mvns	r3, r3
 8003296:	69ba      	ldr	r2, [r7, #24]
 8003298:	4013      	ands	r3, r2
 800329a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	091b      	lsrs	r3, r3, #4
 80032a2:	f003 0201 	and.w	r2, r3, #1
 80032a6:	69fb      	ldr	r3, [r7, #28]
 80032a8:	fa02 f303 	lsl.w	r3, r2, r3
 80032ac:	69ba      	ldr	r2, [r7, #24]
 80032ae:	4313      	orrs	r3, r2
 80032b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	69ba      	ldr	r2, [r7, #24]
 80032b6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	f003 0303 	and.w	r3, r3, #3
 80032c0:	2b03      	cmp	r3, #3
 80032c2:	d017      	beq.n	80032f4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	68db      	ldr	r3, [r3, #12]
 80032c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80032ca:	69fb      	ldr	r3, [r7, #28]
 80032cc:	005b      	lsls	r3, r3, #1
 80032ce:	2203      	movs	r2, #3
 80032d0:	fa02 f303 	lsl.w	r3, r2, r3
 80032d4:	43db      	mvns	r3, r3
 80032d6:	69ba      	ldr	r2, [r7, #24]
 80032d8:	4013      	ands	r3, r2
 80032da:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	689a      	ldr	r2, [r3, #8]
 80032e0:	69fb      	ldr	r3, [r7, #28]
 80032e2:	005b      	lsls	r3, r3, #1
 80032e4:	fa02 f303 	lsl.w	r3, r2, r3
 80032e8:	69ba      	ldr	r2, [r7, #24]
 80032ea:	4313      	orrs	r3, r2
 80032ec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	69ba      	ldr	r2, [r7, #24]
 80032f2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	f003 0303 	and.w	r3, r3, #3
 80032fc:	2b02      	cmp	r3, #2
 80032fe:	d123      	bne.n	8003348 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003300:	69fb      	ldr	r3, [r7, #28]
 8003302:	08da      	lsrs	r2, r3, #3
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	3208      	adds	r2, #8
 8003308:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800330c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800330e:	69fb      	ldr	r3, [r7, #28]
 8003310:	f003 0307 	and.w	r3, r3, #7
 8003314:	009b      	lsls	r3, r3, #2
 8003316:	220f      	movs	r2, #15
 8003318:	fa02 f303 	lsl.w	r3, r2, r3
 800331c:	43db      	mvns	r3, r3
 800331e:	69ba      	ldr	r2, [r7, #24]
 8003320:	4013      	ands	r3, r2
 8003322:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	691a      	ldr	r2, [r3, #16]
 8003328:	69fb      	ldr	r3, [r7, #28]
 800332a:	f003 0307 	and.w	r3, r3, #7
 800332e:	009b      	lsls	r3, r3, #2
 8003330:	fa02 f303 	lsl.w	r3, r2, r3
 8003334:	69ba      	ldr	r2, [r7, #24]
 8003336:	4313      	orrs	r3, r2
 8003338:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800333a:	69fb      	ldr	r3, [r7, #28]
 800333c:	08da      	lsrs	r2, r3, #3
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	3208      	adds	r2, #8
 8003342:	69b9      	ldr	r1, [r7, #24]
 8003344:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800334e:	69fb      	ldr	r3, [r7, #28]
 8003350:	005b      	lsls	r3, r3, #1
 8003352:	2203      	movs	r2, #3
 8003354:	fa02 f303 	lsl.w	r3, r2, r3
 8003358:	43db      	mvns	r3, r3
 800335a:	69ba      	ldr	r2, [r7, #24]
 800335c:	4013      	ands	r3, r2
 800335e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	f003 0203 	and.w	r2, r3, #3
 8003368:	69fb      	ldr	r3, [r7, #28]
 800336a:	005b      	lsls	r3, r3, #1
 800336c:	fa02 f303 	lsl.w	r3, r2, r3
 8003370:	69ba      	ldr	r2, [r7, #24]
 8003372:	4313      	orrs	r3, r2
 8003374:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	69ba      	ldr	r2, [r7, #24]
 800337a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003384:	2b00      	cmp	r3, #0
 8003386:	f000 80b4 	beq.w	80034f2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800338a:	2300      	movs	r3, #0
 800338c:	60fb      	str	r3, [r7, #12]
 800338e:	4b60      	ldr	r3, [pc, #384]	@ (8003510 <HAL_GPIO_Init+0x30c>)
 8003390:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003392:	4a5f      	ldr	r2, [pc, #380]	@ (8003510 <HAL_GPIO_Init+0x30c>)
 8003394:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003398:	6453      	str	r3, [r2, #68]	@ 0x44
 800339a:	4b5d      	ldr	r3, [pc, #372]	@ (8003510 <HAL_GPIO_Init+0x30c>)
 800339c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800339e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80033a2:	60fb      	str	r3, [r7, #12]
 80033a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80033a6:	4a5b      	ldr	r2, [pc, #364]	@ (8003514 <HAL_GPIO_Init+0x310>)
 80033a8:	69fb      	ldr	r3, [r7, #28]
 80033aa:	089b      	lsrs	r3, r3, #2
 80033ac:	3302      	adds	r3, #2
 80033ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80033b4:	69fb      	ldr	r3, [r7, #28]
 80033b6:	f003 0303 	and.w	r3, r3, #3
 80033ba:	009b      	lsls	r3, r3, #2
 80033bc:	220f      	movs	r2, #15
 80033be:	fa02 f303 	lsl.w	r3, r2, r3
 80033c2:	43db      	mvns	r3, r3
 80033c4:	69ba      	ldr	r2, [r7, #24]
 80033c6:	4013      	ands	r3, r2
 80033c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	4a52      	ldr	r2, [pc, #328]	@ (8003518 <HAL_GPIO_Init+0x314>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d02b      	beq.n	800342a <HAL_GPIO_Init+0x226>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	4a51      	ldr	r2, [pc, #324]	@ (800351c <HAL_GPIO_Init+0x318>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d025      	beq.n	8003426 <HAL_GPIO_Init+0x222>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	4a50      	ldr	r2, [pc, #320]	@ (8003520 <HAL_GPIO_Init+0x31c>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d01f      	beq.n	8003422 <HAL_GPIO_Init+0x21e>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	4a4f      	ldr	r2, [pc, #316]	@ (8003524 <HAL_GPIO_Init+0x320>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d019      	beq.n	800341e <HAL_GPIO_Init+0x21a>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	4a4e      	ldr	r2, [pc, #312]	@ (8003528 <HAL_GPIO_Init+0x324>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d013      	beq.n	800341a <HAL_GPIO_Init+0x216>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	4a4d      	ldr	r2, [pc, #308]	@ (800352c <HAL_GPIO_Init+0x328>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d00d      	beq.n	8003416 <HAL_GPIO_Init+0x212>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	4a4c      	ldr	r2, [pc, #304]	@ (8003530 <HAL_GPIO_Init+0x32c>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d007      	beq.n	8003412 <HAL_GPIO_Init+0x20e>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	4a4b      	ldr	r2, [pc, #300]	@ (8003534 <HAL_GPIO_Init+0x330>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d101      	bne.n	800340e <HAL_GPIO_Init+0x20a>
 800340a:	2307      	movs	r3, #7
 800340c:	e00e      	b.n	800342c <HAL_GPIO_Init+0x228>
 800340e:	2308      	movs	r3, #8
 8003410:	e00c      	b.n	800342c <HAL_GPIO_Init+0x228>
 8003412:	2306      	movs	r3, #6
 8003414:	e00a      	b.n	800342c <HAL_GPIO_Init+0x228>
 8003416:	2305      	movs	r3, #5
 8003418:	e008      	b.n	800342c <HAL_GPIO_Init+0x228>
 800341a:	2304      	movs	r3, #4
 800341c:	e006      	b.n	800342c <HAL_GPIO_Init+0x228>
 800341e:	2303      	movs	r3, #3
 8003420:	e004      	b.n	800342c <HAL_GPIO_Init+0x228>
 8003422:	2302      	movs	r3, #2
 8003424:	e002      	b.n	800342c <HAL_GPIO_Init+0x228>
 8003426:	2301      	movs	r3, #1
 8003428:	e000      	b.n	800342c <HAL_GPIO_Init+0x228>
 800342a:	2300      	movs	r3, #0
 800342c:	69fa      	ldr	r2, [r7, #28]
 800342e:	f002 0203 	and.w	r2, r2, #3
 8003432:	0092      	lsls	r2, r2, #2
 8003434:	4093      	lsls	r3, r2
 8003436:	69ba      	ldr	r2, [r7, #24]
 8003438:	4313      	orrs	r3, r2
 800343a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800343c:	4935      	ldr	r1, [pc, #212]	@ (8003514 <HAL_GPIO_Init+0x310>)
 800343e:	69fb      	ldr	r3, [r7, #28]
 8003440:	089b      	lsrs	r3, r3, #2
 8003442:	3302      	adds	r3, #2
 8003444:	69ba      	ldr	r2, [r7, #24]
 8003446:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800344a:	4b3b      	ldr	r3, [pc, #236]	@ (8003538 <HAL_GPIO_Init+0x334>)
 800344c:	689b      	ldr	r3, [r3, #8]
 800344e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003450:	693b      	ldr	r3, [r7, #16]
 8003452:	43db      	mvns	r3, r3
 8003454:	69ba      	ldr	r2, [r7, #24]
 8003456:	4013      	ands	r3, r2
 8003458:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003462:	2b00      	cmp	r3, #0
 8003464:	d003      	beq.n	800346e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003466:	69ba      	ldr	r2, [r7, #24]
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	4313      	orrs	r3, r2
 800346c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800346e:	4a32      	ldr	r2, [pc, #200]	@ (8003538 <HAL_GPIO_Init+0x334>)
 8003470:	69bb      	ldr	r3, [r7, #24]
 8003472:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003474:	4b30      	ldr	r3, [pc, #192]	@ (8003538 <HAL_GPIO_Init+0x334>)
 8003476:	68db      	ldr	r3, [r3, #12]
 8003478:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	43db      	mvns	r3, r3
 800347e:	69ba      	ldr	r2, [r7, #24]
 8003480:	4013      	ands	r3, r2
 8003482:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800348c:	2b00      	cmp	r3, #0
 800348e:	d003      	beq.n	8003498 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003490:	69ba      	ldr	r2, [r7, #24]
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	4313      	orrs	r3, r2
 8003496:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003498:	4a27      	ldr	r2, [pc, #156]	@ (8003538 <HAL_GPIO_Init+0x334>)
 800349a:	69bb      	ldr	r3, [r7, #24]
 800349c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800349e:	4b26      	ldr	r3, [pc, #152]	@ (8003538 <HAL_GPIO_Init+0x334>)
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034a4:	693b      	ldr	r3, [r7, #16]
 80034a6:	43db      	mvns	r3, r3
 80034a8:	69ba      	ldr	r2, [r7, #24]
 80034aa:	4013      	ands	r3, r2
 80034ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d003      	beq.n	80034c2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80034ba:	69ba      	ldr	r2, [r7, #24]
 80034bc:	693b      	ldr	r3, [r7, #16]
 80034be:	4313      	orrs	r3, r2
 80034c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80034c2:	4a1d      	ldr	r2, [pc, #116]	@ (8003538 <HAL_GPIO_Init+0x334>)
 80034c4:	69bb      	ldr	r3, [r7, #24]
 80034c6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80034c8:	4b1b      	ldr	r3, [pc, #108]	@ (8003538 <HAL_GPIO_Init+0x334>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	43db      	mvns	r3, r3
 80034d2:	69ba      	ldr	r2, [r7, #24]
 80034d4:	4013      	ands	r3, r2
 80034d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d003      	beq.n	80034ec <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80034e4:	69ba      	ldr	r2, [r7, #24]
 80034e6:	693b      	ldr	r3, [r7, #16]
 80034e8:	4313      	orrs	r3, r2
 80034ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80034ec:	4a12      	ldr	r2, [pc, #72]	@ (8003538 <HAL_GPIO_Init+0x334>)
 80034ee:	69bb      	ldr	r3, [r7, #24]
 80034f0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80034f2:	69fb      	ldr	r3, [r7, #28]
 80034f4:	3301      	adds	r3, #1
 80034f6:	61fb      	str	r3, [r7, #28]
 80034f8:	69fb      	ldr	r3, [r7, #28]
 80034fa:	2b0f      	cmp	r3, #15
 80034fc:	f67f ae90 	bls.w	8003220 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003500:	bf00      	nop
 8003502:	bf00      	nop
 8003504:	3724      	adds	r7, #36	@ 0x24
 8003506:	46bd      	mov	sp, r7
 8003508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350c:	4770      	bx	lr
 800350e:	bf00      	nop
 8003510:	40023800 	.word	0x40023800
 8003514:	40013800 	.word	0x40013800
 8003518:	40020000 	.word	0x40020000
 800351c:	40020400 	.word	0x40020400
 8003520:	40020800 	.word	0x40020800
 8003524:	40020c00 	.word	0x40020c00
 8003528:	40021000 	.word	0x40021000
 800352c:	40021400 	.word	0x40021400
 8003530:	40021800 	.word	0x40021800
 8003534:	40021c00 	.word	0x40021c00
 8003538:	40013c00 	.word	0x40013c00

0800353c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800353c:	b480      	push	{r7}
 800353e:	b083      	sub	sp, #12
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
 8003544:	460b      	mov	r3, r1
 8003546:	807b      	strh	r3, [r7, #2]
 8003548:	4613      	mov	r3, r2
 800354a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800354c:	787b      	ldrb	r3, [r7, #1]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d003      	beq.n	800355a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003552:	887a      	ldrh	r2, [r7, #2]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003558:	e003      	b.n	8003562 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800355a:	887b      	ldrh	r3, [r7, #2]
 800355c:	041a      	lsls	r2, r3, #16
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	619a      	str	r2, [r3, #24]
}
 8003562:	bf00      	nop
 8003564:	370c      	adds	r7, #12
 8003566:	46bd      	mov	sp, r7
 8003568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356c:	4770      	bx	lr
	...

08003570 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b084      	sub	sp, #16
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d101      	bne.n	8003582 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800357e:	2301      	movs	r3, #1
 8003580:	e12b      	b.n	80037da <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003588:	b2db      	uxtb	r3, r3
 800358a:	2b00      	cmp	r3, #0
 800358c:	d106      	bne.n	800359c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2200      	movs	r2, #0
 8003592:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003596:	6878      	ldr	r0, [r7, #4]
 8003598:	f7ff f912 	bl	80027c0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2224      	movs	r2, #36	@ 0x24
 80035a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	681a      	ldr	r2, [r3, #0]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f022 0201 	bic.w	r2, r2, #1
 80035b2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	681a      	ldr	r2, [r3, #0]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80035c2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	681a      	ldr	r2, [r3, #0]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80035d2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80035d4:	f003 fbfa 	bl	8006dcc <HAL_RCC_GetPCLK1Freq>
 80035d8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	4a81      	ldr	r2, [pc, #516]	@ (80037e4 <HAL_I2C_Init+0x274>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d807      	bhi.n	80035f4 <HAL_I2C_Init+0x84>
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	4a80      	ldr	r2, [pc, #512]	@ (80037e8 <HAL_I2C_Init+0x278>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	bf94      	ite	ls
 80035ec:	2301      	movls	r3, #1
 80035ee:	2300      	movhi	r3, #0
 80035f0:	b2db      	uxtb	r3, r3
 80035f2:	e006      	b.n	8003602 <HAL_I2C_Init+0x92>
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	4a7d      	ldr	r2, [pc, #500]	@ (80037ec <HAL_I2C_Init+0x27c>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	bf94      	ite	ls
 80035fc:	2301      	movls	r3, #1
 80035fe:	2300      	movhi	r3, #0
 8003600:	b2db      	uxtb	r3, r3
 8003602:	2b00      	cmp	r3, #0
 8003604:	d001      	beq.n	800360a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003606:	2301      	movs	r3, #1
 8003608:	e0e7      	b.n	80037da <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	4a78      	ldr	r2, [pc, #480]	@ (80037f0 <HAL_I2C_Init+0x280>)
 800360e:	fba2 2303 	umull	r2, r3, r2, r3
 8003612:	0c9b      	lsrs	r3, r3, #18
 8003614:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	68ba      	ldr	r2, [r7, #8]
 8003626:	430a      	orrs	r2, r1
 8003628:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	6a1b      	ldr	r3, [r3, #32]
 8003630:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	4a6a      	ldr	r2, [pc, #424]	@ (80037e4 <HAL_I2C_Init+0x274>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d802      	bhi.n	8003644 <HAL_I2C_Init+0xd4>
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	3301      	adds	r3, #1
 8003642:	e009      	b.n	8003658 <HAL_I2C_Init+0xe8>
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800364a:	fb02 f303 	mul.w	r3, r2, r3
 800364e:	4a69      	ldr	r2, [pc, #420]	@ (80037f4 <HAL_I2C_Init+0x284>)
 8003650:	fba2 2303 	umull	r2, r3, r2, r3
 8003654:	099b      	lsrs	r3, r3, #6
 8003656:	3301      	adds	r3, #1
 8003658:	687a      	ldr	r2, [r7, #4]
 800365a:	6812      	ldr	r2, [r2, #0]
 800365c:	430b      	orrs	r3, r1
 800365e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	69db      	ldr	r3, [r3, #28]
 8003666:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800366a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	495c      	ldr	r1, [pc, #368]	@ (80037e4 <HAL_I2C_Init+0x274>)
 8003674:	428b      	cmp	r3, r1
 8003676:	d819      	bhi.n	80036ac <HAL_I2C_Init+0x13c>
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	1e59      	subs	r1, r3, #1
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	005b      	lsls	r3, r3, #1
 8003682:	fbb1 f3f3 	udiv	r3, r1, r3
 8003686:	1c59      	adds	r1, r3, #1
 8003688:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800368c:	400b      	ands	r3, r1
 800368e:	2b00      	cmp	r3, #0
 8003690:	d00a      	beq.n	80036a8 <HAL_I2C_Init+0x138>
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	1e59      	subs	r1, r3, #1
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	005b      	lsls	r3, r3, #1
 800369c:	fbb1 f3f3 	udiv	r3, r1, r3
 80036a0:	3301      	adds	r3, #1
 80036a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036a6:	e051      	b.n	800374c <HAL_I2C_Init+0x1dc>
 80036a8:	2304      	movs	r3, #4
 80036aa:	e04f      	b.n	800374c <HAL_I2C_Init+0x1dc>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	689b      	ldr	r3, [r3, #8]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d111      	bne.n	80036d8 <HAL_I2C_Init+0x168>
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	1e58      	subs	r0, r3, #1
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6859      	ldr	r1, [r3, #4]
 80036bc:	460b      	mov	r3, r1
 80036be:	005b      	lsls	r3, r3, #1
 80036c0:	440b      	add	r3, r1
 80036c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80036c6:	3301      	adds	r3, #1
 80036c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	bf0c      	ite	eq
 80036d0:	2301      	moveq	r3, #1
 80036d2:	2300      	movne	r3, #0
 80036d4:	b2db      	uxtb	r3, r3
 80036d6:	e012      	b.n	80036fe <HAL_I2C_Init+0x18e>
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	1e58      	subs	r0, r3, #1
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6859      	ldr	r1, [r3, #4]
 80036e0:	460b      	mov	r3, r1
 80036e2:	009b      	lsls	r3, r3, #2
 80036e4:	440b      	add	r3, r1
 80036e6:	0099      	lsls	r1, r3, #2
 80036e8:	440b      	add	r3, r1
 80036ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80036ee:	3301      	adds	r3, #1
 80036f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	bf0c      	ite	eq
 80036f8:	2301      	moveq	r3, #1
 80036fa:	2300      	movne	r3, #0
 80036fc:	b2db      	uxtb	r3, r3
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d001      	beq.n	8003706 <HAL_I2C_Init+0x196>
 8003702:	2301      	movs	r3, #1
 8003704:	e022      	b.n	800374c <HAL_I2C_Init+0x1dc>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	689b      	ldr	r3, [r3, #8]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d10e      	bne.n	800372c <HAL_I2C_Init+0x1bc>
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	1e58      	subs	r0, r3, #1
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6859      	ldr	r1, [r3, #4]
 8003716:	460b      	mov	r3, r1
 8003718:	005b      	lsls	r3, r3, #1
 800371a:	440b      	add	r3, r1
 800371c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003720:	3301      	adds	r3, #1
 8003722:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003726:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800372a:	e00f      	b.n	800374c <HAL_I2C_Init+0x1dc>
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	1e58      	subs	r0, r3, #1
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6859      	ldr	r1, [r3, #4]
 8003734:	460b      	mov	r3, r1
 8003736:	009b      	lsls	r3, r3, #2
 8003738:	440b      	add	r3, r1
 800373a:	0099      	lsls	r1, r3, #2
 800373c:	440b      	add	r3, r1
 800373e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003742:	3301      	adds	r3, #1
 8003744:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003748:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800374c:	6879      	ldr	r1, [r7, #4]
 800374e:	6809      	ldr	r1, [r1, #0]
 8003750:	4313      	orrs	r3, r2
 8003752:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	69da      	ldr	r2, [r3, #28]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6a1b      	ldr	r3, [r3, #32]
 8003766:	431a      	orrs	r2, r3
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	430a      	orrs	r2, r1
 800376e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	689b      	ldr	r3, [r3, #8]
 8003776:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800377a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800377e:	687a      	ldr	r2, [r7, #4]
 8003780:	6911      	ldr	r1, [r2, #16]
 8003782:	687a      	ldr	r2, [r7, #4]
 8003784:	68d2      	ldr	r2, [r2, #12]
 8003786:	4311      	orrs	r1, r2
 8003788:	687a      	ldr	r2, [r7, #4]
 800378a:	6812      	ldr	r2, [r2, #0]
 800378c:	430b      	orrs	r3, r1
 800378e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	68db      	ldr	r3, [r3, #12]
 8003796:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	695a      	ldr	r2, [r3, #20]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	699b      	ldr	r3, [r3, #24]
 80037a2:	431a      	orrs	r2, r3
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	430a      	orrs	r2, r1
 80037aa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	681a      	ldr	r2, [r3, #0]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f042 0201 	orr.w	r2, r2, #1
 80037ba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2200      	movs	r2, #0
 80037c0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2220      	movs	r2, #32
 80037c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2200      	movs	r2, #0
 80037ce:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2200      	movs	r2, #0
 80037d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80037d8:	2300      	movs	r3, #0
}
 80037da:	4618      	mov	r0, r3
 80037dc:	3710      	adds	r7, #16
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}
 80037e2:	bf00      	nop
 80037e4:	000186a0 	.word	0x000186a0
 80037e8:	001e847f 	.word	0x001e847f
 80037ec:	003d08ff 	.word	0x003d08ff
 80037f0:	431bde83 	.word	0x431bde83
 80037f4:	10624dd3 	.word	0x10624dd3

080037f8 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 80037f8:	b480      	push	{r7}
 80037fa:	b083      	sub	sp, #12
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	695b      	ldr	r3, [r3, #20]
 8003806:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800380a:	2b80      	cmp	r3, #128	@ 0x80
 800380c:	d103      	bne.n	8003816 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	2200      	movs	r2, #0
 8003814:	611a      	str	r2, [r3, #16]
  }
}
 8003816:	bf00      	nop
 8003818:	370c      	adds	r7, #12
 800381a:	46bd      	mov	sp, r7
 800381c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003820:	4770      	bx	lr
	...

08003824 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b088      	sub	sp, #32
 8003828:	af02      	add	r7, sp, #8
 800382a:	60f8      	str	r0, [r7, #12]
 800382c:	607a      	str	r2, [r7, #4]
 800382e:	461a      	mov	r2, r3
 8003830:	460b      	mov	r3, r1
 8003832:	817b      	strh	r3, [r7, #10]
 8003834:	4613      	mov	r3, r2
 8003836:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003838:	f7ff fb02 	bl	8002e40 <HAL_GetTick>
 800383c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003844:	b2db      	uxtb	r3, r3
 8003846:	2b20      	cmp	r3, #32
 8003848:	f040 80e0 	bne.w	8003a0c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800384c:	697b      	ldr	r3, [r7, #20]
 800384e:	9300      	str	r3, [sp, #0]
 8003850:	2319      	movs	r3, #25
 8003852:	2201      	movs	r2, #1
 8003854:	4970      	ldr	r1, [pc, #448]	@ (8003a18 <HAL_I2C_Master_Transmit+0x1f4>)
 8003856:	68f8      	ldr	r0, [r7, #12]
 8003858:	f002 fc04 	bl	8006064 <I2C_WaitOnFlagUntilTimeout>
 800385c:	4603      	mov	r3, r0
 800385e:	2b00      	cmp	r3, #0
 8003860:	d001      	beq.n	8003866 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003862:	2302      	movs	r3, #2
 8003864:	e0d3      	b.n	8003a0e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800386c:	2b01      	cmp	r3, #1
 800386e:	d101      	bne.n	8003874 <HAL_I2C_Master_Transmit+0x50>
 8003870:	2302      	movs	r3, #2
 8003872:	e0cc      	b.n	8003a0e <HAL_I2C_Master_Transmit+0x1ea>
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	2201      	movs	r2, #1
 8003878:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f003 0301 	and.w	r3, r3, #1
 8003886:	2b01      	cmp	r3, #1
 8003888:	d007      	beq.n	800389a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	681a      	ldr	r2, [r3, #0]
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f042 0201 	orr.w	r2, r2, #1
 8003898:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	681a      	ldr	r2, [r3, #0]
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80038a8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	2221      	movs	r2, #33	@ 0x21
 80038ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	2210      	movs	r2, #16
 80038b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	2200      	movs	r2, #0
 80038be:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	687a      	ldr	r2, [r7, #4]
 80038c4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	893a      	ldrh	r2, [r7, #8]
 80038ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038d0:	b29a      	uxth	r2, r3
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	4a50      	ldr	r2, [pc, #320]	@ (8003a1c <HAL_I2C_Master_Transmit+0x1f8>)
 80038da:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80038dc:	8979      	ldrh	r1, [r7, #10]
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	6a3a      	ldr	r2, [r7, #32]
 80038e2:	68f8      	ldr	r0, [r7, #12]
 80038e4:	f002 f8de 	bl	8005aa4 <I2C_MasterRequestWrite>
 80038e8:	4603      	mov	r3, r0
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d001      	beq.n	80038f2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80038ee:	2301      	movs	r3, #1
 80038f0:	e08d      	b.n	8003a0e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038f2:	2300      	movs	r3, #0
 80038f4:	613b      	str	r3, [r7, #16]
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	695b      	ldr	r3, [r3, #20]
 80038fc:	613b      	str	r3, [r7, #16]
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	699b      	ldr	r3, [r3, #24]
 8003904:	613b      	str	r3, [r7, #16]
 8003906:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003908:	e066      	b.n	80039d8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800390a:	697a      	ldr	r2, [r7, #20]
 800390c:	6a39      	ldr	r1, [r7, #32]
 800390e:	68f8      	ldr	r0, [r7, #12]
 8003910:	f002 fcc2 	bl	8006298 <I2C_WaitOnTXEFlagUntilTimeout>
 8003914:	4603      	mov	r3, r0
 8003916:	2b00      	cmp	r3, #0
 8003918:	d00d      	beq.n	8003936 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800391e:	2b04      	cmp	r3, #4
 8003920:	d107      	bne.n	8003932 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	681a      	ldr	r2, [r3, #0]
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003930:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003932:	2301      	movs	r3, #1
 8003934:	e06b      	b.n	8003a0e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800393a:	781a      	ldrb	r2, [r3, #0]
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003946:	1c5a      	adds	r2, r3, #1
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003950:	b29b      	uxth	r3, r3
 8003952:	3b01      	subs	r3, #1
 8003954:	b29a      	uxth	r2, r3
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800395e:	3b01      	subs	r3, #1
 8003960:	b29a      	uxth	r2, r3
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	695b      	ldr	r3, [r3, #20]
 800396c:	f003 0304 	and.w	r3, r3, #4
 8003970:	2b04      	cmp	r3, #4
 8003972:	d11b      	bne.n	80039ac <HAL_I2C_Master_Transmit+0x188>
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003978:	2b00      	cmp	r3, #0
 800397a:	d017      	beq.n	80039ac <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003980:	781a      	ldrb	r2, [r3, #0]
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800398c:	1c5a      	adds	r2, r3, #1
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003996:	b29b      	uxth	r3, r3
 8003998:	3b01      	subs	r3, #1
 800399a:	b29a      	uxth	r2, r3
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039a4:	3b01      	subs	r3, #1
 80039a6:	b29a      	uxth	r2, r3
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039ac:	697a      	ldr	r2, [r7, #20]
 80039ae:	6a39      	ldr	r1, [r7, #32]
 80039b0:	68f8      	ldr	r0, [r7, #12]
 80039b2:	f002 fcb9 	bl	8006328 <I2C_WaitOnBTFFlagUntilTimeout>
 80039b6:	4603      	mov	r3, r0
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d00d      	beq.n	80039d8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039c0:	2b04      	cmp	r3, #4
 80039c2:	d107      	bne.n	80039d4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	681a      	ldr	r2, [r3, #0]
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80039d2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80039d4:	2301      	movs	r3, #1
 80039d6:	e01a      	b.n	8003a0e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d194      	bne.n	800390a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	681a      	ldr	r2, [r3, #0]
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80039ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	2220      	movs	r2, #32
 80039f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	2200      	movs	r2, #0
 80039fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	2200      	movs	r2, #0
 8003a04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003a08:	2300      	movs	r3, #0
 8003a0a:	e000      	b.n	8003a0e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003a0c:	2302      	movs	r3, #2
  }
}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	3718      	adds	r7, #24
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}
 8003a16:	bf00      	nop
 8003a18:	00100002 	.word	0x00100002
 8003a1c:	ffff0000 	.word	0xffff0000

08003a20 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b08c      	sub	sp, #48	@ 0x30
 8003a24:	af02      	add	r7, sp, #8
 8003a26:	60f8      	str	r0, [r7, #12]
 8003a28:	607a      	str	r2, [r7, #4]
 8003a2a:	461a      	mov	r2, r3
 8003a2c:	460b      	mov	r3, r1
 8003a2e:	817b      	strh	r3, [r7, #10]
 8003a30:	4613      	mov	r3, r2
 8003a32:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003a34:	f7ff fa04 	bl	8002e40 <HAL_GetTick>
 8003a38:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a40:	b2db      	uxtb	r3, r3
 8003a42:	2b20      	cmp	r3, #32
 8003a44:	f040 8217 	bne.w	8003e76 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003a48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a4a:	9300      	str	r3, [sp, #0]
 8003a4c:	2319      	movs	r3, #25
 8003a4e:	2201      	movs	r2, #1
 8003a50:	497c      	ldr	r1, [pc, #496]	@ (8003c44 <HAL_I2C_Master_Receive+0x224>)
 8003a52:	68f8      	ldr	r0, [r7, #12]
 8003a54:	f002 fb06 	bl	8006064 <I2C_WaitOnFlagUntilTimeout>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d001      	beq.n	8003a62 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8003a5e:	2302      	movs	r3, #2
 8003a60:	e20a      	b.n	8003e78 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a68:	2b01      	cmp	r3, #1
 8003a6a:	d101      	bne.n	8003a70 <HAL_I2C_Master_Receive+0x50>
 8003a6c:	2302      	movs	r3, #2
 8003a6e:	e203      	b.n	8003e78 <HAL_I2C_Master_Receive+0x458>
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	2201      	movs	r2, #1
 8003a74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f003 0301 	and.w	r3, r3, #1
 8003a82:	2b01      	cmp	r3, #1
 8003a84:	d007      	beq.n	8003a96 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	681a      	ldr	r2, [r3, #0]
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f042 0201 	orr.w	r2, r2, #1
 8003a94:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	681a      	ldr	r2, [r3, #0]
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003aa4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	2222      	movs	r2, #34	@ 0x22
 8003aaa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	2210      	movs	r2, #16
 8003ab2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	687a      	ldr	r2, [r7, #4]
 8003ac0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	893a      	ldrh	r2, [r7, #8]
 8003ac6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003acc:	b29a      	uxth	r2, r3
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	4a5c      	ldr	r2, [pc, #368]	@ (8003c48 <HAL_I2C_Master_Receive+0x228>)
 8003ad6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003ad8:	8979      	ldrh	r1, [r7, #10]
 8003ada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003adc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003ade:	68f8      	ldr	r0, [r7, #12]
 8003ae0:	f002 f862 	bl	8005ba8 <I2C_MasterRequestRead>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d001      	beq.n	8003aee <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8003aea:	2301      	movs	r3, #1
 8003aec:	e1c4      	b.n	8003e78 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d113      	bne.n	8003b1e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003af6:	2300      	movs	r3, #0
 8003af8:	623b      	str	r3, [r7, #32]
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	695b      	ldr	r3, [r3, #20]
 8003b00:	623b      	str	r3, [r7, #32]
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	699b      	ldr	r3, [r3, #24]
 8003b08:	623b      	str	r3, [r7, #32]
 8003b0a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	681a      	ldr	r2, [r3, #0]
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b1a:	601a      	str	r2, [r3, #0]
 8003b1c:	e198      	b.n	8003e50 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b22:	2b01      	cmp	r3, #1
 8003b24:	d11b      	bne.n	8003b5e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	681a      	ldr	r2, [r3, #0]
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b34:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b36:	2300      	movs	r3, #0
 8003b38:	61fb      	str	r3, [r7, #28]
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	695b      	ldr	r3, [r3, #20]
 8003b40:	61fb      	str	r3, [r7, #28]
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	699b      	ldr	r3, [r3, #24]
 8003b48:	61fb      	str	r3, [r7, #28]
 8003b4a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	681a      	ldr	r2, [r3, #0]
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b5a:	601a      	str	r2, [r3, #0]
 8003b5c:	e178      	b.n	8003e50 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b62:	2b02      	cmp	r3, #2
 8003b64:	d11b      	bne.n	8003b9e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	681a      	ldr	r2, [r3, #0]
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b74:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	681a      	ldr	r2, [r3, #0]
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003b84:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b86:	2300      	movs	r3, #0
 8003b88:	61bb      	str	r3, [r7, #24]
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	695b      	ldr	r3, [r3, #20]
 8003b90:	61bb      	str	r3, [r7, #24]
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	699b      	ldr	r3, [r3, #24]
 8003b98:	61bb      	str	r3, [r7, #24]
 8003b9a:	69bb      	ldr	r3, [r7, #24]
 8003b9c:	e158      	b.n	8003e50 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	681a      	ldr	r2, [r3, #0]
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003bac:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bae:	2300      	movs	r3, #0
 8003bb0:	617b      	str	r3, [r7, #20]
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	695b      	ldr	r3, [r3, #20]
 8003bb8:	617b      	str	r3, [r7, #20]
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	699b      	ldr	r3, [r3, #24]
 8003bc0:	617b      	str	r3, [r7, #20]
 8003bc2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003bc4:	e144      	b.n	8003e50 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bca:	2b03      	cmp	r3, #3
 8003bcc:	f200 80f1 	bhi.w	8003db2 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bd4:	2b01      	cmp	r3, #1
 8003bd6:	d123      	bne.n	8003c20 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003bd8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003bda:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003bdc:	68f8      	ldr	r0, [r7, #12]
 8003bde:	f002 fc1d 	bl	800641c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003be2:	4603      	mov	r3, r0
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d001      	beq.n	8003bec <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8003be8:	2301      	movs	r3, #1
 8003bea:	e145      	b.n	8003e78 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	691a      	ldr	r2, [r3, #16]
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bf6:	b2d2      	uxtb	r2, r2
 8003bf8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bfe:	1c5a      	adds	r2, r3, #1
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c08:	3b01      	subs	r3, #1
 8003c0a:	b29a      	uxth	r2, r3
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c14:	b29b      	uxth	r3, r3
 8003c16:	3b01      	subs	r3, #1
 8003c18:	b29a      	uxth	r2, r3
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003c1e:	e117      	b.n	8003e50 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c24:	2b02      	cmp	r3, #2
 8003c26:	d14e      	bne.n	8003cc6 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003c28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c2a:	9300      	str	r3, [sp, #0]
 8003c2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c2e:	2200      	movs	r2, #0
 8003c30:	4906      	ldr	r1, [pc, #24]	@ (8003c4c <HAL_I2C_Master_Receive+0x22c>)
 8003c32:	68f8      	ldr	r0, [r7, #12]
 8003c34:	f002 fa16 	bl	8006064 <I2C_WaitOnFlagUntilTimeout>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d008      	beq.n	8003c50 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	e11a      	b.n	8003e78 <HAL_I2C_Master_Receive+0x458>
 8003c42:	bf00      	nop
 8003c44:	00100002 	.word	0x00100002
 8003c48:	ffff0000 	.word	0xffff0000
 8003c4c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	681a      	ldr	r2, [r3, #0]
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c5e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	691a      	ldr	r2, [r3, #16]
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c6a:	b2d2      	uxtb	r2, r2
 8003c6c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c72:	1c5a      	adds	r2, r3, #1
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c7c:	3b01      	subs	r3, #1
 8003c7e:	b29a      	uxth	r2, r3
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c88:	b29b      	uxth	r3, r3
 8003c8a:	3b01      	subs	r3, #1
 8003c8c:	b29a      	uxth	r2, r3
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	691a      	ldr	r2, [r3, #16]
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c9c:	b2d2      	uxtb	r2, r2
 8003c9e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ca4:	1c5a      	adds	r2, r3, #1
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cae:	3b01      	subs	r3, #1
 8003cb0:	b29a      	uxth	r2, r3
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cba:	b29b      	uxth	r3, r3
 8003cbc:	3b01      	subs	r3, #1
 8003cbe:	b29a      	uxth	r2, r3
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003cc4:	e0c4      	b.n	8003e50 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003cc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cc8:	9300      	str	r3, [sp, #0]
 8003cca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ccc:	2200      	movs	r2, #0
 8003cce:	496c      	ldr	r1, [pc, #432]	@ (8003e80 <HAL_I2C_Master_Receive+0x460>)
 8003cd0:	68f8      	ldr	r0, [r7, #12]
 8003cd2:	f002 f9c7 	bl	8006064 <I2C_WaitOnFlagUntilTimeout>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d001      	beq.n	8003ce0 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8003cdc:	2301      	movs	r3, #1
 8003cde:	e0cb      	b.n	8003e78 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	681a      	ldr	r2, [r3, #0]
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003cee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	691a      	ldr	r2, [r3, #16]
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cfa:	b2d2      	uxtb	r2, r2
 8003cfc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d02:	1c5a      	adds	r2, r3, #1
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d0c:	3b01      	subs	r3, #1
 8003d0e:	b29a      	uxth	r2, r3
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d18:	b29b      	uxth	r3, r3
 8003d1a:	3b01      	subs	r3, #1
 8003d1c:	b29a      	uxth	r2, r3
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d24:	9300      	str	r3, [sp, #0]
 8003d26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d28:	2200      	movs	r2, #0
 8003d2a:	4955      	ldr	r1, [pc, #340]	@ (8003e80 <HAL_I2C_Master_Receive+0x460>)
 8003d2c:	68f8      	ldr	r0, [r7, #12]
 8003d2e:	f002 f999 	bl	8006064 <I2C_WaitOnFlagUntilTimeout>
 8003d32:	4603      	mov	r3, r0
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d001      	beq.n	8003d3c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003d38:	2301      	movs	r3, #1
 8003d3a:	e09d      	b.n	8003e78 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	681a      	ldr	r2, [r3, #0]
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d4a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	691a      	ldr	r2, [r3, #16]
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d56:	b2d2      	uxtb	r2, r2
 8003d58:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d5e:	1c5a      	adds	r2, r3, #1
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d68:	3b01      	subs	r3, #1
 8003d6a:	b29a      	uxth	r2, r3
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d74:	b29b      	uxth	r3, r3
 8003d76:	3b01      	subs	r3, #1
 8003d78:	b29a      	uxth	r2, r3
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	691a      	ldr	r2, [r3, #16]
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d88:	b2d2      	uxtb	r2, r2
 8003d8a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d90:	1c5a      	adds	r2, r3, #1
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d9a:	3b01      	subs	r3, #1
 8003d9c:	b29a      	uxth	r2, r3
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003da6:	b29b      	uxth	r3, r3
 8003da8:	3b01      	subs	r3, #1
 8003daa:	b29a      	uxth	r2, r3
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003db0:	e04e      	b.n	8003e50 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003db2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003db4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003db6:	68f8      	ldr	r0, [r7, #12]
 8003db8:	f002 fb30 	bl	800641c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d001      	beq.n	8003dc6 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	e058      	b.n	8003e78 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	691a      	ldr	r2, [r3, #16]
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dd0:	b2d2      	uxtb	r2, r2
 8003dd2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dd8:	1c5a      	adds	r2, r3, #1
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003de2:	3b01      	subs	r3, #1
 8003de4:	b29a      	uxth	r2, r3
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003dee:	b29b      	uxth	r3, r3
 8003df0:	3b01      	subs	r3, #1
 8003df2:	b29a      	uxth	r2, r3
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	695b      	ldr	r3, [r3, #20]
 8003dfe:	f003 0304 	and.w	r3, r3, #4
 8003e02:	2b04      	cmp	r3, #4
 8003e04:	d124      	bne.n	8003e50 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e0a:	2b03      	cmp	r3, #3
 8003e0c:	d107      	bne.n	8003e1e <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	681a      	ldr	r2, [r3, #0]
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e1c:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	691a      	ldr	r2, [r3, #16]
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e28:	b2d2      	uxtb	r2, r2
 8003e2a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e30:	1c5a      	adds	r2, r3, #1
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e3a:	3b01      	subs	r3, #1
 8003e3c:	b29a      	uxth	r2, r3
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e46:	b29b      	uxth	r3, r3
 8003e48:	3b01      	subs	r3, #1
 8003e4a:	b29a      	uxth	r2, r3
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	f47f aeb6 	bne.w	8003bc6 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	2220      	movs	r2, #32
 8003e5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	2200      	movs	r2, #0
 8003e66:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003e72:	2300      	movs	r3, #0
 8003e74:	e000      	b.n	8003e78 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8003e76:	2302      	movs	r3, #2
  }
}
 8003e78:	4618      	mov	r0, r3
 8003e7a:	3728      	adds	r7, #40	@ 0x28
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	bd80      	pop	{r7, pc}
 8003e80:	00010004 	.word	0x00010004

08003e84 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b08c      	sub	sp, #48	@ 0x30
 8003e88:	af02      	add	r7, sp, #8
 8003e8a:	60f8      	str	r0, [r7, #12]
 8003e8c:	4608      	mov	r0, r1
 8003e8e:	4611      	mov	r1, r2
 8003e90:	461a      	mov	r2, r3
 8003e92:	4603      	mov	r3, r0
 8003e94:	817b      	strh	r3, [r7, #10]
 8003e96:	460b      	mov	r3, r1
 8003e98:	813b      	strh	r3, [r7, #8]
 8003e9a:	4613      	mov	r3, r2
 8003e9c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003e9e:	f7fe ffcf 	bl	8002e40 <HAL_GetTick>
 8003ea2:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003eaa:	b2db      	uxtb	r3, r3
 8003eac:	2b20      	cmp	r3, #32
 8003eae:	f040 8214 	bne.w	80042da <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003eb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eb4:	9300      	str	r3, [sp, #0]
 8003eb6:	2319      	movs	r3, #25
 8003eb8:	2201      	movs	r2, #1
 8003eba:	497b      	ldr	r1, [pc, #492]	@ (80040a8 <HAL_I2C_Mem_Read+0x224>)
 8003ebc:	68f8      	ldr	r0, [r7, #12]
 8003ebe:	f002 f8d1 	bl	8006064 <I2C_WaitOnFlagUntilTimeout>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d001      	beq.n	8003ecc <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003ec8:	2302      	movs	r3, #2
 8003eca:	e207      	b.n	80042dc <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ed2:	2b01      	cmp	r3, #1
 8003ed4:	d101      	bne.n	8003eda <HAL_I2C_Mem_Read+0x56>
 8003ed6:	2302      	movs	r3, #2
 8003ed8:	e200      	b.n	80042dc <HAL_I2C_Mem_Read+0x458>
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	2201      	movs	r2, #1
 8003ede:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f003 0301 	and.w	r3, r3, #1
 8003eec:	2b01      	cmp	r3, #1
 8003eee:	d007      	beq.n	8003f00 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	681a      	ldr	r2, [r3, #0]
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f042 0201 	orr.w	r2, r2, #1
 8003efe:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	681a      	ldr	r2, [r3, #0]
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003f0e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	2222      	movs	r2, #34	@ 0x22
 8003f14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	2240      	movs	r2, #64	@ 0x40
 8003f1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	2200      	movs	r2, #0
 8003f24:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003f2a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003f30:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f36:	b29a      	uxth	r2, r3
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	4a5b      	ldr	r2, [pc, #364]	@ (80040ac <HAL_I2C_Mem_Read+0x228>)
 8003f40:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003f42:	88f8      	ldrh	r0, [r7, #6]
 8003f44:	893a      	ldrh	r2, [r7, #8]
 8003f46:	8979      	ldrh	r1, [r7, #10]
 8003f48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f4a:	9301      	str	r3, [sp, #4]
 8003f4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f4e:	9300      	str	r3, [sp, #0]
 8003f50:	4603      	mov	r3, r0
 8003f52:	68f8      	ldr	r0, [r7, #12]
 8003f54:	f001 fef6 	bl	8005d44 <I2C_RequestMemoryRead>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d001      	beq.n	8003f62 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	e1bc      	b.n	80042dc <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d113      	bne.n	8003f92 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	623b      	str	r3, [r7, #32]
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	695b      	ldr	r3, [r3, #20]
 8003f74:	623b      	str	r3, [r7, #32]
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	699b      	ldr	r3, [r3, #24]
 8003f7c:	623b      	str	r3, [r7, #32]
 8003f7e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	681a      	ldr	r2, [r3, #0]
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f8e:	601a      	str	r2, [r3, #0]
 8003f90:	e190      	b.n	80042b4 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f96:	2b01      	cmp	r3, #1
 8003f98:	d11b      	bne.n	8003fd2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	681a      	ldr	r2, [r3, #0]
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003fa8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003faa:	2300      	movs	r3, #0
 8003fac:	61fb      	str	r3, [r7, #28]
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	695b      	ldr	r3, [r3, #20]
 8003fb4:	61fb      	str	r3, [r7, #28]
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	699b      	ldr	r3, [r3, #24]
 8003fbc:	61fb      	str	r3, [r7, #28]
 8003fbe:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	681a      	ldr	r2, [r3, #0]
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003fce:	601a      	str	r2, [r3, #0]
 8003fd0:	e170      	b.n	80042b4 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fd6:	2b02      	cmp	r3, #2
 8003fd8:	d11b      	bne.n	8004012 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	681a      	ldr	r2, [r3, #0]
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003fe8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	681a      	ldr	r2, [r3, #0]
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003ff8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	61bb      	str	r3, [r7, #24]
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	695b      	ldr	r3, [r3, #20]
 8004004:	61bb      	str	r3, [r7, #24]
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	699b      	ldr	r3, [r3, #24]
 800400c:	61bb      	str	r3, [r7, #24]
 800400e:	69bb      	ldr	r3, [r7, #24]
 8004010:	e150      	b.n	80042b4 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004012:	2300      	movs	r3, #0
 8004014:	617b      	str	r3, [r7, #20]
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	695b      	ldr	r3, [r3, #20]
 800401c:	617b      	str	r3, [r7, #20]
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	699b      	ldr	r3, [r3, #24]
 8004024:	617b      	str	r3, [r7, #20]
 8004026:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004028:	e144      	b.n	80042b4 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800402e:	2b03      	cmp	r3, #3
 8004030:	f200 80f1 	bhi.w	8004216 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004038:	2b01      	cmp	r3, #1
 800403a:	d123      	bne.n	8004084 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800403c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800403e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004040:	68f8      	ldr	r0, [r7, #12]
 8004042:	f002 f9eb 	bl	800641c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004046:	4603      	mov	r3, r0
 8004048:	2b00      	cmp	r3, #0
 800404a:	d001      	beq.n	8004050 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800404c:	2301      	movs	r3, #1
 800404e:	e145      	b.n	80042dc <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	691a      	ldr	r2, [r3, #16]
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800405a:	b2d2      	uxtb	r2, r2
 800405c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004062:	1c5a      	adds	r2, r3, #1
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800406c:	3b01      	subs	r3, #1
 800406e:	b29a      	uxth	r2, r3
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004078:	b29b      	uxth	r3, r3
 800407a:	3b01      	subs	r3, #1
 800407c:	b29a      	uxth	r2, r3
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004082:	e117      	b.n	80042b4 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004088:	2b02      	cmp	r3, #2
 800408a:	d14e      	bne.n	800412a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800408c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800408e:	9300      	str	r3, [sp, #0]
 8004090:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004092:	2200      	movs	r2, #0
 8004094:	4906      	ldr	r1, [pc, #24]	@ (80040b0 <HAL_I2C_Mem_Read+0x22c>)
 8004096:	68f8      	ldr	r0, [r7, #12]
 8004098:	f001 ffe4 	bl	8006064 <I2C_WaitOnFlagUntilTimeout>
 800409c:	4603      	mov	r3, r0
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d008      	beq.n	80040b4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80040a2:	2301      	movs	r3, #1
 80040a4:	e11a      	b.n	80042dc <HAL_I2C_Mem_Read+0x458>
 80040a6:	bf00      	nop
 80040a8:	00100002 	.word	0x00100002
 80040ac:	ffff0000 	.word	0xffff0000
 80040b0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	681a      	ldr	r2, [r3, #0]
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80040c2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	691a      	ldr	r2, [r3, #16]
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040ce:	b2d2      	uxtb	r2, r2
 80040d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040d6:	1c5a      	adds	r2, r3, #1
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040e0:	3b01      	subs	r3, #1
 80040e2:	b29a      	uxth	r2, r3
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040ec:	b29b      	uxth	r3, r3
 80040ee:	3b01      	subs	r3, #1
 80040f0:	b29a      	uxth	r2, r3
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	691a      	ldr	r2, [r3, #16]
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004100:	b2d2      	uxtb	r2, r2
 8004102:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004108:	1c5a      	adds	r2, r3, #1
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004112:	3b01      	subs	r3, #1
 8004114:	b29a      	uxth	r2, r3
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800411e:	b29b      	uxth	r3, r3
 8004120:	3b01      	subs	r3, #1
 8004122:	b29a      	uxth	r2, r3
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004128:	e0c4      	b.n	80042b4 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800412a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800412c:	9300      	str	r3, [sp, #0]
 800412e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004130:	2200      	movs	r2, #0
 8004132:	496c      	ldr	r1, [pc, #432]	@ (80042e4 <HAL_I2C_Mem_Read+0x460>)
 8004134:	68f8      	ldr	r0, [r7, #12]
 8004136:	f001 ff95 	bl	8006064 <I2C_WaitOnFlagUntilTimeout>
 800413a:	4603      	mov	r3, r0
 800413c:	2b00      	cmp	r3, #0
 800413e:	d001      	beq.n	8004144 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004140:	2301      	movs	r3, #1
 8004142:	e0cb      	b.n	80042dc <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	681a      	ldr	r2, [r3, #0]
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004152:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	691a      	ldr	r2, [r3, #16]
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800415e:	b2d2      	uxtb	r2, r2
 8004160:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004166:	1c5a      	adds	r2, r3, #1
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004170:	3b01      	subs	r3, #1
 8004172:	b29a      	uxth	r2, r3
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800417c:	b29b      	uxth	r3, r3
 800417e:	3b01      	subs	r3, #1
 8004180:	b29a      	uxth	r2, r3
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004188:	9300      	str	r3, [sp, #0]
 800418a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800418c:	2200      	movs	r2, #0
 800418e:	4955      	ldr	r1, [pc, #340]	@ (80042e4 <HAL_I2C_Mem_Read+0x460>)
 8004190:	68f8      	ldr	r0, [r7, #12]
 8004192:	f001 ff67 	bl	8006064 <I2C_WaitOnFlagUntilTimeout>
 8004196:	4603      	mov	r3, r0
 8004198:	2b00      	cmp	r3, #0
 800419a:	d001      	beq.n	80041a0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800419c:	2301      	movs	r3, #1
 800419e:	e09d      	b.n	80042dc <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	681a      	ldr	r2, [r3, #0]
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80041ae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	691a      	ldr	r2, [r3, #16]
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041ba:	b2d2      	uxtb	r2, r2
 80041bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041c2:	1c5a      	adds	r2, r3, #1
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041cc:	3b01      	subs	r3, #1
 80041ce:	b29a      	uxth	r2, r3
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041d8:	b29b      	uxth	r3, r3
 80041da:	3b01      	subs	r3, #1
 80041dc:	b29a      	uxth	r2, r3
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	691a      	ldr	r2, [r3, #16]
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041ec:	b2d2      	uxtb	r2, r2
 80041ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041f4:	1c5a      	adds	r2, r3, #1
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041fe:	3b01      	subs	r3, #1
 8004200:	b29a      	uxth	r2, r3
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800420a:	b29b      	uxth	r3, r3
 800420c:	3b01      	subs	r3, #1
 800420e:	b29a      	uxth	r2, r3
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004214:	e04e      	b.n	80042b4 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004216:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004218:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800421a:	68f8      	ldr	r0, [r7, #12]
 800421c:	f002 f8fe 	bl	800641c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004220:	4603      	mov	r3, r0
 8004222:	2b00      	cmp	r3, #0
 8004224:	d001      	beq.n	800422a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004226:	2301      	movs	r3, #1
 8004228:	e058      	b.n	80042dc <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	691a      	ldr	r2, [r3, #16]
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004234:	b2d2      	uxtb	r2, r2
 8004236:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800423c:	1c5a      	adds	r2, r3, #1
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004246:	3b01      	subs	r3, #1
 8004248:	b29a      	uxth	r2, r3
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004252:	b29b      	uxth	r3, r3
 8004254:	3b01      	subs	r3, #1
 8004256:	b29a      	uxth	r2, r3
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	695b      	ldr	r3, [r3, #20]
 8004262:	f003 0304 	and.w	r3, r3, #4
 8004266:	2b04      	cmp	r3, #4
 8004268:	d124      	bne.n	80042b4 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800426e:	2b03      	cmp	r3, #3
 8004270:	d107      	bne.n	8004282 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	681a      	ldr	r2, [r3, #0]
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004280:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	691a      	ldr	r2, [r3, #16]
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800428c:	b2d2      	uxtb	r2, r2
 800428e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004294:	1c5a      	adds	r2, r3, #1
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800429e:	3b01      	subs	r3, #1
 80042a0:	b29a      	uxth	r2, r3
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042aa:	b29b      	uxth	r3, r3
 80042ac:	3b01      	subs	r3, #1
 80042ae:	b29a      	uxth	r2, r3
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	f47f aeb6 	bne.w	800402a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	2220      	movs	r2, #32
 80042c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	2200      	movs	r2, #0
 80042ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	2200      	movs	r2, #0
 80042d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80042d6:	2300      	movs	r3, #0
 80042d8:	e000      	b.n	80042dc <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 80042da:	2302      	movs	r3, #2
  }
}
 80042dc:	4618      	mov	r0, r3
 80042de:	3728      	adds	r7, #40	@ 0x28
 80042e0:	46bd      	mov	sp, r7
 80042e2:	bd80      	pop	{r7, pc}
 80042e4:	00010004 	.word	0x00010004

080042e8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b088      	sub	sp, #32
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80042f0:	2300      	movs	r3, #0
 80042f2:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004300:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004308:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004310:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004312:	7bfb      	ldrb	r3, [r7, #15]
 8004314:	2b10      	cmp	r3, #16
 8004316:	d003      	beq.n	8004320 <HAL_I2C_EV_IRQHandler+0x38>
 8004318:	7bfb      	ldrb	r3, [r7, #15]
 800431a:	2b40      	cmp	r3, #64	@ 0x40
 800431c:	f040 80b1 	bne.w	8004482 <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	699b      	ldr	r3, [r3, #24]
 8004326:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	695b      	ldr	r3, [r3, #20]
 800432e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8004330:	69fb      	ldr	r3, [r7, #28]
 8004332:	f003 0301 	and.w	r3, r3, #1
 8004336:	2b00      	cmp	r3, #0
 8004338:	d10d      	bne.n	8004356 <HAL_I2C_EV_IRQHandler+0x6e>
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8004340:	d003      	beq.n	800434a <HAL_I2C_EV_IRQHandler+0x62>
 8004342:	693b      	ldr	r3, [r7, #16]
 8004344:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8004348:	d101      	bne.n	800434e <HAL_I2C_EV_IRQHandler+0x66>
 800434a:	2301      	movs	r3, #1
 800434c:	e000      	b.n	8004350 <HAL_I2C_EV_IRQHandler+0x68>
 800434e:	2300      	movs	r3, #0
 8004350:	2b01      	cmp	r3, #1
 8004352:	f000 8114 	beq.w	800457e <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004356:	69fb      	ldr	r3, [r7, #28]
 8004358:	f003 0301 	and.w	r3, r3, #1
 800435c:	2b00      	cmp	r3, #0
 800435e:	d00b      	beq.n	8004378 <HAL_I2C_EV_IRQHandler+0x90>
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004366:	2b00      	cmp	r3, #0
 8004368:	d006      	beq.n	8004378 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800436a:	6878      	ldr	r0, [r7, #4]
 800436c:	f002 f8e2 	bl	8006534 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8004370:	6878      	ldr	r0, [r7, #4]
 8004372:	f000 fd7a 	bl	8004e6a <I2C_Master_SB>
 8004376:	e083      	b.n	8004480 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004378:	69fb      	ldr	r3, [r7, #28]
 800437a:	f003 0308 	and.w	r3, r3, #8
 800437e:	2b00      	cmp	r3, #0
 8004380:	d008      	beq.n	8004394 <HAL_I2C_EV_IRQHandler+0xac>
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004388:	2b00      	cmp	r3, #0
 800438a:	d003      	beq.n	8004394 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 800438c:	6878      	ldr	r0, [r7, #4]
 800438e:	f000 fdf2 	bl	8004f76 <I2C_Master_ADD10>
 8004392:	e075      	b.n	8004480 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004394:	69fb      	ldr	r3, [r7, #28]
 8004396:	f003 0302 	and.w	r3, r3, #2
 800439a:	2b00      	cmp	r3, #0
 800439c:	d008      	beq.n	80043b0 <HAL_I2C_EV_IRQHandler+0xc8>
 800439e:	697b      	ldr	r3, [r7, #20]
 80043a0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d003      	beq.n	80043b0 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 80043a8:	6878      	ldr	r0, [r7, #4]
 80043aa:	f000 fe0e 	bl	8004fca <I2C_Master_ADDR>
 80043ae:	e067      	b.n	8004480 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80043b0:	69bb      	ldr	r3, [r7, #24]
 80043b2:	f003 0304 	and.w	r3, r3, #4
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d036      	beq.n	8004428 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80043c4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80043c8:	f000 80db 	beq.w	8004582 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80043cc:	69fb      	ldr	r3, [r7, #28]
 80043ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d00d      	beq.n	80043f2 <HAL_I2C_EV_IRQHandler+0x10a>
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d008      	beq.n	80043f2 <HAL_I2C_EV_IRQHandler+0x10a>
 80043e0:	69fb      	ldr	r3, [r7, #28]
 80043e2:	f003 0304 	and.w	r3, r3, #4
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d103      	bne.n	80043f2 <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80043ea:	6878      	ldr	r0, [r7, #4]
 80043ec:	f000 f9d6 	bl	800479c <I2C_MasterTransmit_TXE>
 80043f0:	e046      	b.n	8004480 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80043f2:	69fb      	ldr	r3, [r7, #28]
 80043f4:	f003 0304 	and.w	r3, r3, #4
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	f000 80c2 	beq.w	8004582 <HAL_I2C_EV_IRQHandler+0x29a>
 80043fe:	697b      	ldr	r3, [r7, #20]
 8004400:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004404:	2b00      	cmp	r3, #0
 8004406:	f000 80bc 	beq.w	8004582 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800440a:	7bbb      	ldrb	r3, [r7, #14]
 800440c:	2b21      	cmp	r3, #33	@ 0x21
 800440e:	d103      	bne.n	8004418 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8004410:	6878      	ldr	r0, [r7, #4]
 8004412:	f000 fa5f 	bl	80048d4 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004416:	e0b4      	b.n	8004582 <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8004418:	7bfb      	ldrb	r3, [r7, #15]
 800441a:	2b40      	cmp	r3, #64	@ 0x40
 800441c:	f040 80b1 	bne.w	8004582 <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004420:	6878      	ldr	r0, [r7, #4]
 8004422:	f000 facd 	bl	80049c0 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004426:	e0ac      	b.n	8004582 <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004432:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004436:	f000 80a4 	beq.w	8004582 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800443a:	69fb      	ldr	r3, [r7, #28]
 800443c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004440:	2b00      	cmp	r3, #0
 8004442:	d00d      	beq.n	8004460 <HAL_I2C_EV_IRQHandler+0x178>
 8004444:	697b      	ldr	r3, [r7, #20]
 8004446:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800444a:	2b00      	cmp	r3, #0
 800444c:	d008      	beq.n	8004460 <HAL_I2C_EV_IRQHandler+0x178>
 800444e:	69fb      	ldr	r3, [r7, #28]
 8004450:	f003 0304 	and.w	r3, r3, #4
 8004454:	2b00      	cmp	r3, #0
 8004456:	d103      	bne.n	8004460 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8004458:	6878      	ldr	r0, [r7, #4]
 800445a:	f000 fb49 	bl	8004af0 <I2C_MasterReceive_RXNE>
 800445e:	e00f      	b.n	8004480 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004460:	69fb      	ldr	r3, [r7, #28]
 8004462:	f003 0304 	and.w	r3, r3, #4
 8004466:	2b00      	cmp	r3, #0
 8004468:	f000 808b 	beq.w	8004582 <HAL_I2C_EV_IRQHandler+0x29a>
 800446c:	697b      	ldr	r3, [r7, #20]
 800446e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004472:	2b00      	cmp	r3, #0
 8004474:	f000 8085 	beq.w	8004582 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8004478:	6878      	ldr	r0, [r7, #4]
 800447a:	f000 fc01 	bl	8004c80 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800447e:	e080      	b.n	8004582 <HAL_I2C_EV_IRQHandler+0x29a>
 8004480:	e07f      	b.n	8004582 <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004486:	2b00      	cmp	r3, #0
 8004488:	d004      	beq.n	8004494 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	695b      	ldr	r3, [r3, #20]
 8004490:	61fb      	str	r3, [r7, #28]
 8004492:	e007      	b.n	80044a4 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	699b      	ldr	r3, [r3, #24]
 800449a:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	695b      	ldr	r3, [r3, #20]
 80044a2:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80044a4:	69fb      	ldr	r3, [r7, #28]
 80044a6:	f003 0302 	and.w	r3, r3, #2
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d011      	beq.n	80044d2 <HAL_I2C_EV_IRQHandler+0x1ea>
 80044ae:	697b      	ldr	r3, [r7, #20]
 80044b0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d00c      	beq.n	80044d2 <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d003      	beq.n	80044c8 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	699b      	ldr	r3, [r3, #24]
 80044c6:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80044c8:	69b9      	ldr	r1, [r7, #24]
 80044ca:	6878      	ldr	r0, [r7, #4]
 80044cc:	f000 ffcc 	bl	8005468 <I2C_Slave_ADDR>
 80044d0:	e05a      	b.n	8004588 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80044d2:	69fb      	ldr	r3, [r7, #28]
 80044d4:	f003 0310 	and.w	r3, r3, #16
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d008      	beq.n	80044ee <HAL_I2C_EV_IRQHandler+0x206>
 80044dc:	697b      	ldr	r3, [r7, #20]
 80044de:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d003      	beq.n	80044ee <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 80044e6:	6878      	ldr	r0, [r7, #4]
 80044e8:	f001 f806 	bl	80054f8 <I2C_Slave_STOPF>
 80044ec:	e04c      	b.n	8004588 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80044ee:	7bbb      	ldrb	r3, [r7, #14]
 80044f0:	2b21      	cmp	r3, #33	@ 0x21
 80044f2:	d002      	beq.n	80044fa <HAL_I2C_EV_IRQHandler+0x212>
 80044f4:	7bbb      	ldrb	r3, [r7, #14]
 80044f6:	2b29      	cmp	r3, #41	@ 0x29
 80044f8:	d120      	bne.n	800453c <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80044fa:	69fb      	ldr	r3, [r7, #28]
 80044fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004500:	2b00      	cmp	r3, #0
 8004502:	d00d      	beq.n	8004520 <HAL_I2C_EV_IRQHandler+0x238>
 8004504:	697b      	ldr	r3, [r7, #20]
 8004506:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800450a:	2b00      	cmp	r3, #0
 800450c:	d008      	beq.n	8004520 <HAL_I2C_EV_IRQHandler+0x238>
 800450e:	69fb      	ldr	r3, [r7, #28]
 8004510:	f003 0304 	and.w	r3, r3, #4
 8004514:	2b00      	cmp	r3, #0
 8004516:	d103      	bne.n	8004520 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8004518:	6878      	ldr	r0, [r7, #4]
 800451a:	f000 fee7 	bl	80052ec <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800451e:	e032      	b.n	8004586 <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004520:	69fb      	ldr	r3, [r7, #28]
 8004522:	f003 0304 	and.w	r3, r3, #4
 8004526:	2b00      	cmp	r3, #0
 8004528:	d02d      	beq.n	8004586 <HAL_I2C_EV_IRQHandler+0x29e>
 800452a:	697b      	ldr	r3, [r7, #20]
 800452c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004530:	2b00      	cmp	r3, #0
 8004532:	d028      	beq.n	8004586 <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8004534:	6878      	ldr	r0, [r7, #4]
 8004536:	f000 ff16 	bl	8005366 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800453a:	e024      	b.n	8004586 <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800453c:	69fb      	ldr	r3, [r7, #28]
 800453e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004542:	2b00      	cmp	r3, #0
 8004544:	d00d      	beq.n	8004562 <HAL_I2C_EV_IRQHandler+0x27a>
 8004546:	697b      	ldr	r3, [r7, #20]
 8004548:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800454c:	2b00      	cmp	r3, #0
 800454e:	d008      	beq.n	8004562 <HAL_I2C_EV_IRQHandler+0x27a>
 8004550:	69fb      	ldr	r3, [r7, #28]
 8004552:	f003 0304 	and.w	r3, r3, #4
 8004556:	2b00      	cmp	r3, #0
 8004558:	d103      	bne.n	8004562 <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800455a:	6878      	ldr	r0, [r7, #4]
 800455c:	f000 ff24 	bl	80053a8 <I2C_SlaveReceive_RXNE>
 8004560:	e012      	b.n	8004588 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004562:	69fb      	ldr	r3, [r7, #28]
 8004564:	f003 0304 	and.w	r3, r3, #4
 8004568:	2b00      	cmp	r3, #0
 800456a:	d00d      	beq.n	8004588 <HAL_I2C_EV_IRQHandler+0x2a0>
 800456c:	697b      	ldr	r3, [r7, #20]
 800456e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004572:	2b00      	cmp	r3, #0
 8004574:	d008      	beq.n	8004588 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8004576:	6878      	ldr	r0, [r7, #4]
 8004578:	f000 ff54 	bl	8005424 <I2C_SlaveReceive_BTF>
 800457c:	e004      	b.n	8004588 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 800457e:	bf00      	nop
 8004580:	e002      	b.n	8004588 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004582:	bf00      	nop
 8004584:	e000      	b.n	8004588 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004586:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8004588:	3720      	adds	r7, #32
 800458a:	46bd      	mov	sp, r7
 800458c:	bd80      	pop	{r7, pc}

0800458e <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800458e:	b580      	push	{r7, lr}
 8004590:	b08a      	sub	sp, #40	@ 0x28
 8004592:	af00      	add	r7, sp, #0
 8004594:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	695b      	ldr	r3, [r3, #20]
 800459c:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80045a6:	2300      	movs	r3, #0
 80045a8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80045b0:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80045b2:	6a3b      	ldr	r3, [r7, #32]
 80045b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d00d      	beq.n	80045d8 <HAL_I2C_ER_IRQHandler+0x4a>
 80045bc:	69fb      	ldr	r3, [r7, #28]
 80045be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d008      	beq.n	80045d8 <HAL_I2C_ER_IRQHandler+0x4a>
  {
    error |= HAL_I2C_ERROR_BERR;
 80045c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045c8:	f043 0301 	orr.w	r3, r3, #1
 80045cc:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80045d6:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80045d8:	6a3b      	ldr	r3, [r7, #32]
 80045da:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d00d      	beq.n	80045fe <HAL_I2C_ER_IRQHandler+0x70>
 80045e2:	69fb      	ldr	r3, [r7, #28]
 80045e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d008      	beq.n	80045fe <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80045ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045ee:	f043 0302 	orr.w	r3, r3, #2
 80045f2:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 80045fc:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80045fe:	6a3b      	ldr	r3, [r7, #32]
 8004600:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004604:	2b00      	cmp	r3, #0
 8004606:	d03e      	beq.n	8004686 <HAL_I2C_ER_IRQHandler+0xf8>
 8004608:	69fb      	ldr	r3, [r7, #28]
 800460a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800460e:	2b00      	cmp	r3, #0
 8004610:	d039      	beq.n	8004686 <HAL_I2C_ER_IRQHandler+0xf8>
  {
    tmp1 = CurrentMode;
 8004612:	7efb      	ldrb	r3, [r7, #27]
 8004614:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800461a:	b29b      	uxth	r3, r3
 800461c:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004624:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800462a:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800462c:	7ebb      	ldrb	r3, [r7, #26]
 800462e:	2b20      	cmp	r3, #32
 8004630:	d112      	bne.n	8004658 <HAL_I2C_ER_IRQHandler+0xca>
 8004632:	697b      	ldr	r3, [r7, #20]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d10f      	bne.n	8004658 <HAL_I2C_ER_IRQHandler+0xca>
 8004638:	7cfb      	ldrb	r3, [r7, #19]
 800463a:	2b21      	cmp	r3, #33	@ 0x21
 800463c:	d008      	beq.n	8004650 <HAL_I2C_ER_IRQHandler+0xc2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800463e:	7cfb      	ldrb	r3, [r7, #19]
 8004640:	2b29      	cmp	r3, #41	@ 0x29
 8004642:	d005      	beq.n	8004650 <HAL_I2C_ER_IRQHandler+0xc2>
 8004644:	7cfb      	ldrb	r3, [r7, #19]
 8004646:	2b28      	cmp	r3, #40	@ 0x28
 8004648:	d106      	bne.n	8004658 <HAL_I2C_ER_IRQHandler+0xca>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	2b21      	cmp	r3, #33	@ 0x21
 800464e:	d103      	bne.n	8004658 <HAL_I2C_ER_IRQHandler+0xca>
    {
      I2C_Slave_AF(hi2c);
 8004650:	6878      	ldr	r0, [r7, #4]
 8004652:	f001 f881 	bl	8005758 <I2C_Slave_AF>
 8004656:	e016      	b.n	8004686 <HAL_I2C_ER_IRQHandler+0xf8>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004660:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8004662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004664:	f043 0304 	orr.w	r3, r3, #4
 8004668:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800466a:	7efb      	ldrb	r3, [r7, #27]
 800466c:	2b10      	cmp	r3, #16
 800466e:	d002      	beq.n	8004676 <HAL_I2C_ER_IRQHandler+0xe8>
 8004670:	7efb      	ldrb	r3, [r7, #27]
 8004672:	2b40      	cmp	r3, #64	@ 0x40
 8004674:	d107      	bne.n	8004686 <HAL_I2C_ER_IRQHandler+0xf8>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	681a      	ldr	r2, [r3, #0]
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004684:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004686:	6a3b      	ldr	r3, [r7, #32]
 8004688:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800468c:	2b00      	cmp	r3, #0
 800468e:	d00d      	beq.n	80046ac <HAL_I2C_ER_IRQHandler+0x11e>
 8004690:	69fb      	ldr	r3, [r7, #28]
 8004692:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004696:	2b00      	cmp	r3, #0
 8004698:	d008      	beq.n	80046ac <HAL_I2C_ER_IRQHandler+0x11e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800469a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800469c:	f043 0308 	orr.w	r3, r3, #8
 80046a0:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 80046aa:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80046ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d008      	beq.n	80046c4 <HAL_I2C_ER_IRQHandler+0x136>
  {
    hi2c->ErrorCode |= error;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80046b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046b8:	431a      	orrs	r2, r3
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 80046be:	6878      	ldr	r0, [r7, #4]
 80046c0:	f001 f8be 	bl	8005840 <I2C_ITError>
  }
}
 80046c4:	bf00      	nop
 80046c6:	3728      	adds	r7, #40	@ 0x28
 80046c8:	46bd      	mov	sp, r7
 80046ca:	bd80      	pop	{r7, pc}

080046cc <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80046cc:	b480      	push	{r7}
 80046ce:	b083      	sub	sp, #12
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80046d4:	bf00      	nop
 80046d6:	370c      	adds	r7, #12
 80046d8:	46bd      	mov	sp, r7
 80046da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046de:	4770      	bx	lr

080046e0 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80046e0:	b480      	push	{r7}
 80046e2:	b083      	sub	sp, #12
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80046e8:	bf00      	nop
 80046ea:	370c      	adds	r7, #12
 80046ec:	46bd      	mov	sp, r7
 80046ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f2:	4770      	bx	lr

080046f4 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80046f4:	b480      	push	{r7}
 80046f6:	b083      	sub	sp, #12
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80046fc:	bf00      	nop
 80046fe:	370c      	adds	r7, #12
 8004700:	46bd      	mov	sp, r7
 8004702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004706:	4770      	bx	lr

08004708 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004708:	b480      	push	{r7}
 800470a:	b083      	sub	sp, #12
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004710:	bf00      	nop
 8004712:	370c      	adds	r7, #12
 8004714:	46bd      	mov	sp, r7
 8004716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471a:	4770      	bx	lr

0800471c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800471c:	b480      	push	{r7}
 800471e:	b083      	sub	sp, #12
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
 8004724:	460b      	mov	r3, r1
 8004726:	70fb      	strb	r3, [r7, #3]
 8004728:	4613      	mov	r3, r2
 800472a:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800472c:	bf00      	nop
 800472e:	370c      	adds	r7, #12
 8004730:	46bd      	mov	sp, r7
 8004732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004736:	4770      	bx	lr

08004738 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004738:	b480      	push	{r7}
 800473a:	b083      	sub	sp, #12
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8004740:	bf00      	nop
 8004742:	370c      	adds	r7, #12
 8004744:	46bd      	mov	sp, r7
 8004746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474a:	4770      	bx	lr

0800474c <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800474c:	b480      	push	{r7}
 800474e:	b083      	sub	sp, #12
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8004754:	bf00      	nop
 8004756:	370c      	adds	r7, #12
 8004758:	46bd      	mov	sp, r7
 800475a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475e:	4770      	bx	lr

08004760 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004760:	b480      	push	{r7}
 8004762:	b083      	sub	sp, #12
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8004768:	bf00      	nop
 800476a:	370c      	adds	r7, #12
 800476c:	46bd      	mov	sp, r7
 800476e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004772:	4770      	bx	lr

08004774 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004774:	b480      	push	{r7}
 8004776:	b083      	sub	sp, #12
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800477c:	bf00      	nop
 800477e:	370c      	adds	r7, #12
 8004780:	46bd      	mov	sp, r7
 8004782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004786:	4770      	bx	lr

08004788 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004788:	b480      	push	{r7}
 800478a:	b083      	sub	sp, #12
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004790:	bf00      	nop
 8004792:	370c      	adds	r7, #12
 8004794:	46bd      	mov	sp, r7
 8004796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479a:	4770      	bx	lr

0800479c <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b084      	sub	sp, #16
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80047aa:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80047b2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047b8:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d150      	bne.n	8004864 <I2C_MasterTransmit_TXE+0xc8>
 80047c2:	7bfb      	ldrb	r3, [r7, #15]
 80047c4:	2b21      	cmp	r3, #33	@ 0x21
 80047c6:	d14d      	bne.n	8004864 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80047c8:	68bb      	ldr	r3, [r7, #8]
 80047ca:	2b08      	cmp	r3, #8
 80047cc:	d01d      	beq.n	800480a <I2C_MasterTransmit_TXE+0x6e>
 80047ce:	68bb      	ldr	r3, [r7, #8]
 80047d0:	2b20      	cmp	r3, #32
 80047d2:	d01a      	beq.n	800480a <I2C_MasterTransmit_TXE+0x6e>
 80047d4:	68bb      	ldr	r3, [r7, #8]
 80047d6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80047da:	d016      	beq.n	800480a <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	685a      	ldr	r2, [r3, #4]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80047ea:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2211      	movs	r2, #17
 80047f0:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2200      	movs	r2, #0
 80047f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2220      	movs	r2, #32
 80047fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004802:	6878      	ldr	r0, [r7, #4]
 8004804:	f7ff ff62 	bl	80046cc <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004808:	e060      	b.n	80048cc <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	685a      	ldr	r2, [r3, #4]
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004818:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	681a      	ldr	r2, [r3, #0]
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004828:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2200      	movs	r2, #0
 800482e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2220      	movs	r2, #32
 8004834:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800483e:	b2db      	uxtb	r3, r3
 8004840:	2b40      	cmp	r3, #64	@ 0x40
 8004842:	d107      	bne.n	8004854 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2200      	movs	r2, #0
 8004848:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800484c:	6878      	ldr	r0, [r7, #4]
 800484e:	f7ff ff7d 	bl	800474c <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004852:	e03b      	b.n	80048cc <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2200      	movs	r2, #0
 8004858:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800485c:	6878      	ldr	r0, [r7, #4]
 800485e:	f7ff ff35 	bl	80046cc <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004862:	e033      	b.n	80048cc <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8004864:	7bfb      	ldrb	r3, [r7, #15]
 8004866:	2b21      	cmp	r3, #33	@ 0x21
 8004868:	d005      	beq.n	8004876 <I2C_MasterTransmit_TXE+0xda>
 800486a:	7bbb      	ldrb	r3, [r7, #14]
 800486c:	2b40      	cmp	r3, #64	@ 0x40
 800486e:	d12d      	bne.n	80048cc <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8004870:	7bfb      	ldrb	r3, [r7, #15]
 8004872:	2b22      	cmp	r3, #34	@ 0x22
 8004874:	d12a      	bne.n	80048cc <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800487a:	b29b      	uxth	r3, r3
 800487c:	2b00      	cmp	r3, #0
 800487e:	d108      	bne.n	8004892 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	685a      	ldr	r2, [r3, #4]
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800488e:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004890:	e01c      	b.n	80048cc <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004898:	b2db      	uxtb	r3, r3
 800489a:	2b40      	cmp	r3, #64	@ 0x40
 800489c:	d103      	bne.n	80048a6 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800489e:	6878      	ldr	r0, [r7, #4]
 80048a0:	f000 f88e 	bl	80049c0 <I2C_MemoryTransmit_TXE_BTF>
}
 80048a4:	e012      	b.n	80048cc <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048aa:	781a      	ldrb	r2, [r3, #0]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048b6:	1c5a      	adds	r2, r3, #1
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048c0:	b29b      	uxth	r3, r3
 80048c2:	3b01      	subs	r3, #1
 80048c4:	b29a      	uxth	r2, r3
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80048ca:	e7ff      	b.n	80048cc <I2C_MasterTransmit_TXE+0x130>
 80048cc:	bf00      	nop
 80048ce:	3710      	adds	r7, #16
 80048d0:	46bd      	mov	sp, r7
 80048d2:	bd80      	pop	{r7, pc}

080048d4 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b084      	sub	sp, #16
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048e0:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80048e8:	b2db      	uxtb	r3, r3
 80048ea:	2b21      	cmp	r3, #33	@ 0x21
 80048ec:	d164      	bne.n	80049b8 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048f2:	b29b      	uxth	r3, r3
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d012      	beq.n	800491e <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048fc:	781a      	ldrb	r2, [r3, #0]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004908:	1c5a      	adds	r2, r3, #1
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004912:	b29b      	uxth	r3, r3
 8004914:	3b01      	subs	r3, #1
 8004916:	b29a      	uxth	r2, r3
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800491c:	e04c      	b.n	80049b8 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	2b08      	cmp	r3, #8
 8004922:	d01d      	beq.n	8004960 <I2C_MasterTransmit_BTF+0x8c>
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	2b20      	cmp	r3, #32
 8004928:	d01a      	beq.n	8004960 <I2C_MasterTransmit_BTF+0x8c>
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004930:	d016      	beq.n	8004960 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	685a      	ldr	r2, [r3, #4]
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004940:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2211      	movs	r2, #17
 8004946:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2200      	movs	r2, #0
 800494c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2220      	movs	r2, #32
 8004954:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004958:	6878      	ldr	r0, [r7, #4]
 800495a:	f7ff feb7 	bl	80046cc <HAL_I2C_MasterTxCpltCallback>
}
 800495e:	e02b      	b.n	80049b8 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	685a      	ldr	r2, [r3, #4]
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800496e:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	681a      	ldr	r2, [r3, #0]
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800497e:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2200      	movs	r2, #0
 8004984:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2220      	movs	r2, #32
 800498a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004994:	b2db      	uxtb	r3, r3
 8004996:	2b40      	cmp	r3, #64	@ 0x40
 8004998:	d107      	bne.n	80049aa <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2200      	movs	r2, #0
 800499e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80049a2:	6878      	ldr	r0, [r7, #4]
 80049a4:	f7ff fed2 	bl	800474c <HAL_I2C_MemTxCpltCallback>
}
 80049a8:	e006      	b.n	80049b8 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2200      	movs	r2, #0
 80049ae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80049b2:	6878      	ldr	r0, [r7, #4]
 80049b4:	f7ff fe8a 	bl	80046cc <HAL_I2C_MasterTxCpltCallback>
}
 80049b8:	bf00      	nop
 80049ba:	3710      	adds	r7, #16
 80049bc:	46bd      	mov	sp, r7
 80049be:	bd80      	pop	{r7, pc}

080049c0 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b084      	sub	sp, #16
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80049ce:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d11d      	bne.n	8004a14 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049dc:	2b01      	cmp	r3, #1
 80049de:	d10b      	bne.n	80049f8 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80049e4:	b2da      	uxtb	r2, r3
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049f0:	1c9a      	adds	r2, r3, #2
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 80049f6:	e077      	b.n	8004ae8 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80049fc:	b29b      	uxth	r3, r3
 80049fe:	121b      	asrs	r3, r3, #8
 8004a00:	b2da      	uxtb	r2, r3
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a0c:	1c5a      	adds	r2, r3, #1
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004a12:	e069      	b.n	8004ae8 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a18:	2b01      	cmp	r3, #1
 8004a1a:	d10b      	bne.n	8004a34 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a20:	b2da      	uxtb	r2, r3
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a2c:	1c5a      	adds	r2, r3, #1
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004a32:	e059      	b.n	8004ae8 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a38:	2b02      	cmp	r3, #2
 8004a3a:	d152      	bne.n	8004ae2 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8004a3c:	7bfb      	ldrb	r3, [r7, #15]
 8004a3e:	2b22      	cmp	r3, #34	@ 0x22
 8004a40:	d10d      	bne.n	8004a5e <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	681a      	ldr	r2, [r3, #0]
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004a50:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a56:	1c5a      	adds	r2, r3, #1
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004a5c:	e044      	b.n	8004ae8 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a62:	b29b      	uxth	r3, r3
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d015      	beq.n	8004a94 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8004a68:	7bfb      	ldrb	r3, [r7, #15]
 8004a6a:	2b21      	cmp	r3, #33	@ 0x21
 8004a6c:	d112      	bne.n	8004a94 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a72:	781a      	ldrb	r2, [r3, #0]
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a7e:	1c5a      	adds	r2, r3, #1
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a88:	b29b      	uxth	r3, r3
 8004a8a:	3b01      	subs	r3, #1
 8004a8c:	b29a      	uxth	r2, r3
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8004a92:	e029      	b.n	8004ae8 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a98:	b29b      	uxth	r3, r3
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d124      	bne.n	8004ae8 <I2C_MemoryTransmit_TXE_BTF+0x128>
 8004a9e:	7bfb      	ldrb	r3, [r7, #15]
 8004aa0:	2b21      	cmp	r3, #33	@ 0x21
 8004aa2:	d121      	bne.n	8004ae8 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	685a      	ldr	r2, [r3, #4]
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004ab2:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	681a      	ldr	r2, [r3, #0]
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004ac2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2220      	movs	r2, #32
 8004ace:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004ada:	6878      	ldr	r0, [r7, #4]
 8004adc:	f7ff fe36 	bl	800474c <HAL_I2C_MemTxCpltCallback>
}
 8004ae0:	e002      	b.n	8004ae8 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8004ae2:	6878      	ldr	r0, [r7, #4]
 8004ae4:	f7fe fe88 	bl	80037f8 <I2C_Flush_DR>
}
 8004ae8:	bf00      	nop
 8004aea:	3710      	adds	r7, #16
 8004aec:	46bd      	mov	sp, r7
 8004aee:	bd80      	pop	{r7, pc}

08004af0 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b084      	sub	sp, #16
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004afe:	b2db      	uxtb	r3, r3
 8004b00:	2b22      	cmp	r3, #34	@ 0x22
 8004b02:	f040 80b9 	bne.w	8004c78 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b0a:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b10:	b29b      	uxth	r3, r3
 8004b12:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8004b14:	68bb      	ldr	r3, [r7, #8]
 8004b16:	2b03      	cmp	r3, #3
 8004b18:	d921      	bls.n	8004b5e <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	691a      	ldr	r2, [r3, #16]
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b24:	b2d2      	uxtb	r2, r2
 8004b26:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b2c:	1c5a      	adds	r2, r3, #1
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b36:	b29b      	uxth	r3, r3
 8004b38:	3b01      	subs	r3, #1
 8004b3a:	b29a      	uxth	r2, r3
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b44:	b29b      	uxth	r3, r3
 8004b46:	2b03      	cmp	r3, #3
 8004b48:	f040 8096 	bne.w	8004c78 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	685a      	ldr	r2, [r3, #4]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b5a:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8004b5c:	e08c      	b.n	8004c78 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b62:	2b02      	cmp	r3, #2
 8004b64:	d07f      	beq.n	8004c66 <I2C_MasterReceive_RXNE+0x176>
 8004b66:	68bb      	ldr	r3, [r7, #8]
 8004b68:	2b01      	cmp	r3, #1
 8004b6a:	d002      	beq.n	8004b72 <I2C_MasterReceive_RXNE+0x82>
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d179      	bne.n	8004c66 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004b72:	6878      	ldr	r0, [r7, #4]
 8004b74:	f001 fc20 	bl	80063b8 <I2C_WaitOnSTOPRequestThroughIT>
 8004b78:	4603      	mov	r3, r0
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d14c      	bne.n	8004c18 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	681a      	ldr	r2, [r3, #0]
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b8c:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	685a      	ldr	r2, [r3, #4]
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004b9c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	691a      	ldr	r2, [r3, #16]
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ba8:	b2d2      	uxtb	r2, r2
 8004baa:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bb0:	1c5a      	adds	r2, r3, #1
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004bba:	b29b      	uxth	r3, r3
 8004bbc:	3b01      	subs	r3, #1
 8004bbe:	b29a      	uxth	r2, r3
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2220      	movs	r2, #32
 8004bc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004bd2:	b2db      	uxtb	r3, r3
 8004bd4:	2b40      	cmp	r3, #64	@ 0x40
 8004bd6:	d10a      	bne.n	8004bee <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2200      	movs	r2, #0
 8004bdc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2200      	movs	r2, #0
 8004be4:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8004be6:	6878      	ldr	r0, [r7, #4]
 8004be8:	f7ff fdba 	bl	8004760 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004bec:	e044      	b.n	8004c78 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	2b08      	cmp	r3, #8
 8004bfa:	d002      	beq.n	8004c02 <I2C_MasterReceive_RXNE+0x112>
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	2b20      	cmp	r3, #32
 8004c00:	d103      	bne.n	8004c0a <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2200      	movs	r2, #0
 8004c06:	631a      	str	r2, [r3, #48]	@ 0x30
 8004c08:	e002      	b.n	8004c10 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2212      	movs	r2, #18
 8004c0e:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8004c10:	6878      	ldr	r0, [r7, #4]
 8004c12:	f7ff fd65 	bl	80046e0 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004c16:	e02f      	b.n	8004c78 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	685a      	ldr	r2, [r3, #4]
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004c26:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	691a      	ldr	r2, [r3, #16]
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c32:	b2d2      	uxtb	r2, r2
 8004c34:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c3a:	1c5a      	adds	r2, r3, #1
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c44:	b29b      	uxth	r3, r3
 8004c46:	3b01      	subs	r3, #1
 8004c48:	b29a      	uxth	r2, r3
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2220      	movs	r2, #32
 8004c52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8004c5e:	6878      	ldr	r0, [r7, #4]
 8004c60:	f7ff fd88 	bl	8004774 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004c64:	e008      	b.n	8004c78 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	685a      	ldr	r2, [r3, #4]
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004c74:	605a      	str	r2, [r3, #4]
}
 8004c76:	e7ff      	b.n	8004c78 <I2C_MasterReceive_RXNE+0x188>
 8004c78:	bf00      	nop
 8004c7a:	3710      	adds	r7, #16
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	bd80      	pop	{r7, pc}

08004c80 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b084      	sub	sp, #16
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c8c:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c92:	b29b      	uxth	r3, r3
 8004c94:	2b04      	cmp	r3, #4
 8004c96:	d11b      	bne.n	8004cd0 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	685a      	ldr	r2, [r3, #4]
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004ca6:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	691a      	ldr	r2, [r3, #16]
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cb2:	b2d2      	uxtb	r2, r2
 8004cb4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cba:	1c5a      	adds	r2, r3, #1
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cc4:	b29b      	uxth	r3, r3
 8004cc6:	3b01      	subs	r3, #1
 8004cc8:	b29a      	uxth	r2, r3
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8004cce:	e0c8      	b.n	8004e62 <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 3U)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cd4:	b29b      	uxth	r3, r3
 8004cd6:	2b03      	cmp	r3, #3
 8004cd8:	d129      	bne.n	8004d2e <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	685a      	ldr	r2, [r3, #4]
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004ce8:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	2b04      	cmp	r3, #4
 8004cee:	d00a      	beq.n	8004d06 <I2C_MasterReceive_BTF+0x86>
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	2b02      	cmp	r3, #2
 8004cf4:	d007      	beq.n	8004d06 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	681a      	ldr	r2, [r3, #0]
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004d04:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	691a      	ldr	r2, [r3, #16]
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d10:	b2d2      	uxtb	r2, r2
 8004d12:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d18:	1c5a      	adds	r2, r3, #1
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d22:	b29b      	uxth	r3, r3
 8004d24:	3b01      	subs	r3, #1
 8004d26:	b29a      	uxth	r2, r3
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8004d2c:	e099      	b.n	8004e62 <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 2U)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d32:	b29b      	uxth	r3, r3
 8004d34:	2b02      	cmp	r3, #2
 8004d36:	f040 8081 	bne.w	8004e3c <I2C_MasterReceive_BTF+0x1bc>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	2b01      	cmp	r3, #1
 8004d3e:	d002      	beq.n	8004d46 <I2C_MasterReceive_BTF+0xc6>
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	2b10      	cmp	r3, #16
 8004d44:	d108      	bne.n	8004d58 <I2C_MasterReceive_BTF+0xd8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	681a      	ldr	r2, [r3, #0]
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004d54:	601a      	str	r2, [r3, #0]
 8004d56:	e019      	b.n	8004d8c <I2C_MasterReceive_BTF+0x10c>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	2b04      	cmp	r3, #4
 8004d5c:	d002      	beq.n	8004d64 <I2C_MasterReceive_BTF+0xe4>
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	2b02      	cmp	r3, #2
 8004d62:	d108      	bne.n	8004d76 <I2C_MasterReceive_BTF+0xf6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	681a      	ldr	r2, [r3, #0]
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004d72:	601a      	str	r2, [r3, #0]
 8004d74:	e00a      	b.n	8004d8c <I2C_MasterReceive_BTF+0x10c>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	2b10      	cmp	r3, #16
 8004d7a:	d007      	beq.n	8004d8c <I2C_MasterReceive_BTF+0x10c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	681a      	ldr	r2, [r3, #0]
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004d8a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	691a      	ldr	r2, [r3, #16]
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d96:	b2d2      	uxtb	r2, r2
 8004d98:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d9e:	1c5a      	adds	r2, r3, #1
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004da8:	b29b      	uxth	r3, r3
 8004daa:	3b01      	subs	r3, #1
 8004dac:	b29a      	uxth	r2, r3
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	691a      	ldr	r2, [r3, #16]
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dbc:	b2d2      	uxtb	r2, r2
 8004dbe:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dc4:	1c5a      	adds	r2, r3, #1
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004dce:	b29b      	uxth	r3, r3
 8004dd0:	3b01      	subs	r3, #1
 8004dd2:	b29a      	uxth	r2, r3
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	685a      	ldr	r2, [r3, #4]
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8004de6:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2220      	movs	r2, #32
 8004dec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004df6:	b2db      	uxtb	r3, r3
 8004df8:	2b40      	cmp	r3, #64	@ 0x40
 8004dfa:	d10a      	bne.n	8004e12 <I2C_MasterReceive_BTF+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2200      	movs	r2, #0
 8004e00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2200      	movs	r2, #0
 8004e08:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004e0a:	6878      	ldr	r0, [r7, #4]
 8004e0c:	f7ff fca8 	bl	8004760 <HAL_I2C_MemRxCpltCallback>
}
 8004e10:	e027      	b.n	8004e62 <I2C_MasterReceive_BTF+0x1e2>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2200      	movs	r2, #0
 8004e16:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	2b08      	cmp	r3, #8
 8004e1e:	d002      	beq.n	8004e26 <I2C_MasterReceive_BTF+0x1a6>
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	2b20      	cmp	r3, #32
 8004e24:	d103      	bne.n	8004e2e <I2C_MasterReceive_BTF+0x1ae>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2200      	movs	r2, #0
 8004e2a:	631a      	str	r2, [r3, #48]	@ 0x30
 8004e2c:	e002      	b.n	8004e34 <I2C_MasterReceive_BTF+0x1b4>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2212      	movs	r2, #18
 8004e32:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004e34:	6878      	ldr	r0, [r7, #4]
 8004e36:	f7ff fc53 	bl	80046e0 <HAL_I2C_MasterRxCpltCallback>
}
 8004e3a:	e012      	b.n	8004e62 <I2C_MasterReceive_BTF+0x1e2>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	691a      	ldr	r2, [r3, #16]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e46:	b2d2      	uxtb	r2, r2
 8004e48:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e4e:	1c5a      	adds	r2, r3, #1
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e58:	b29b      	uxth	r3, r3
 8004e5a:	3b01      	subs	r3, #1
 8004e5c:	b29a      	uxth	r2, r3
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8004e62:	bf00      	nop
 8004e64:	3710      	adds	r7, #16
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bd80      	pop	{r7, pc}

08004e6a <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8004e6a:	b480      	push	{r7}
 8004e6c:	b083      	sub	sp, #12
 8004e6e:	af00      	add	r7, sp, #0
 8004e70:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004e78:	b2db      	uxtb	r3, r3
 8004e7a:	2b40      	cmp	r3, #64	@ 0x40
 8004e7c:	d117      	bne.n	8004eae <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d109      	bne.n	8004e9a <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e8a:	b2db      	uxtb	r3, r3
 8004e8c:	461a      	mov	r2, r3
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004e96:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8004e98:	e067      	b.n	8004f6a <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e9e:	b2db      	uxtb	r3, r3
 8004ea0:	f043 0301 	orr.w	r3, r3, #1
 8004ea4:	b2da      	uxtb	r2, r3
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	611a      	str	r2, [r3, #16]
}
 8004eac:	e05d      	b.n	8004f6a <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	691b      	ldr	r3, [r3, #16]
 8004eb2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004eb6:	d133      	bne.n	8004f20 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ebe:	b2db      	uxtb	r3, r3
 8004ec0:	2b21      	cmp	r3, #33	@ 0x21
 8004ec2:	d109      	bne.n	8004ed8 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ec8:	b2db      	uxtb	r3, r3
 8004eca:	461a      	mov	r2, r3
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004ed4:	611a      	str	r2, [r3, #16]
 8004ed6:	e008      	b.n	8004eea <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004edc:	b2db      	uxtb	r3, r3
 8004ede:	f043 0301 	orr.w	r3, r3, #1
 8004ee2:	b2da      	uxtb	r2, r3
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d004      	beq.n	8004efc <I2C_Master_SB+0x92>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ef6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d108      	bne.n	8004f0e <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d032      	beq.n	8004f6a <I2C_Master_SB+0x100>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d02d      	beq.n	8004f6a <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	685a      	ldr	r2, [r3, #4]
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004f1c:	605a      	str	r2, [r3, #4]
}
 8004f1e:	e024      	b.n	8004f6a <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d10e      	bne.n	8004f46 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f2c:	b29b      	uxth	r3, r3
 8004f2e:	11db      	asrs	r3, r3, #7
 8004f30:	b2db      	uxtb	r3, r3
 8004f32:	f003 0306 	and.w	r3, r3, #6
 8004f36:	b2db      	uxtb	r3, r3
 8004f38:	f063 030f 	orn	r3, r3, #15
 8004f3c:	b2da      	uxtb	r2, r3
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	611a      	str	r2, [r3, #16]
}
 8004f44:	e011      	b.n	8004f6a <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f4a:	2b01      	cmp	r3, #1
 8004f4c:	d10d      	bne.n	8004f6a <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f52:	b29b      	uxth	r3, r3
 8004f54:	11db      	asrs	r3, r3, #7
 8004f56:	b2db      	uxtb	r3, r3
 8004f58:	f003 0306 	and.w	r3, r3, #6
 8004f5c:	b2db      	uxtb	r3, r3
 8004f5e:	f063 030e 	orn	r3, r3, #14
 8004f62:	b2da      	uxtb	r2, r3
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	611a      	str	r2, [r3, #16]
}
 8004f6a:	bf00      	nop
 8004f6c:	370c      	adds	r7, #12
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f74:	4770      	bx	lr

08004f76 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8004f76:	b480      	push	{r7}
 8004f78:	b083      	sub	sp, #12
 8004f7a:	af00      	add	r7, sp, #0
 8004f7c:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f82:	b2da      	uxtb	r2, r3
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d004      	beq.n	8004f9c <I2C_Master_ADD10+0x26>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d108      	bne.n	8004fae <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d00c      	beq.n	8004fbe <I2C_Master_ADD10+0x48>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fa8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d007      	beq.n	8004fbe <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	685a      	ldr	r2, [r3, #4]
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004fbc:	605a      	str	r2, [r3, #4]
  }
}
 8004fbe:	bf00      	nop
 8004fc0:	370c      	adds	r7, #12
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc8:	4770      	bx	lr

08004fca <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8004fca:	b480      	push	{r7}
 8004fcc:	b091      	sub	sp, #68	@ 0x44
 8004fce:	af00      	add	r7, sp, #0
 8004fd0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004fd8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fe0:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fe6:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004fee:	b2db      	uxtb	r3, r3
 8004ff0:	2b22      	cmp	r3, #34	@ 0x22
 8004ff2:	f040 8169 	bne.w	80052c8 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d10f      	bne.n	800501e <I2C_Master_ADDR+0x54>
 8004ffe:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8005002:	2b40      	cmp	r3, #64	@ 0x40
 8005004:	d10b      	bne.n	800501e <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005006:	2300      	movs	r3, #0
 8005008:	633b      	str	r3, [r7, #48]	@ 0x30
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	695b      	ldr	r3, [r3, #20]
 8005010:	633b      	str	r3, [r7, #48]	@ 0x30
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	699b      	ldr	r3, [r3, #24]
 8005018:	633b      	str	r3, [r7, #48]	@ 0x30
 800501a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800501c:	e160      	b.n	80052e0 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005022:	2b00      	cmp	r3, #0
 8005024:	d11d      	bne.n	8005062 <I2C_Master_ADDR+0x98>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	691b      	ldr	r3, [r3, #16]
 800502a:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800502e:	d118      	bne.n	8005062 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005030:	2300      	movs	r3, #0
 8005032:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	695b      	ldr	r3, [r3, #20]
 800503a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	699b      	ldr	r3, [r3, #24]
 8005042:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005044:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	681a      	ldr	r2, [r3, #0]
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005054:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800505a:	1c5a      	adds	r2, r3, #1
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	651a      	str	r2, [r3, #80]	@ 0x50
 8005060:	e13e      	b.n	80052e0 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005066:	b29b      	uxth	r3, r3
 8005068:	2b00      	cmp	r3, #0
 800506a:	d113      	bne.n	8005094 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800506c:	2300      	movs	r3, #0
 800506e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	695b      	ldr	r3, [r3, #20]
 8005076:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	699b      	ldr	r3, [r3, #24]
 800507e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005080:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	681a      	ldr	r2, [r3, #0]
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005090:	601a      	str	r2, [r3, #0]
 8005092:	e115      	b.n	80052c0 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005098:	b29b      	uxth	r3, r3
 800509a:	2b01      	cmp	r3, #1
 800509c:	f040 808a 	bne.w	80051b4 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80050a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050a2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80050a6:	d137      	bne.n	8005118 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	681a      	ldr	r2, [r3, #0]
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80050b6:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80050c2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80050c6:	d113      	bne.n	80050f0 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	681a      	ldr	r2, [r3, #0]
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80050d6:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80050d8:	2300      	movs	r3, #0
 80050da:	627b      	str	r3, [r7, #36]	@ 0x24
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	695b      	ldr	r3, [r3, #20]
 80050e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	699b      	ldr	r3, [r3, #24]
 80050ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80050ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050ee:	e0e7      	b.n	80052c0 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80050f0:	2300      	movs	r3, #0
 80050f2:	623b      	str	r3, [r7, #32]
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	695b      	ldr	r3, [r3, #20]
 80050fa:	623b      	str	r3, [r7, #32]
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	699b      	ldr	r3, [r3, #24]
 8005102:	623b      	str	r3, [r7, #32]
 8005104:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	681a      	ldr	r2, [r3, #0]
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005114:	601a      	str	r2, [r3, #0]
 8005116:	e0d3      	b.n	80052c0 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8005118:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800511a:	2b08      	cmp	r3, #8
 800511c:	d02e      	beq.n	800517c <I2C_Master_ADDR+0x1b2>
 800511e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005120:	2b20      	cmp	r3, #32
 8005122:	d02b      	beq.n	800517c <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8005124:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005126:	2b12      	cmp	r3, #18
 8005128:	d102      	bne.n	8005130 <I2C_Master_ADDR+0x166>
 800512a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800512c:	2b01      	cmp	r3, #1
 800512e:	d125      	bne.n	800517c <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005130:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005132:	2b04      	cmp	r3, #4
 8005134:	d00e      	beq.n	8005154 <I2C_Master_ADDR+0x18a>
 8005136:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005138:	2b02      	cmp	r3, #2
 800513a:	d00b      	beq.n	8005154 <I2C_Master_ADDR+0x18a>
 800513c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800513e:	2b10      	cmp	r3, #16
 8005140:	d008      	beq.n	8005154 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	681a      	ldr	r2, [r3, #0]
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005150:	601a      	str	r2, [r3, #0]
 8005152:	e007      	b.n	8005164 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	681a      	ldr	r2, [r3, #0]
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005162:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005164:	2300      	movs	r3, #0
 8005166:	61fb      	str	r3, [r7, #28]
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	695b      	ldr	r3, [r3, #20]
 800516e:	61fb      	str	r3, [r7, #28]
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	699b      	ldr	r3, [r3, #24]
 8005176:	61fb      	str	r3, [r7, #28]
 8005178:	69fb      	ldr	r3, [r7, #28]
 800517a:	e0a1      	b.n	80052c0 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	681a      	ldr	r2, [r3, #0]
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800518a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800518c:	2300      	movs	r3, #0
 800518e:	61bb      	str	r3, [r7, #24]
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	695b      	ldr	r3, [r3, #20]
 8005196:	61bb      	str	r3, [r7, #24]
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	699b      	ldr	r3, [r3, #24]
 800519e:	61bb      	str	r3, [r7, #24]
 80051a0:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	681a      	ldr	r2, [r3, #0]
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80051b0:	601a      	str	r2, [r3, #0]
 80051b2:	e085      	b.n	80052c0 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051b8:	b29b      	uxth	r3, r3
 80051ba:	2b02      	cmp	r3, #2
 80051bc:	d14d      	bne.n	800525a <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80051be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051c0:	2b04      	cmp	r3, #4
 80051c2:	d016      	beq.n	80051f2 <I2C_Master_ADDR+0x228>
 80051c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051c6:	2b02      	cmp	r3, #2
 80051c8:	d013      	beq.n	80051f2 <I2C_Master_ADDR+0x228>
 80051ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051cc:	2b10      	cmp	r3, #16
 80051ce:	d010      	beq.n	80051f2 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	681a      	ldr	r2, [r3, #0]
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80051de:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	681a      	ldr	r2, [r3, #0]
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80051ee:	601a      	str	r2, [r3, #0]
 80051f0:	e007      	b.n	8005202 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	681a      	ldr	r2, [r3, #0]
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005200:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	685b      	ldr	r3, [r3, #4]
 8005208:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800520c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005210:	d117      	bne.n	8005242 <I2C_Master_ADDR+0x278>
 8005212:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005214:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005218:	d00b      	beq.n	8005232 <I2C_Master_ADDR+0x268>
 800521a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800521c:	2b01      	cmp	r3, #1
 800521e:	d008      	beq.n	8005232 <I2C_Master_ADDR+0x268>
 8005220:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005222:	2b08      	cmp	r3, #8
 8005224:	d005      	beq.n	8005232 <I2C_Master_ADDR+0x268>
 8005226:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005228:	2b10      	cmp	r3, #16
 800522a:	d002      	beq.n	8005232 <I2C_Master_ADDR+0x268>
 800522c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800522e:	2b20      	cmp	r3, #32
 8005230:	d107      	bne.n	8005242 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	685a      	ldr	r2, [r3, #4]
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005240:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005242:	2300      	movs	r3, #0
 8005244:	617b      	str	r3, [r7, #20]
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	695b      	ldr	r3, [r3, #20]
 800524c:	617b      	str	r3, [r7, #20]
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	699b      	ldr	r3, [r3, #24]
 8005254:	617b      	str	r3, [r7, #20]
 8005256:	697b      	ldr	r3, [r7, #20]
 8005258:	e032      	b.n	80052c0 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	681a      	ldr	r2, [r3, #0]
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005268:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	685b      	ldr	r3, [r3, #4]
 8005270:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005274:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005278:	d117      	bne.n	80052aa <I2C_Master_ADDR+0x2e0>
 800527a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800527c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005280:	d00b      	beq.n	800529a <I2C_Master_ADDR+0x2d0>
 8005282:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005284:	2b01      	cmp	r3, #1
 8005286:	d008      	beq.n	800529a <I2C_Master_ADDR+0x2d0>
 8005288:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800528a:	2b08      	cmp	r3, #8
 800528c:	d005      	beq.n	800529a <I2C_Master_ADDR+0x2d0>
 800528e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005290:	2b10      	cmp	r3, #16
 8005292:	d002      	beq.n	800529a <I2C_Master_ADDR+0x2d0>
 8005294:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005296:	2b20      	cmp	r3, #32
 8005298:	d107      	bne.n	80052aa <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	685a      	ldr	r2, [r3, #4]
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80052a8:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80052aa:	2300      	movs	r3, #0
 80052ac:	613b      	str	r3, [r7, #16]
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	695b      	ldr	r3, [r3, #20]
 80052b4:	613b      	str	r3, [r7, #16]
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	699b      	ldr	r3, [r3, #24]
 80052bc:	613b      	str	r3, [r7, #16]
 80052be:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2200      	movs	r2, #0
 80052c4:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80052c6:	e00b      	b.n	80052e0 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80052c8:	2300      	movs	r3, #0
 80052ca:	60fb      	str	r3, [r7, #12]
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	695b      	ldr	r3, [r3, #20]
 80052d2:	60fb      	str	r3, [r7, #12]
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	699b      	ldr	r3, [r3, #24]
 80052da:	60fb      	str	r3, [r7, #12]
 80052dc:	68fb      	ldr	r3, [r7, #12]
}
 80052de:	e7ff      	b.n	80052e0 <I2C_Master_ADDR+0x316>
 80052e0:	bf00      	nop
 80052e2:	3744      	adds	r7, #68	@ 0x44
 80052e4:	46bd      	mov	sp, r7
 80052e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ea:	4770      	bx	lr

080052ec <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b084      	sub	sp, #16
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80052fa:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005300:	b29b      	uxth	r3, r3
 8005302:	2b00      	cmp	r3, #0
 8005304:	d02b      	beq.n	800535e <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800530a:	781a      	ldrb	r2, [r3, #0]
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005316:	1c5a      	adds	r2, r3, #1
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005320:	b29b      	uxth	r3, r3
 8005322:	3b01      	subs	r3, #1
 8005324:	b29a      	uxth	r2, r3
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800532e:	b29b      	uxth	r3, r3
 8005330:	2b00      	cmp	r3, #0
 8005332:	d114      	bne.n	800535e <I2C_SlaveTransmit_TXE+0x72>
 8005334:	7bfb      	ldrb	r3, [r7, #15]
 8005336:	2b29      	cmp	r3, #41	@ 0x29
 8005338:	d111      	bne.n	800535e <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	685a      	ldr	r2, [r3, #4]
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005348:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2221      	movs	r2, #33	@ 0x21
 800534e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2228      	movs	r2, #40	@ 0x28
 8005354:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005358:	6878      	ldr	r0, [r7, #4]
 800535a:	f7ff f9cb 	bl	80046f4 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800535e:	bf00      	nop
 8005360:	3710      	adds	r7, #16
 8005362:	46bd      	mov	sp, r7
 8005364:	bd80      	pop	{r7, pc}

08005366 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005366:	b480      	push	{r7}
 8005368:	b083      	sub	sp, #12
 800536a:	af00      	add	r7, sp, #0
 800536c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005372:	b29b      	uxth	r3, r3
 8005374:	2b00      	cmp	r3, #0
 8005376:	d011      	beq.n	800539c <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800537c:	781a      	ldrb	r2, [r3, #0]
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005388:	1c5a      	adds	r2, r3, #1
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005392:	b29b      	uxth	r3, r3
 8005394:	3b01      	subs	r3, #1
 8005396:	b29a      	uxth	r2, r3
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 800539c:	bf00      	nop
 800539e:	370c      	adds	r7, #12
 80053a0:	46bd      	mov	sp, r7
 80053a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a6:	4770      	bx	lr

080053a8 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b084      	sub	sp, #16
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80053b6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053bc:	b29b      	uxth	r3, r3
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d02c      	beq.n	800541c <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	691a      	ldr	r2, [r3, #16]
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053cc:	b2d2      	uxtb	r2, r2
 80053ce:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053d4:	1c5a      	adds	r2, r3, #1
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053de:	b29b      	uxth	r3, r3
 80053e0:	3b01      	subs	r3, #1
 80053e2:	b29a      	uxth	r2, r3
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053ec:	b29b      	uxth	r3, r3
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d114      	bne.n	800541c <I2C_SlaveReceive_RXNE+0x74>
 80053f2:	7bfb      	ldrb	r3, [r7, #15]
 80053f4:	2b2a      	cmp	r3, #42	@ 0x2a
 80053f6:	d111      	bne.n	800541c <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	685a      	ldr	r2, [r3, #4]
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005406:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2222      	movs	r2, #34	@ 0x22
 800540c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2228      	movs	r2, #40	@ 0x28
 8005412:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005416:	6878      	ldr	r0, [r7, #4]
 8005418:	f7ff f976 	bl	8004708 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800541c:	bf00      	nop
 800541e:	3710      	adds	r7, #16
 8005420:	46bd      	mov	sp, r7
 8005422:	bd80      	pop	{r7, pc}

08005424 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005424:	b480      	push	{r7}
 8005426:	b083      	sub	sp, #12
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005430:	b29b      	uxth	r3, r3
 8005432:	2b00      	cmp	r3, #0
 8005434:	d012      	beq.n	800545c <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	691a      	ldr	r2, [r3, #16]
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005440:	b2d2      	uxtb	r2, r2
 8005442:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005448:	1c5a      	adds	r2, r3, #1
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005452:	b29b      	uxth	r3, r3
 8005454:	3b01      	subs	r3, #1
 8005456:	b29a      	uxth	r2, r3
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 800545c:	bf00      	nop
 800545e:	370c      	adds	r7, #12
 8005460:	46bd      	mov	sp, r7
 8005462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005466:	4770      	bx	lr

08005468 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b084      	sub	sp, #16
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
 8005470:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8005472:	2300      	movs	r3, #0
 8005474:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800547c:	b2db      	uxtb	r3, r3
 800547e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005482:	2b28      	cmp	r3, #40	@ 0x28
 8005484:	d125      	bne.n	80054d2 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	685a      	ldr	r2, [r3, #4]
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005494:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	f003 0304 	and.w	r3, r3, #4
 800549c:	2b00      	cmp	r3, #0
 800549e:	d101      	bne.n	80054a4 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80054a0:	2301      	movs	r3, #1
 80054a2:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d103      	bne.n	80054b6 <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	68db      	ldr	r3, [r3, #12]
 80054b2:	81bb      	strh	r3, [r7, #12]
 80054b4:	e002      	b.n	80054bc <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	699b      	ldr	r3, [r3, #24]
 80054ba:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2200      	movs	r2, #0
 80054c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80054c4:	89ba      	ldrh	r2, [r7, #12]
 80054c6:	7bfb      	ldrb	r3, [r7, #15]
 80054c8:	4619      	mov	r1, r3
 80054ca:	6878      	ldr	r0, [r7, #4]
 80054cc:	f7ff f926 	bl	800471c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80054d0:	e00e      	b.n	80054f0 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80054d2:	2300      	movs	r3, #0
 80054d4:	60bb      	str	r3, [r7, #8]
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	695b      	ldr	r3, [r3, #20]
 80054dc:	60bb      	str	r3, [r7, #8]
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	699b      	ldr	r3, [r3, #24]
 80054e4:	60bb      	str	r3, [r7, #8]
 80054e6:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2200      	movs	r2, #0
 80054ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 80054f0:	bf00      	nop
 80054f2:	3710      	adds	r7, #16
 80054f4:	46bd      	mov	sp, r7
 80054f6:	bd80      	pop	{r7, pc}

080054f8 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b084      	sub	sp, #16
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005506:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	685a      	ldr	r2, [r3, #4]
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005516:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8005518:	2300      	movs	r3, #0
 800551a:	60bb      	str	r3, [r7, #8]
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	695b      	ldr	r3, [r3, #20]
 8005522:	60bb      	str	r3, [r7, #8]
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	681a      	ldr	r2, [r3, #0]
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f042 0201 	orr.w	r2, r2, #1
 8005532:	601a      	str	r2, [r3, #0]
 8005534:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	681a      	ldr	r2, [r3, #0]
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005544:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	685b      	ldr	r3, [r3, #4]
 800554c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005550:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005554:	d172      	bne.n	800563c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005556:	7bfb      	ldrb	r3, [r7, #15]
 8005558:	2b22      	cmp	r3, #34	@ 0x22
 800555a:	d002      	beq.n	8005562 <I2C_Slave_STOPF+0x6a>
 800555c:	7bfb      	ldrb	r3, [r7, #15]
 800555e:	2b2a      	cmp	r3, #42	@ 0x2a
 8005560:	d135      	bne.n	80055ce <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	685b      	ldr	r3, [r3, #4]
 800556a:	b29a      	uxth	r2, r3
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005574:	b29b      	uxth	r3, r3
 8005576:	2b00      	cmp	r3, #0
 8005578:	d005      	beq.n	8005586 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800557e:	f043 0204 	orr.w	r2, r3, #4
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	685a      	ldr	r2, [r3, #4]
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005594:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800559a:	4618      	mov	r0, r3
 800559c:	f7fd fe23 	bl	80031e6 <HAL_DMA_GetState>
 80055a0:	4603      	mov	r3, r0
 80055a2:	2b01      	cmp	r3, #1
 80055a4:	d049      	beq.n	800563a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055aa:	4a69      	ldr	r2, [pc, #420]	@ (8005750 <I2C_Slave_STOPF+0x258>)
 80055ac:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055b2:	4618      	mov	r0, r3
 80055b4:	f7fd fdf5 	bl	80031a2 <HAL_DMA_Abort_IT>
 80055b8:	4603      	mov	r3, r0
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d03d      	beq.n	800563a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80055c4:	687a      	ldr	r2, [r7, #4]
 80055c6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80055c8:	4610      	mov	r0, r2
 80055ca:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80055cc:	e035      	b.n	800563a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	685b      	ldr	r3, [r3, #4]
 80055d6:	b29a      	uxth	r2, r3
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055e0:	b29b      	uxth	r3, r3
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d005      	beq.n	80055f2 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055ea:	f043 0204 	orr.w	r2, r3, #4
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	685a      	ldr	r2, [r3, #4]
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005600:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005606:	4618      	mov	r0, r3
 8005608:	f7fd fded 	bl	80031e6 <HAL_DMA_GetState>
 800560c:	4603      	mov	r3, r0
 800560e:	2b01      	cmp	r3, #1
 8005610:	d014      	beq.n	800563c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005616:	4a4e      	ldr	r2, [pc, #312]	@ (8005750 <I2C_Slave_STOPF+0x258>)
 8005618:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800561e:	4618      	mov	r0, r3
 8005620:	f7fd fdbf 	bl	80031a2 <HAL_DMA_Abort_IT>
 8005624:	4603      	mov	r3, r0
 8005626:	2b00      	cmp	r3, #0
 8005628:	d008      	beq.n	800563c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800562e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005630:	687a      	ldr	r2, [r7, #4]
 8005632:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005634:	4610      	mov	r0, r2
 8005636:	4798      	blx	r3
 8005638:	e000      	b.n	800563c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800563a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005640:	b29b      	uxth	r3, r3
 8005642:	2b00      	cmp	r3, #0
 8005644:	d03e      	beq.n	80056c4 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	695b      	ldr	r3, [r3, #20]
 800564c:	f003 0304 	and.w	r3, r3, #4
 8005650:	2b04      	cmp	r3, #4
 8005652:	d112      	bne.n	800567a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	691a      	ldr	r2, [r3, #16]
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800565e:	b2d2      	uxtb	r2, r2
 8005660:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005666:	1c5a      	adds	r2, r3, #1
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005670:	b29b      	uxth	r3, r3
 8005672:	3b01      	subs	r3, #1
 8005674:	b29a      	uxth	r2, r3
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	695b      	ldr	r3, [r3, #20]
 8005680:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005684:	2b40      	cmp	r3, #64	@ 0x40
 8005686:	d112      	bne.n	80056ae <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	691a      	ldr	r2, [r3, #16]
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005692:	b2d2      	uxtb	r2, r2
 8005694:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800569a:	1c5a      	adds	r2, r3, #1
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056a4:	b29b      	uxth	r3, r3
 80056a6:	3b01      	subs	r3, #1
 80056a8:	b29a      	uxth	r2, r3
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056b2:	b29b      	uxth	r3, r3
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d005      	beq.n	80056c4 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056bc:	f043 0204 	orr.w	r2, r3, #4
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d003      	beq.n	80056d4 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80056cc:	6878      	ldr	r0, [r7, #4]
 80056ce:	f000 f8b7 	bl	8005840 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80056d2:	e039      	b.n	8005748 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80056d4:	7bfb      	ldrb	r3, [r7, #15]
 80056d6:	2b2a      	cmp	r3, #42	@ 0x2a
 80056d8:	d109      	bne.n	80056ee <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2200      	movs	r2, #0
 80056de:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2228      	movs	r2, #40	@ 0x28
 80056e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80056e8:	6878      	ldr	r0, [r7, #4]
 80056ea:	f7ff f80d 	bl	8004708 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80056f4:	b2db      	uxtb	r3, r3
 80056f6:	2b28      	cmp	r3, #40	@ 0x28
 80056f8:	d111      	bne.n	800571e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	4a15      	ldr	r2, [pc, #84]	@ (8005754 <I2C_Slave_STOPF+0x25c>)
 80056fe:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2200      	movs	r2, #0
 8005704:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2220      	movs	r2, #32
 800570a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2200      	movs	r2, #0
 8005712:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8005716:	6878      	ldr	r0, [r7, #4]
 8005718:	f7ff f80e 	bl	8004738 <HAL_I2C_ListenCpltCallback>
}
 800571c:	e014      	b.n	8005748 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005722:	2b22      	cmp	r3, #34	@ 0x22
 8005724:	d002      	beq.n	800572c <I2C_Slave_STOPF+0x234>
 8005726:	7bfb      	ldrb	r3, [r7, #15]
 8005728:	2b22      	cmp	r3, #34	@ 0x22
 800572a:	d10d      	bne.n	8005748 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2200      	movs	r2, #0
 8005730:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2220      	movs	r2, #32
 8005736:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2200      	movs	r2, #0
 800573e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005742:	6878      	ldr	r0, [r7, #4]
 8005744:	f7fe ffe0 	bl	8004708 <HAL_I2C_SlaveRxCpltCallback>
}
 8005748:	bf00      	nop
 800574a:	3710      	adds	r7, #16
 800574c:	46bd      	mov	sp, r7
 800574e:	bd80      	pop	{r7, pc}
 8005750:	08005f15 	.word	0x08005f15
 8005754:	ffff0000 	.word	0xffff0000

08005758 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b084      	sub	sp, #16
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005766:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800576c:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800576e:	68bb      	ldr	r3, [r7, #8]
 8005770:	2b08      	cmp	r3, #8
 8005772:	d002      	beq.n	800577a <I2C_Slave_AF+0x22>
 8005774:	68bb      	ldr	r3, [r7, #8]
 8005776:	2b20      	cmp	r3, #32
 8005778:	d129      	bne.n	80057ce <I2C_Slave_AF+0x76>
 800577a:	7bfb      	ldrb	r3, [r7, #15]
 800577c:	2b28      	cmp	r3, #40	@ 0x28
 800577e:	d126      	bne.n	80057ce <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	4a2e      	ldr	r2, [pc, #184]	@ (800583c <I2C_Slave_AF+0xe4>)
 8005784:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	685a      	ldr	r2, [r3, #4]
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005794:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800579e:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	681a      	ldr	r2, [r3, #0]
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80057ae:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2200      	movs	r2, #0
 80057b4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2220      	movs	r2, #32
 80057ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2200      	movs	r2, #0
 80057c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80057c6:	6878      	ldr	r0, [r7, #4]
 80057c8:	f7fe ffb6 	bl	8004738 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80057cc:	e031      	b.n	8005832 <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80057ce:	7bfb      	ldrb	r3, [r7, #15]
 80057d0:	2b21      	cmp	r3, #33	@ 0x21
 80057d2:	d129      	bne.n	8005828 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	4a19      	ldr	r2, [pc, #100]	@ (800583c <I2C_Slave_AF+0xe4>)
 80057d8:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2221      	movs	r2, #33	@ 0x21
 80057de:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2220      	movs	r2, #32
 80057e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2200      	movs	r2, #0
 80057ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	685a      	ldr	r2, [r3, #4]
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80057fe:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005808:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	681a      	ldr	r2, [r3, #0]
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005818:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 800581a:	6878      	ldr	r0, [r7, #4]
 800581c:	f7fd ffec 	bl	80037f8 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005820:	6878      	ldr	r0, [r7, #4]
 8005822:	f7fe ff67 	bl	80046f4 <HAL_I2C_SlaveTxCpltCallback>
}
 8005826:	e004      	b.n	8005832 <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005830:	615a      	str	r2, [r3, #20]
}
 8005832:	bf00      	nop
 8005834:	3710      	adds	r7, #16
 8005836:	46bd      	mov	sp, r7
 8005838:	bd80      	pop	{r7, pc}
 800583a:	bf00      	nop
 800583c:	ffff0000 	.word	0xffff0000

08005840 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b084      	sub	sp, #16
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800584e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005856:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005858:	7bbb      	ldrb	r3, [r7, #14]
 800585a:	2b10      	cmp	r3, #16
 800585c:	d002      	beq.n	8005864 <I2C_ITError+0x24>
 800585e:	7bbb      	ldrb	r3, [r7, #14]
 8005860:	2b40      	cmp	r3, #64	@ 0x40
 8005862:	d10a      	bne.n	800587a <I2C_ITError+0x3a>
 8005864:	7bfb      	ldrb	r3, [r7, #15]
 8005866:	2b22      	cmp	r3, #34	@ 0x22
 8005868:	d107      	bne.n	800587a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	681a      	ldr	r2, [r3, #0]
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005878:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800587a:	7bfb      	ldrb	r3, [r7, #15]
 800587c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005880:	2b28      	cmp	r3, #40	@ 0x28
 8005882:	d107      	bne.n	8005894 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2200      	movs	r2, #0
 8005888:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2228      	movs	r2, #40	@ 0x28
 800588e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8005892:	e015      	b.n	80058c0 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	685b      	ldr	r3, [r3, #4]
 800589a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800589e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80058a2:	d00a      	beq.n	80058ba <I2C_ITError+0x7a>
 80058a4:	7bfb      	ldrb	r3, [r7, #15]
 80058a6:	2b60      	cmp	r3, #96	@ 0x60
 80058a8:	d007      	beq.n	80058ba <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2220      	movs	r2, #32
 80058ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2200      	movs	r2, #0
 80058b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2200      	movs	r2, #0
 80058be:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	685b      	ldr	r3, [r3, #4]
 80058c6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80058ca:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80058ce:	d162      	bne.n	8005996 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	685a      	ldr	r2, [r3, #4]
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80058de:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058e4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80058e8:	b2db      	uxtb	r3, r3
 80058ea:	2b01      	cmp	r3, #1
 80058ec:	d020      	beq.n	8005930 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058f2:	4a6a      	ldr	r2, [pc, #424]	@ (8005a9c <I2C_ITError+0x25c>)
 80058f4:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058fa:	4618      	mov	r0, r3
 80058fc:	f7fd fc51 	bl	80031a2 <HAL_DMA_Abort_IT>
 8005900:	4603      	mov	r3, r0
 8005902:	2b00      	cmp	r3, #0
 8005904:	f000 8089 	beq.w	8005a1a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	681a      	ldr	r2, [r3, #0]
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f022 0201 	bic.w	r2, r2, #1
 8005916:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2220      	movs	r2, #32
 800591c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005924:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005926:	687a      	ldr	r2, [r7, #4]
 8005928:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800592a:	4610      	mov	r0, r2
 800592c:	4798      	blx	r3
 800592e:	e074      	b.n	8005a1a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005934:	4a59      	ldr	r2, [pc, #356]	@ (8005a9c <I2C_ITError+0x25c>)
 8005936:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800593c:	4618      	mov	r0, r3
 800593e:	f7fd fc30 	bl	80031a2 <HAL_DMA_Abort_IT>
 8005942:	4603      	mov	r3, r0
 8005944:	2b00      	cmp	r3, #0
 8005946:	d068      	beq.n	8005a1a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	695b      	ldr	r3, [r3, #20]
 800594e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005952:	2b40      	cmp	r3, #64	@ 0x40
 8005954:	d10b      	bne.n	800596e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	691a      	ldr	r2, [r3, #16]
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005960:	b2d2      	uxtb	r2, r2
 8005962:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005968:	1c5a      	adds	r2, r3, #1
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	681a      	ldr	r2, [r3, #0]
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f022 0201 	bic.w	r2, r2, #1
 800597c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2220      	movs	r2, #32
 8005982:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800598a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800598c:	687a      	ldr	r2, [r7, #4]
 800598e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005990:	4610      	mov	r0, r2
 8005992:	4798      	blx	r3
 8005994:	e041      	b.n	8005a1a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800599c:	b2db      	uxtb	r3, r3
 800599e:	2b60      	cmp	r3, #96	@ 0x60
 80059a0:	d125      	bne.n	80059ee <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2220      	movs	r2, #32
 80059a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2200      	movs	r2, #0
 80059ae:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	695b      	ldr	r3, [r3, #20]
 80059b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059ba:	2b40      	cmp	r3, #64	@ 0x40
 80059bc:	d10b      	bne.n	80059d6 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	691a      	ldr	r2, [r3, #16]
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059c8:	b2d2      	uxtb	r2, r2
 80059ca:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059d0:	1c5a      	adds	r2, r3, #1
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	681a      	ldr	r2, [r3, #0]
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f022 0201 	bic.w	r2, r2, #1
 80059e4:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80059e6:	6878      	ldr	r0, [r7, #4]
 80059e8:	f7fe fece 	bl	8004788 <HAL_I2C_AbortCpltCallback>
 80059ec:	e015      	b.n	8005a1a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	695b      	ldr	r3, [r3, #20]
 80059f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059f8:	2b40      	cmp	r3, #64	@ 0x40
 80059fa:	d10b      	bne.n	8005a14 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	691a      	ldr	r2, [r3, #16]
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a06:	b2d2      	uxtb	r2, r2
 8005a08:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a0e:	1c5a      	adds	r2, r3, #1
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005a14:	6878      	ldr	r0, [r7, #4]
 8005a16:	f7fe fead 	bl	8004774 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a1e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005a20:	68bb      	ldr	r3, [r7, #8]
 8005a22:	f003 0301 	and.w	r3, r3, #1
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d10e      	bne.n	8005a48 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d109      	bne.n	8005a48 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d104      	bne.n	8005a48 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d007      	beq.n	8005a58 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	685a      	ldr	r2, [r3, #4]
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005a56:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005a5e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a64:	f003 0304 	and.w	r3, r3, #4
 8005a68:	2b04      	cmp	r3, #4
 8005a6a:	d113      	bne.n	8005a94 <I2C_ITError+0x254>
 8005a6c:	7bfb      	ldrb	r3, [r7, #15]
 8005a6e:	2b28      	cmp	r3, #40	@ 0x28
 8005a70:	d110      	bne.n	8005a94 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	4a0a      	ldr	r2, [pc, #40]	@ (8005aa0 <I2C_ITError+0x260>)
 8005a76:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2220      	movs	r2, #32
 8005a82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2200      	movs	r2, #0
 8005a8a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005a8e:	6878      	ldr	r0, [r7, #4]
 8005a90:	f7fe fe52 	bl	8004738 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005a94:	bf00      	nop
 8005a96:	3710      	adds	r7, #16
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	bd80      	pop	{r7, pc}
 8005a9c:	08005f15 	.word	0x08005f15
 8005aa0:	ffff0000 	.word	0xffff0000

08005aa4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b088      	sub	sp, #32
 8005aa8:	af02      	add	r7, sp, #8
 8005aaa:	60f8      	str	r0, [r7, #12]
 8005aac:	607a      	str	r2, [r7, #4]
 8005aae:	603b      	str	r3, [r7, #0]
 8005ab0:	460b      	mov	r3, r1
 8005ab2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ab8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005aba:	697b      	ldr	r3, [r7, #20]
 8005abc:	2b08      	cmp	r3, #8
 8005abe:	d006      	beq.n	8005ace <I2C_MasterRequestWrite+0x2a>
 8005ac0:	697b      	ldr	r3, [r7, #20]
 8005ac2:	2b01      	cmp	r3, #1
 8005ac4:	d003      	beq.n	8005ace <I2C_MasterRequestWrite+0x2a>
 8005ac6:	697b      	ldr	r3, [r7, #20]
 8005ac8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005acc:	d108      	bne.n	8005ae0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	681a      	ldr	r2, [r3, #0]
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005adc:	601a      	str	r2, [r3, #0]
 8005ade:	e00b      	b.n	8005af8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ae4:	2b12      	cmp	r3, #18
 8005ae6:	d107      	bne.n	8005af8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	681a      	ldr	r2, [r3, #0]
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005af6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	9300      	str	r3, [sp, #0]
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2200      	movs	r2, #0
 8005b00:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005b04:	68f8      	ldr	r0, [r7, #12]
 8005b06:	f000 faad 	bl	8006064 <I2C_WaitOnFlagUntilTimeout>
 8005b0a:	4603      	mov	r3, r0
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d00d      	beq.n	8005b2c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b1a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005b1e:	d103      	bne.n	8005b28 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005b26:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005b28:	2303      	movs	r3, #3
 8005b2a:	e035      	b.n	8005b98 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	691b      	ldr	r3, [r3, #16]
 8005b30:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005b34:	d108      	bne.n	8005b48 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005b36:	897b      	ldrh	r3, [r7, #10]
 8005b38:	b2db      	uxtb	r3, r3
 8005b3a:	461a      	mov	r2, r3
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005b44:	611a      	str	r2, [r3, #16]
 8005b46:	e01b      	b.n	8005b80 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005b48:	897b      	ldrh	r3, [r7, #10]
 8005b4a:	11db      	asrs	r3, r3, #7
 8005b4c:	b2db      	uxtb	r3, r3
 8005b4e:	f003 0306 	and.w	r3, r3, #6
 8005b52:	b2db      	uxtb	r3, r3
 8005b54:	f063 030f 	orn	r3, r3, #15
 8005b58:	b2da      	uxtb	r2, r3
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	687a      	ldr	r2, [r7, #4]
 8005b64:	490e      	ldr	r1, [pc, #56]	@ (8005ba0 <I2C_MasterRequestWrite+0xfc>)
 8005b66:	68f8      	ldr	r0, [r7, #12]
 8005b68:	f000 faf6 	bl	8006158 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005b6c:	4603      	mov	r3, r0
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d001      	beq.n	8005b76 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005b72:	2301      	movs	r3, #1
 8005b74:	e010      	b.n	8005b98 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005b76:	897b      	ldrh	r3, [r7, #10]
 8005b78:	b2da      	uxtb	r2, r3
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	687a      	ldr	r2, [r7, #4]
 8005b84:	4907      	ldr	r1, [pc, #28]	@ (8005ba4 <I2C_MasterRequestWrite+0x100>)
 8005b86:	68f8      	ldr	r0, [r7, #12]
 8005b88:	f000 fae6 	bl	8006158 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005b8c:	4603      	mov	r3, r0
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d001      	beq.n	8005b96 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005b92:	2301      	movs	r3, #1
 8005b94:	e000      	b.n	8005b98 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005b96:	2300      	movs	r3, #0
}
 8005b98:	4618      	mov	r0, r3
 8005b9a:	3718      	adds	r7, #24
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	bd80      	pop	{r7, pc}
 8005ba0:	00010008 	.word	0x00010008
 8005ba4:	00010002 	.word	0x00010002

08005ba8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b088      	sub	sp, #32
 8005bac:	af02      	add	r7, sp, #8
 8005bae:	60f8      	str	r0, [r7, #12]
 8005bb0:	607a      	str	r2, [r7, #4]
 8005bb2:	603b      	str	r3, [r7, #0]
 8005bb4:	460b      	mov	r3, r1
 8005bb6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bbc:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	681a      	ldr	r2, [r3, #0]
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005bcc:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005bce:	697b      	ldr	r3, [r7, #20]
 8005bd0:	2b08      	cmp	r3, #8
 8005bd2:	d006      	beq.n	8005be2 <I2C_MasterRequestRead+0x3a>
 8005bd4:	697b      	ldr	r3, [r7, #20]
 8005bd6:	2b01      	cmp	r3, #1
 8005bd8:	d003      	beq.n	8005be2 <I2C_MasterRequestRead+0x3a>
 8005bda:	697b      	ldr	r3, [r7, #20]
 8005bdc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005be0:	d108      	bne.n	8005bf4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	681a      	ldr	r2, [r3, #0]
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005bf0:	601a      	str	r2, [r3, #0]
 8005bf2:	e00b      	b.n	8005c0c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bf8:	2b11      	cmp	r3, #17
 8005bfa:	d107      	bne.n	8005c0c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	681a      	ldr	r2, [r3, #0]
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005c0a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	9300      	str	r3, [sp, #0]
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2200      	movs	r2, #0
 8005c14:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005c18:	68f8      	ldr	r0, [r7, #12]
 8005c1a:	f000 fa23 	bl	8006064 <I2C_WaitOnFlagUntilTimeout>
 8005c1e:	4603      	mov	r3, r0
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d00d      	beq.n	8005c40 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c2e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005c32:	d103      	bne.n	8005c3c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005c3a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005c3c:	2303      	movs	r3, #3
 8005c3e:	e079      	b.n	8005d34 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	691b      	ldr	r3, [r3, #16]
 8005c44:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005c48:	d108      	bne.n	8005c5c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005c4a:	897b      	ldrh	r3, [r7, #10]
 8005c4c:	b2db      	uxtb	r3, r3
 8005c4e:	f043 0301 	orr.w	r3, r3, #1
 8005c52:	b2da      	uxtb	r2, r3
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	611a      	str	r2, [r3, #16]
 8005c5a:	e05f      	b.n	8005d1c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005c5c:	897b      	ldrh	r3, [r7, #10]
 8005c5e:	11db      	asrs	r3, r3, #7
 8005c60:	b2db      	uxtb	r3, r3
 8005c62:	f003 0306 	and.w	r3, r3, #6
 8005c66:	b2db      	uxtb	r3, r3
 8005c68:	f063 030f 	orn	r3, r3, #15
 8005c6c:	b2da      	uxtb	r2, r3
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	687a      	ldr	r2, [r7, #4]
 8005c78:	4930      	ldr	r1, [pc, #192]	@ (8005d3c <I2C_MasterRequestRead+0x194>)
 8005c7a:	68f8      	ldr	r0, [r7, #12]
 8005c7c:	f000 fa6c 	bl	8006158 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005c80:	4603      	mov	r3, r0
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d001      	beq.n	8005c8a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8005c86:	2301      	movs	r3, #1
 8005c88:	e054      	b.n	8005d34 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005c8a:	897b      	ldrh	r3, [r7, #10]
 8005c8c:	b2da      	uxtb	r2, r3
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	687a      	ldr	r2, [r7, #4]
 8005c98:	4929      	ldr	r1, [pc, #164]	@ (8005d40 <I2C_MasterRequestRead+0x198>)
 8005c9a:	68f8      	ldr	r0, [r7, #12]
 8005c9c:	f000 fa5c 	bl	8006158 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005ca0:	4603      	mov	r3, r0
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d001      	beq.n	8005caa <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8005ca6:	2301      	movs	r3, #1
 8005ca8:	e044      	b.n	8005d34 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005caa:	2300      	movs	r3, #0
 8005cac:	613b      	str	r3, [r7, #16]
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	695b      	ldr	r3, [r3, #20]
 8005cb4:	613b      	str	r3, [r7, #16]
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	699b      	ldr	r3, [r3, #24]
 8005cbc:	613b      	str	r3, [r7, #16]
 8005cbe:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	681a      	ldr	r2, [r3, #0]
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005cce:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	9300      	str	r3, [sp, #0]
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005cdc:	68f8      	ldr	r0, [r7, #12]
 8005cde:	f000 f9c1 	bl	8006064 <I2C_WaitOnFlagUntilTimeout>
 8005ce2:	4603      	mov	r3, r0
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d00d      	beq.n	8005d04 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005cf2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005cf6:	d103      	bne.n	8005d00 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005cfe:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8005d00:	2303      	movs	r3, #3
 8005d02:	e017      	b.n	8005d34 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005d04:	897b      	ldrh	r3, [r7, #10]
 8005d06:	11db      	asrs	r3, r3, #7
 8005d08:	b2db      	uxtb	r3, r3
 8005d0a:	f003 0306 	and.w	r3, r3, #6
 8005d0e:	b2db      	uxtb	r3, r3
 8005d10:	f063 030e 	orn	r3, r3, #14
 8005d14:	b2da      	uxtb	r2, r3
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	687a      	ldr	r2, [r7, #4]
 8005d20:	4907      	ldr	r1, [pc, #28]	@ (8005d40 <I2C_MasterRequestRead+0x198>)
 8005d22:	68f8      	ldr	r0, [r7, #12]
 8005d24:	f000 fa18 	bl	8006158 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005d28:	4603      	mov	r3, r0
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d001      	beq.n	8005d32 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8005d2e:	2301      	movs	r3, #1
 8005d30:	e000      	b.n	8005d34 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8005d32:	2300      	movs	r3, #0
}
 8005d34:	4618      	mov	r0, r3
 8005d36:	3718      	adds	r7, #24
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	bd80      	pop	{r7, pc}
 8005d3c:	00010008 	.word	0x00010008
 8005d40:	00010002 	.word	0x00010002

08005d44 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b088      	sub	sp, #32
 8005d48:	af02      	add	r7, sp, #8
 8005d4a:	60f8      	str	r0, [r7, #12]
 8005d4c:	4608      	mov	r0, r1
 8005d4e:	4611      	mov	r1, r2
 8005d50:	461a      	mov	r2, r3
 8005d52:	4603      	mov	r3, r0
 8005d54:	817b      	strh	r3, [r7, #10]
 8005d56:	460b      	mov	r3, r1
 8005d58:	813b      	strh	r3, [r7, #8]
 8005d5a:	4613      	mov	r3, r2
 8005d5c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	681a      	ldr	r2, [r3, #0]
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005d6c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	681a      	ldr	r2, [r3, #0]
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005d7c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005d7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d80:	9300      	str	r3, [sp, #0]
 8005d82:	6a3b      	ldr	r3, [r7, #32]
 8005d84:	2200      	movs	r2, #0
 8005d86:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005d8a:	68f8      	ldr	r0, [r7, #12]
 8005d8c:	f000 f96a 	bl	8006064 <I2C_WaitOnFlagUntilTimeout>
 8005d90:	4603      	mov	r3, r0
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d00d      	beq.n	8005db2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005da0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005da4:	d103      	bne.n	8005dae <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005dac:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005dae:	2303      	movs	r3, #3
 8005db0:	e0aa      	b.n	8005f08 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005db2:	897b      	ldrh	r3, [r7, #10]
 8005db4:	b2db      	uxtb	r3, r3
 8005db6:	461a      	mov	r2, r3
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005dc0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005dc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dc4:	6a3a      	ldr	r2, [r7, #32]
 8005dc6:	4952      	ldr	r1, [pc, #328]	@ (8005f10 <I2C_RequestMemoryRead+0x1cc>)
 8005dc8:	68f8      	ldr	r0, [r7, #12]
 8005dca:	f000 f9c5 	bl	8006158 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005dce:	4603      	mov	r3, r0
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d001      	beq.n	8005dd8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	e097      	b.n	8005f08 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005dd8:	2300      	movs	r3, #0
 8005dda:	617b      	str	r3, [r7, #20]
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	695b      	ldr	r3, [r3, #20]
 8005de2:	617b      	str	r3, [r7, #20]
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	699b      	ldr	r3, [r3, #24]
 8005dea:	617b      	str	r3, [r7, #20]
 8005dec:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005dee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005df0:	6a39      	ldr	r1, [r7, #32]
 8005df2:	68f8      	ldr	r0, [r7, #12]
 8005df4:	f000 fa50 	bl	8006298 <I2C_WaitOnTXEFlagUntilTimeout>
 8005df8:	4603      	mov	r3, r0
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d00d      	beq.n	8005e1a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e02:	2b04      	cmp	r3, #4
 8005e04:	d107      	bne.n	8005e16 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	681a      	ldr	r2, [r3, #0]
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005e14:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005e16:	2301      	movs	r3, #1
 8005e18:	e076      	b.n	8005f08 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005e1a:	88fb      	ldrh	r3, [r7, #6]
 8005e1c:	2b01      	cmp	r3, #1
 8005e1e:	d105      	bne.n	8005e2c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005e20:	893b      	ldrh	r3, [r7, #8]
 8005e22:	b2da      	uxtb	r2, r3
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	611a      	str	r2, [r3, #16]
 8005e2a:	e021      	b.n	8005e70 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005e2c:	893b      	ldrh	r3, [r7, #8]
 8005e2e:	0a1b      	lsrs	r3, r3, #8
 8005e30:	b29b      	uxth	r3, r3
 8005e32:	b2da      	uxtb	r2, r3
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e3c:	6a39      	ldr	r1, [r7, #32]
 8005e3e:	68f8      	ldr	r0, [r7, #12]
 8005e40:	f000 fa2a 	bl	8006298 <I2C_WaitOnTXEFlagUntilTimeout>
 8005e44:	4603      	mov	r3, r0
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d00d      	beq.n	8005e66 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e4e:	2b04      	cmp	r3, #4
 8005e50:	d107      	bne.n	8005e62 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	681a      	ldr	r2, [r3, #0]
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005e60:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005e62:	2301      	movs	r3, #1
 8005e64:	e050      	b.n	8005f08 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005e66:	893b      	ldrh	r3, [r7, #8]
 8005e68:	b2da      	uxtb	r2, r3
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e70:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e72:	6a39      	ldr	r1, [r7, #32]
 8005e74:	68f8      	ldr	r0, [r7, #12]
 8005e76:	f000 fa0f 	bl	8006298 <I2C_WaitOnTXEFlagUntilTimeout>
 8005e7a:	4603      	mov	r3, r0
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d00d      	beq.n	8005e9c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e84:	2b04      	cmp	r3, #4
 8005e86:	d107      	bne.n	8005e98 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	681a      	ldr	r2, [r3, #0]
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005e96:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005e98:	2301      	movs	r3, #1
 8005e9a:	e035      	b.n	8005f08 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	681a      	ldr	r2, [r3, #0]
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005eaa:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005eac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005eae:	9300      	str	r3, [sp, #0]
 8005eb0:	6a3b      	ldr	r3, [r7, #32]
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005eb8:	68f8      	ldr	r0, [r7, #12]
 8005eba:	f000 f8d3 	bl	8006064 <I2C_WaitOnFlagUntilTimeout>
 8005ebe:	4603      	mov	r3, r0
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d00d      	beq.n	8005ee0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ece:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005ed2:	d103      	bne.n	8005edc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005eda:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005edc:	2303      	movs	r3, #3
 8005ede:	e013      	b.n	8005f08 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005ee0:	897b      	ldrh	r3, [r7, #10]
 8005ee2:	b2db      	uxtb	r3, r3
 8005ee4:	f043 0301 	orr.w	r3, r3, #1
 8005ee8:	b2da      	uxtb	r2, r3
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005ef0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ef2:	6a3a      	ldr	r2, [r7, #32]
 8005ef4:	4906      	ldr	r1, [pc, #24]	@ (8005f10 <I2C_RequestMemoryRead+0x1cc>)
 8005ef6:	68f8      	ldr	r0, [r7, #12]
 8005ef8:	f000 f92e 	bl	8006158 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005efc:	4603      	mov	r3, r0
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d001      	beq.n	8005f06 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005f02:	2301      	movs	r3, #1
 8005f04:	e000      	b.n	8005f08 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005f06:	2300      	movs	r3, #0
}
 8005f08:	4618      	mov	r0, r3
 8005f0a:	3718      	adds	r7, #24
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	bd80      	pop	{r7, pc}
 8005f10:	00010002 	.word	0x00010002

08005f14 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b086      	sub	sp, #24
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f24:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005f26:	697b      	ldr	r3, [r7, #20]
 8005f28:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005f2c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005f2e:	4b4b      	ldr	r3, [pc, #300]	@ (800605c <I2C_DMAAbort+0x148>)
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	08db      	lsrs	r3, r3, #3
 8005f34:	4a4a      	ldr	r2, [pc, #296]	@ (8006060 <I2C_DMAAbort+0x14c>)
 8005f36:	fba2 2303 	umull	r2, r3, r2, r3
 8005f3a:	0a1a      	lsrs	r2, r3, #8
 8005f3c:	4613      	mov	r3, r2
 8005f3e:	009b      	lsls	r3, r3, #2
 8005f40:	4413      	add	r3, r2
 8005f42:	00da      	lsls	r2, r3, #3
 8005f44:	1ad3      	subs	r3, r2, r3
 8005f46:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d106      	bne.n	8005f5c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005f4e:	697b      	ldr	r3, [r7, #20]
 8005f50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f52:	f043 0220 	orr.w	r2, r3, #32
 8005f56:	697b      	ldr	r3, [r7, #20]
 8005f58:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8005f5a:	e00a      	b.n	8005f72 <I2C_DMAAbort+0x5e>
    }
    count--;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	3b01      	subs	r3, #1
 8005f60:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005f62:	697b      	ldr	r3, [r7, #20]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005f6c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005f70:	d0ea      	beq.n	8005f48 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005f72:	697b      	ldr	r3, [r7, #20]
 8005f74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d003      	beq.n	8005f82 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005f7a:	697b      	ldr	r3, [r7, #20]
 8005f7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f7e:	2200      	movs	r2, #0
 8005f80:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8005f82:	697b      	ldr	r3, [r7, #20]
 8005f84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d003      	beq.n	8005f92 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005f8a:	697b      	ldr	r3, [r7, #20]
 8005f8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f8e:	2200      	movs	r2, #0
 8005f90:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f92:	697b      	ldr	r3, [r7, #20]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	681a      	ldr	r2, [r3, #0]
 8005f98:	697b      	ldr	r3, [r7, #20]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005fa0:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8005fa2:	697b      	ldr	r3, [r7, #20]
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8005fa8:	697b      	ldr	r3, [r7, #20]
 8005faa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d003      	beq.n	8005fb8 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005fb0:	697b      	ldr	r3, [r7, #20]
 8005fb2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8005fb8:	697b      	ldr	r3, [r7, #20]
 8005fba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d003      	beq.n	8005fc8 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005fc0:	697b      	ldr	r3, [r7, #20]
 8005fc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8005fc8:	697b      	ldr	r3, [r7, #20]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	681a      	ldr	r2, [r3, #0]
 8005fce:	697b      	ldr	r3, [r7, #20]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f022 0201 	bic.w	r2, r2, #1
 8005fd6:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005fd8:	697b      	ldr	r3, [r7, #20]
 8005fda:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005fde:	b2db      	uxtb	r3, r3
 8005fe0:	2b60      	cmp	r3, #96	@ 0x60
 8005fe2:	d10e      	bne.n	8006002 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005fe4:	697b      	ldr	r3, [r7, #20]
 8005fe6:	2220      	movs	r2, #32
 8005fe8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005fec:	697b      	ldr	r3, [r7, #20]
 8005fee:	2200      	movs	r2, #0
 8005ff0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005ff4:	697b      	ldr	r3, [r7, #20]
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005ffa:	6978      	ldr	r0, [r7, #20]
 8005ffc:	f7fe fbc4 	bl	8004788 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006000:	e027      	b.n	8006052 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006002:	7cfb      	ldrb	r3, [r7, #19]
 8006004:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006008:	2b28      	cmp	r3, #40	@ 0x28
 800600a:	d117      	bne.n	800603c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800600c:	697b      	ldr	r3, [r7, #20]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	681a      	ldr	r2, [r3, #0]
 8006012:	697b      	ldr	r3, [r7, #20]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f042 0201 	orr.w	r2, r2, #1
 800601a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800601c:	697b      	ldr	r3, [r7, #20]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	681a      	ldr	r2, [r3, #0]
 8006022:	697b      	ldr	r3, [r7, #20]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800602a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800602c:	697b      	ldr	r3, [r7, #20]
 800602e:	2200      	movs	r2, #0
 8006030:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006032:	697b      	ldr	r3, [r7, #20]
 8006034:	2228      	movs	r2, #40	@ 0x28
 8006036:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800603a:	e007      	b.n	800604c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800603c:	697b      	ldr	r3, [r7, #20]
 800603e:	2220      	movs	r2, #32
 8006040:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006044:	697b      	ldr	r3, [r7, #20]
 8006046:	2200      	movs	r2, #0
 8006048:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800604c:	6978      	ldr	r0, [r7, #20]
 800604e:	f7fe fb91 	bl	8004774 <HAL_I2C_ErrorCallback>
}
 8006052:	bf00      	nop
 8006054:	3718      	adds	r7, #24
 8006056:	46bd      	mov	sp, r7
 8006058:	bd80      	pop	{r7, pc}
 800605a:	bf00      	nop
 800605c:	20000078 	.word	0x20000078
 8006060:	14f8b589 	.word	0x14f8b589

08006064 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006064:	b580      	push	{r7, lr}
 8006066:	b084      	sub	sp, #16
 8006068:	af00      	add	r7, sp, #0
 800606a:	60f8      	str	r0, [r7, #12]
 800606c:	60b9      	str	r1, [r7, #8]
 800606e:	603b      	str	r3, [r7, #0]
 8006070:	4613      	mov	r3, r2
 8006072:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006074:	e048      	b.n	8006108 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	f1b3 3fff 	cmp.w	r3, #4294967295
 800607c:	d044      	beq.n	8006108 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800607e:	f7fc fedf 	bl	8002e40 <HAL_GetTick>
 8006082:	4602      	mov	r2, r0
 8006084:	69bb      	ldr	r3, [r7, #24]
 8006086:	1ad3      	subs	r3, r2, r3
 8006088:	683a      	ldr	r2, [r7, #0]
 800608a:	429a      	cmp	r2, r3
 800608c:	d302      	bcc.n	8006094 <I2C_WaitOnFlagUntilTimeout+0x30>
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d139      	bne.n	8006108 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006094:	68bb      	ldr	r3, [r7, #8]
 8006096:	0c1b      	lsrs	r3, r3, #16
 8006098:	b2db      	uxtb	r3, r3
 800609a:	2b01      	cmp	r3, #1
 800609c:	d10d      	bne.n	80060ba <I2C_WaitOnFlagUntilTimeout+0x56>
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	695b      	ldr	r3, [r3, #20]
 80060a4:	43da      	mvns	r2, r3
 80060a6:	68bb      	ldr	r3, [r7, #8]
 80060a8:	4013      	ands	r3, r2
 80060aa:	b29b      	uxth	r3, r3
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	bf0c      	ite	eq
 80060b0:	2301      	moveq	r3, #1
 80060b2:	2300      	movne	r3, #0
 80060b4:	b2db      	uxtb	r3, r3
 80060b6:	461a      	mov	r2, r3
 80060b8:	e00c      	b.n	80060d4 <I2C_WaitOnFlagUntilTimeout+0x70>
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	699b      	ldr	r3, [r3, #24]
 80060c0:	43da      	mvns	r2, r3
 80060c2:	68bb      	ldr	r3, [r7, #8]
 80060c4:	4013      	ands	r3, r2
 80060c6:	b29b      	uxth	r3, r3
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	bf0c      	ite	eq
 80060cc:	2301      	moveq	r3, #1
 80060ce:	2300      	movne	r3, #0
 80060d0:	b2db      	uxtb	r3, r3
 80060d2:	461a      	mov	r2, r3
 80060d4:	79fb      	ldrb	r3, [r7, #7]
 80060d6:	429a      	cmp	r2, r3
 80060d8:	d116      	bne.n	8006108 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	2200      	movs	r2, #0
 80060de:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	2220      	movs	r2, #32
 80060e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	2200      	movs	r2, #0
 80060ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060f4:	f043 0220 	orr.w	r2, r3, #32
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	2200      	movs	r2, #0
 8006100:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006104:	2301      	movs	r3, #1
 8006106:	e023      	b.n	8006150 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006108:	68bb      	ldr	r3, [r7, #8]
 800610a:	0c1b      	lsrs	r3, r3, #16
 800610c:	b2db      	uxtb	r3, r3
 800610e:	2b01      	cmp	r3, #1
 8006110:	d10d      	bne.n	800612e <I2C_WaitOnFlagUntilTimeout+0xca>
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	695b      	ldr	r3, [r3, #20]
 8006118:	43da      	mvns	r2, r3
 800611a:	68bb      	ldr	r3, [r7, #8]
 800611c:	4013      	ands	r3, r2
 800611e:	b29b      	uxth	r3, r3
 8006120:	2b00      	cmp	r3, #0
 8006122:	bf0c      	ite	eq
 8006124:	2301      	moveq	r3, #1
 8006126:	2300      	movne	r3, #0
 8006128:	b2db      	uxtb	r3, r3
 800612a:	461a      	mov	r2, r3
 800612c:	e00c      	b.n	8006148 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	699b      	ldr	r3, [r3, #24]
 8006134:	43da      	mvns	r2, r3
 8006136:	68bb      	ldr	r3, [r7, #8]
 8006138:	4013      	ands	r3, r2
 800613a:	b29b      	uxth	r3, r3
 800613c:	2b00      	cmp	r3, #0
 800613e:	bf0c      	ite	eq
 8006140:	2301      	moveq	r3, #1
 8006142:	2300      	movne	r3, #0
 8006144:	b2db      	uxtb	r3, r3
 8006146:	461a      	mov	r2, r3
 8006148:	79fb      	ldrb	r3, [r7, #7]
 800614a:	429a      	cmp	r2, r3
 800614c:	d093      	beq.n	8006076 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800614e:	2300      	movs	r3, #0
}
 8006150:	4618      	mov	r0, r3
 8006152:	3710      	adds	r7, #16
 8006154:	46bd      	mov	sp, r7
 8006156:	bd80      	pop	{r7, pc}

08006158 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006158:	b580      	push	{r7, lr}
 800615a:	b084      	sub	sp, #16
 800615c:	af00      	add	r7, sp, #0
 800615e:	60f8      	str	r0, [r7, #12]
 8006160:	60b9      	str	r1, [r7, #8]
 8006162:	607a      	str	r2, [r7, #4]
 8006164:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006166:	e071      	b.n	800624c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	695b      	ldr	r3, [r3, #20]
 800616e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006172:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006176:	d123      	bne.n	80061c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	681a      	ldr	r2, [r3, #0]
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006186:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006190:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	2200      	movs	r2, #0
 8006196:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	2220      	movs	r2, #32
 800619c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	2200      	movs	r2, #0
 80061a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061ac:	f043 0204 	orr.w	r2, r3, #4
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	2200      	movs	r2, #0
 80061b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80061bc:	2301      	movs	r3, #1
 80061be:	e067      	b.n	8006290 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061c6:	d041      	beq.n	800624c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061c8:	f7fc fe3a 	bl	8002e40 <HAL_GetTick>
 80061cc:	4602      	mov	r2, r0
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	1ad3      	subs	r3, r2, r3
 80061d2:	687a      	ldr	r2, [r7, #4]
 80061d4:	429a      	cmp	r2, r3
 80061d6:	d302      	bcc.n	80061de <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d136      	bne.n	800624c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80061de:	68bb      	ldr	r3, [r7, #8]
 80061e0:	0c1b      	lsrs	r3, r3, #16
 80061e2:	b2db      	uxtb	r3, r3
 80061e4:	2b01      	cmp	r3, #1
 80061e6:	d10c      	bne.n	8006202 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	695b      	ldr	r3, [r3, #20]
 80061ee:	43da      	mvns	r2, r3
 80061f0:	68bb      	ldr	r3, [r7, #8]
 80061f2:	4013      	ands	r3, r2
 80061f4:	b29b      	uxth	r3, r3
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	bf14      	ite	ne
 80061fa:	2301      	movne	r3, #1
 80061fc:	2300      	moveq	r3, #0
 80061fe:	b2db      	uxtb	r3, r3
 8006200:	e00b      	b.n	800621a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	699b      	ldr	r3, [r3, #24]
 8006208:	43da      	mvns	r2, r3
 800620a:	68bb      	ldr	r3, [r7, #8]
 800620c:	4013      	ands	r3, r2
 800620e:	b29b      	uxth	r3, r3
 8006210:	2b00      	cmp	r3, #0
 8006212:	bf14      	ite	ne
 8006214:	2301      	movne	r3, #1
 8006216:	2300      	moveq	r3, #0
 8006218:	b2db      	uxtb	r3, r3
 800621a:	2b00      	cmp	r3, #0
 800621c:	d016      	beq.n	800624c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	2200      	movs	r2, #0
 8006222:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	2220      	movs	r2, #32
 8006228:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	2200      	movs	r2, #0
 8006230:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006238:	f043 0220 	orr.w	r2, r3, #32
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	2200      	movs	r2, #0
 8006244:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006248:	2301      	movs	r3, #1
 800624a:	e021      	b.n	8006290 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	0c1b      	lsrs	r3, r3, #16
 8006250:	b2db      	uxtb	r3, r3
 8006252:	2b01      	cmp	r3, #1
 8006254:	d10c      	bne.n	8006270 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	695b      	ldr	r3, [r3, #20]
 800625c:	43da      	mvns	r2, r3
 800625e:	68bb      	ldr	r3, [r7, #8]
 8006260:	4013      	ands	r3, r2
 8006262:	b29b      	uxth	r3, r3
 8006264:	2b00      	cmp	r3, #0
 8006266:	bf14      	ite	ne
 8006268:	2301      	movne	r3, #1
 800626a:	2300      	moveq	r3, #0
 800626c:	b2db      	uxtb	r3, r3
 800626e:	e00b      	b.n	8006288 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	699b      	ldr	r3, [r3, #24]
 8006276:	43da      	mvns	r2, r3
 8006278:	68bb      	ldr	r3, [r7, #8]
 800627a:	4013      	ands	r3, r2
 800627c:	b29b      	uxth	r3, r3
 800627e:	2b00      	cmp	r3, #0
 8006280:	bf14      	ite	ne
 8006282:	2301      	movne	r3, #1
 8006284:	2300      	moveq	r3, #0
 8006286:	b2db      	uxtb	r3, r3
 8006288:	2b00      	cmp	r3, #0
 800628a:	f47f af6d 	bne.w	8006168 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800628e:	2300      	movs	r3, #0
}
 8006290:	4618      	mov	r0, r3
 8006292:	3710      	adds	r7, #16
 8006294:	46bd      	mov	sp, r7
 8006296:	bd80      	pop	{r7, pc}

08006298 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006298:	b580      	push	{r7, lr}
 800629a:	b084      	sub	sp, #16
 800629c:	af00      	add	r7, sp, #0
 800629e:	60f8      	str	r0, [r7, #12]
 80062a0:	60b9      	str	r1, [r7, #8]
 80062a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80062a4:	e034      	b.n	8006310 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80062a6:	68f8      	ldr	r0, [r7, #12]
 80062a8:	f000 f915 	bl	80064d6 <I2C_IsAcknowledgeFailed>
 80062ac:	4603      	mov	r3, r0
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d001      	beq.n	80062b6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80062b2:	2301      	movs	r3, #1
 80062b4:	e034      	b.n	8006320 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80062b6:	68bb      	ldr	r3, [r7, #8]
 80062b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062bc:	d028      	beq.n	8006310 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062be:	f7fc fdbf 	bl	8002e40 <HAL_GetTick>
 80062c2:	4602      	mov	r2, r0
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	1ad3      	subs	r3, r2, r3
 80062c8:	68ba      	ldr	r2, [r7, #8]
 80062ca:	429a      	cmp	r2, r3
 80062cc:	d302      	bcc.n	80062d4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80062ce:	68bb      	ldr	r3, [r7, #8]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d11d      	bne.n	8006310 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	695b      	ldr	r3, [r3, #20]
 80062da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80062de:	2b80      	cmp	r3, #128	@ 0x80
 80062e0:	d016      	beq.n	8006310 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	2200      	movs	r2, #0
 80062e6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	2220      	movs	r2, #32
 80062ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	2200      	movs	r2, #0
 80062f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062fc:	f043 0220 	orr.w	r2, r3, #32
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	2200      	movs	r2, #0
 8006308:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800630c:	2301      	movs	r3, #1
 800630e:	e007      	b.n	8006320 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	695b      	ldr	r3, [r3, #20]
 8006316:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800631a:	2b80      	cmp	r3, #128	@ 0x80
 800631c:	d1c3      	bne.n	80062a6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800631e:	2300      	movs	r3, #0
}
 8006320:	4618      	mov	r0, r3
 8006322:	3710      	adds	r7, #16
 8006324:	46bd      	mov	sp, r7
 8006326:	bd80      	pop	{r7, pc}

08006328 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006328:	b580      	push	{r7, lr}
 800632a:	b084      	sub	sp, #16
 800632c:	af00      	add	r7, sp, #0
 800632e:	60f8      	str	r0, [r7, #12]
 8006330:	60b9      	str	r1, [r7, #8]
 8006332:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006334:	e034      	b.n	80063a0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006336:	68f8      	ldr	r0, [r7, #12]
 8006338:	f000 f8cd 	bl	80064d6 <I2C_IsAcknowledgeFailed>
 800633c:	4603      	mov	r3, r0
 800633e:	2b00      	cmp	r3, #0
 8006340:	d001      	beq.n	8006346 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006342:	2301      	movs	r3, #1
 8006344:	e034      	b.n	80063b0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006346:	68bb      	ldr	r3, [r7, #8]
 8006348:	f1b3 3fff 	cmp.w	r3, #4294967295
 800634c:	d028      	beq.n	80063a0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800634e:	f7fc fd77 	bl	8002e40 <HAL_GetTick>
 8006352:	4602      	mov	r2, r0
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	1ad3      	subs	r3, r2, r3
 8006358:	68ba      	ldr	r2, [r7, #8]
 800635a:	429a      	cmp	r2, r3
 800635c:	d302      	bcc.n	8006364 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800635e:	68bb      	ldr	r3, [r7, #8]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d11d      	bne.n	80063a0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	695b      	ldr	r3, [r3, #20]
 800636a:	f003 0304 	and.w	r3, r3, #4
 800636e:	2b04      	cmp	r3, #4
 8006370:	d016      	beq.n	80063a0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	2200      	movs	r2, #0
 8006376:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	2220      	movs	r2, #32
 800637c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	2200      	movs	r2, #0
 8006384:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800638c:	f043 0220 	orr.w	r2, r3, #32
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	2200      	movs	r2, #0
 8006398:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800639c:	2301      	movs	r3, #1
 800639e:	e007      	b.n	80063b0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	695b      	ldr	r3, [r3, #20]
 80063a6:	f003 0304 	and.w	r3, r3, #4
 80063aa:	2b04      	cmp	r3, #4
 80063ac:	d1c3      	bne.n	8006336 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80063ae:	2300      	movs	r3, #0
}
 80063b0:	4618      	mov	r0, r3
 80063b2:	3710      	adds	r7, #16
 80063b4:	46bd      	mov	sp, r7
 80063b6:	bd80      	pop	{r7, pc}

080063b8 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80063b8:	b480      	push	{r7}
 80063ba:	b085      	sub	sp, #20
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80063c0:	2300      	movs	r3, #0
 80063c2:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80063c4:	4b13      	ldr	r3, [pc, #76]	@ (8006414 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	08db      	lsrs	r3, r3, #3
 80063ca:	4a13      	ldr	r2, [pc, #76]	@ (8006418 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80063cc:	fba2 2303 	umull	r2, r3, r2, r3
 80063d0:	0a1a      	lsrs	r2, r3, #8
 80063d2:	4613      	mov	r3, r2
 80063d4:	009b      	lsls	r3, r3, #2
 80063d6:	4413      	add	r3, r2
 80063d8:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	3b01      	subs	r3, #1
 80063de:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d107      	bne.n	80063f6 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063ea:	f043 0220 	orr.w	r2, r3, #32
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 80063f2:	2301      	movs	r3, #1
 80063f4:	e008      	b.n	8006408 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006400:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006404:	d0e9      	beq.n	80063da <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8006406:	2300      	movs	r3, #0
}
 8006408:	4618      	mov	r0, r3
 800640a:	3714      	adds	r7, #20
 800640c:	46bd      	mov	sp, r7
 800640e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006412:	4770      	bx	lr
 8006414:	20000078 	.word	0x20000078
 8006418:	14f8b589 	.word	0x14f8b589

0800641c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800641c:	b580      	push	{r7, lr}
 800641e:	b084      	sub	sp, #16
 8006420:	af00      	add	r7, sp, #0
 8006422:	60f8      	str	r0, [r7, #12]
 8006424:	60b9      	str	r1, [r7, #8]
 8006426:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006428:	e049      	b.n	80064be <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	695b      	ldr	r3, [r3, #20]
 8006430:	f003 0310 	and.w	r3, r3, #16
 8006434:	2b10      	cmp	r3, #16
 8006436:	d119      	bne.n	800646c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f06f 0210 	mvn.w	r2, #16
 8006440:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	2200      	movs	r2, #0
 8006446:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	2220      	movs	r2, #32
 800644c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	2200      	movs	r2, #0
 8006454:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	2200      	movs	r2, #0
 8006464:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006468:	2301      	movs	r3, #1
 800646a:	e030      	b.n	80064ce <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800646c:	f7fc fce8 	bl	8002e40 <HAL_GetTick>
 8006470:	4602      	mov	r2, r0
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	1ad3      	subs	r3, r2, r3
 8006476:	68ba      	ldr	r2, [r7, #8]
 8006478:	429a      	cmp	r2, r3
 800647a:	d302      	bcc.n	8006482 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800647c:	68bb      	ldr	r3, [r7, #8]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d11d      	bne.n	80064be <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	695b      	ldr	r3, [r3, #20]
 8006488:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800648c:	2b40      	cmp	r3, #64	@ 0x40
 800648e:	d016      	beq.n	80064be <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	2200      	movs	r2, #0
 8006494:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	2220      	movs	r2, #32
 800649a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	2200      	movs	r2, #0
 80064a2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064aa:	f043 0220 	orr.w	r2, r3, #32
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	2200      	movs	r2, #0
 80064b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80064ba:	2301      	movs	r3, #1
 80064bc:	e007      	b.n	80064ce <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	695b      	ldr	r3, [r3, #20]
 80064c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064c8:	2b40      	cmp	r3, #64	@ 0x40
 80064ca:	d1ae      	bne.n	800642a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80064cc:	2300      	movs	r3, #0
}
 80064ce:	4618      	mov	r0, r3
 80064d0:	3710      	adds	r7, #16
 80064d2:	46bd      	mov	sp, r7
 80064d4:	bd80      	pop	{r7, pc}

080064d6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80064d6:	b480      	push	{r7}
 80064d8:	b083      	sub	sp, #12
 80064da:	af00      	add	r7, sp, #0
 80064dc:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	695b      	ldr	r3, [r3, #20]
 80064e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80064e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80064ec:	d11b      	bne.n	8006526 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80064f6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2200      	movs	r2, #0
 80064fc:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2220      	movs	r2, #32
 8006502:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	2200      	movs	r2, #0
 800650a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006512:	f043 0204 	orr.w	r2, r3, #4
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2200      	movs	r2, #0
 800651e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8006522:	2301      	movs	r3, #1
 8006524:	e000      	b.n	8006528 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006526:	2300      	movs	r3, #0
}
 8006528:	4618      	mov	r0, r3
 800652a:	370c      	adds	r7, #12
 800652c:	46bd      	mov	sp, r7
 800652e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006532:	4770      	bx	lr

08006534 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8006534:	b480      	push	{r7}
 8006536:	b083      	sub	sp, #12
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006540:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8006544:	d103      	bne.n	800654e <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	2201      	movs	r2, #1
 800654a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800654c:	e007      	b.n	800655e <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006552:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8006556:	d102      	bne.n	800655e <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2208      	movs	r2, #8
 800655c:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 800655e:	bf00      	nop
 8006560:	370c      	adds	r7, #12
 8006562:	46bd      	mov	sp, r7
 8006564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006568:	4770      	bx	lr
	...

0800656c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800656c:	b580      	push	{r7, lr}
 800656e:	b086      	sub	sp, #24
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d101      	bne.n	800657e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800657a:	2301      	movs	r3, #1
 800657c:	e267      	b.n	8006a4e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f003 0301 	and.w	r3, r3, #1
 8006586:	2b00      	cmp	r3, #0
 8006588:	d075      	beq.n	8006676 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800658a:	4b88      	ldr	r3, [pc, #544]	@ (80067ac <HAL_RCC_OscConfig+0x240>)
 800658c:	689b      	ldr	r3, [r3, #8]
 800658e:	f003 030c 	and.w	r3, r3, #12
 8006592:	2b04      	cmp	r3, #4
 8006594:	d00c      	beq.n	80065b0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006596:	4b85      	ldr	r3, [pc, #532]	@ (80067ac <HAL_RCC_OscConfig+0x240>)
 8006598:	689b      	ldr	r3, [r3, #8]
 800659a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800659e:	2b08      	cmp	r3, #8
 80065a0:	d112      	bne.n	80065c8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80065a2:	4b82      	ldr	r3, [pc, #520]	@ (80067ac <HAL_RCC_OscConfig+0x240>)
 80065a4:	685b      	ldr	r3, [r3, #4]
 80065a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80065aa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80065ae:	d10b      	bne.n	80065c8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80065b0:	4b7e      	ldr	r3, [pc, #504]	@ (80067ac <HAL_RCC_OscConfig+0x240>)
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d05b      	beq.n	8006674 <HAL_RCC_OscConfig+0x108>
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	685b      	ldr	r3, [r3, #4]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d157      	bne.n	8006674 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80065c4:	2301      	movs	r3, #1
 80065c6:	e242      	b.n	8006a4e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	685b      	ldr	r3, [r3, #4]
 80065cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80065d0:	d106      	bne.n	80065e0 <HAL_RCC_OscConfig+0x74>
 80065d2:	4b76      	ldr	r3, [pc, #472]	@ (80067ac <HAL_RCC_OscConfig+0x240>)
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	4a75      	ldr	r2, [pc, #468]	@ (80067ac <HAL_RCC_OscConfig+0x240>)
 80065d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80065dc:	6013      	str	r3, [r2, #0]
 80065de:	e01d      	b.n	800661c <HAL_RCC_OscConfig+0xb0>
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	685b      	ldr	r3, [r3, #4]
 80065e4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80065e8:	d10c      	bne.n	8006604 <HAL_RCC_OscConfig+0x98>
 80065ea:	4b70      	ldr	r3, [pc, #448]	@ (80067ac <HAL_RCC_OscConfig+0x240>)
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	4a6f      	ldr	r2, [pc, #444]	@ (80067ac <HAL_RCC_OscConfig+0x240>)
 80065f0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80065f4:	6013      	str	r3, [r2, #0]
 80065f6:	4b6d      	ldr	r3, [pc, #436]	@ (80067ac <HAL_RCC_OscConfig+0x240>)
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	4a6c      	ldr	r2, [pc, #432]	@ (80067ac <HAL_RCC_OscConfig+0x240>)
 80065fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006600:	6013      	str	r3, [r2, #0]
 8006602:	e00b      	b.n	800661c <HAL_RCC_OscConfig+0xb0>
 8006604:	4b69      	ldr	r3, [pc, #420]	@ (80067ac <HAL_RCC_OscConfig+0x240>)
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	4a68      	ldr	r2, [pc, #416]	@ (80067ac <HAL_RCC_OscConfig+0x240>)
 800660a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800660e:	6013      	str	r3, [r2, #0]
 8006610:	4b66      	ldr	r3, [pc, #408]	@ (80067ac <HAL_RCC_OscConfig+0x240>)
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	4a65      	ldr	r2, [pc, #404]	@ (80067ac <HAL_RCC_OscConfig+0x240>)
 8006616:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800661a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	685b      	ldr	r3, [r3, #4]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d013      	beq.n	800664c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006624:	f7fc fc0c 	bl	8002e40 <HAL_GetTick>
 8006628:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800662a:	e008      	b.n	800663e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800662c:	f7fc fc08 	bl	8002e40 <HAL_GetTick>
 8006630:	4602      	mov	r2, r0
 8006632:	693b      	ldr	r3, [r7, #16]
 8006634:	1ad3      	subs	r3, r2, r3
 8006636:	2b64      	cmp	r3, #100	@ 0x64
 8006638:	d901      	bls.n	800663e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800663a:	2303      	movs	r3, #3
 800663c:	e207      	b.n	8006a4e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800663e:	4b5b      	ldr	r3, [pc, #364]	@ (80067ac <HAL_RCC_OscConfig+0x240>)
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006646:	2b00      	cmp	r3, #0
 8006648:	d0f0      	beq.n	800662c <HAL_RCC_OscConfig+0xc0>
 800664a:	e014      	b.n	8006676 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800664c:	f7fc fbf8 	bl	8002e40 <HAL_GetTick>
 8006650:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006652:	e008      	b.n	8006666 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006654:	f7fc fbf4 	bl	8002e40 <HAL_GetTick>
 8006658:	4602      	mov	r2, r0
 800665a:	693b      	ldr	r3, [r7, #16]
 800665c:	1ad3      	subs	r3, r2, r3
 800665e:	2b64      	cmp	r3, #100	@ 0x64
 8006660:	d901      	bls.n	8006666 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006662:	2303      	movs	r3, #3
 8006664:	e1f3      	b.n	8006a4e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006666:	4b51      	ldr	r3, [pc, #324]	@ (80067ac <HAL_RCC_OscConfig+0x240>)
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800666e:	2b00      	cmp	r3, #0
 8006670:	d1f0      	bne.n	8006654 <HAL_RCC_OscConfig+0xe8>
 8006672:	e000      	b.n	8006676 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006674:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f003 0302 	and.w	r3, r3, #2
 800667e:	2b00      	cmp	r3, #0
 8006680:	d063      	beq.n	800674a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006682:	4b4a      	ldr	r3, [pc, #296]	@ (80067ac <HAL_RCC_OscConfig+0x240>)
 8006684:	689b      	ldr	r3, [r3, #8]
 8006686:	f003 030c 	and.w	r3, r3, #12
 800668a:	2b00      	cmp	r3, #0
 800668c:	d00b      	beq.n	80066a6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800668e:	4b47      	ldr	r3, [pc, #284]	@ (80067ac <HAL_RCC_OscConfig+0x240>)
 8006690:	689b      	ldr	r3, [r3, #8]
 8006692:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006696:	2b08      	cmp	r3, #8
 8006698:	d11c      	bne.n	80066d4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800669a:	4b44      	ldr	r3, [pc, #272]	@ (80067ac <HAL_RCC_OscConfig+0x240>)
 800669c:	685b      	ldr	r3, [r3, #4]
 800669e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d116      	bne.n	80066d4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80066a6:	4b41      	ldr	r3, [pc, #260]	@ (80067ac <HAL_RCC_OscConfig+0x240>)
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f003 0302 	and.w	r3, r3, #2
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d005      	beq.n	80066be <HAL_RCC_OscConfig+0x152>
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	68db      	ldr	r3, [r3, #12]
 80066b6:	2b01      	cmp	r3, #1
 80066b8:	d001      	beq.n	80066be <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80066ba:	2301      	movs	r3, #1
 80066bc:	e1c7      	b.n	8006a4e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80066be:	4b3b      	ldr	r3, [pc, #236]	@ (80067ac <HAL_RCC_OscConfig+0x240>)
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	691b      	ldr	r3, [r3, #16]
 80066ca:	00db      	lsls	r3, r3, #3
 80066cc:	4937      	ldr	r1, [pc, #220]	@ (80067ac <HAL_RCC_OscConfig+0x240>)
 80066ce:	4313      	orrs	r3, r2
 80066d0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80066d2:	e03a      	b.n	800674a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	68db      	ldr	r3, [r3, #12]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d020      	beq.n	800671e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80066dc:	4b34      	ldr	r3, [pc, #208]	@ (80067b0 <HAL_RCC_OscConfig+0x244>)
 80066de:	2201      	movs	r2, #1
 80066e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066e2:	f7fc fbad 	bl	8002e40 <HAL_GetTick>
 80066e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80066e8:	e008      	b.n	80066fc <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80066ea:	f7fc fba9 	bl	8002e40 <HAL_GetTick>
 80066ee:	4602      	mov	r2, r0
 80066f0:	693b      	ldr	r3, [r7, #16]
 80066f2:	1ad3      	subs	r3, r2, r3
 80066f4:	2b02      	cmp	r3, #2
 80066f6:	d901      	bls.n	80066fc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80066f8:	2303      	movs	r3, #3
 80066fa:	e1a8      	b.n	8006a4e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80066fc:	4b2b      	ldr	r3, [pc, #172]	@ (80067ac <HAL_RCC_OscConfig+0x240>)
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f003 0302 	and.w	r3, r3, #2
 8006704:	2b00      	cmp	r3, #0
 8006706:	d0f0      	beq.n	80066ea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006708:	4b28      	ldr	r3, [pc, #160]	@ (80067ac <HAL_RCC_OscConfig+0x240>)
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	691b      	ldr	r3, [r3, #16]
 8006714:	00db      	lsls	r3, r3, #3
 8006716:	4925      	ldr	r1, [pc, #148]	@ (80067ac <HAL_RCC_OscConfig+0x240>)
 8006718:	4313      	orrs	r3, r2
 800671a:	600b      	str	r3, [r1, #0]
 800671c:	e015      	b.n	800674a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800671e:	4b24      	ldr	r3, [pc, #144]	@ (80067b0 <HAL_RCC_OscConfig+0x244>)
 8006720:	2200      	movs	r2, #0
 8006722:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006724:	f7fc fb8c 	bl	8002e40 <HAL_GetTick>
 8006728:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800672a:	e008      	b.n	800673e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800672c:	f7fc fb88 	bl	8002e40 <HAL_GetTick>
 8006730:	4602      	mov	r2, r0
 8006732:	693b      	ldr	r3, [r7, #16]
 8006734:	1ad3      	subs	r3, r2, r3
 8006736:	2b02      	cmp	r3, #2
 8006738:	d901      	bls.n	800673e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800673a:	2303      	movs	r3, #3
 800673c:	e187      	b.n	8006a4e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800673e:	4b1b      	ldr	r3, [pc, #108]	@ (80067ac <HAL_RCC_OscConfig+0x240>)
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f003 0302 	and.w	r3, r3, #2
 8006746:	2b00      	cmp	r3, #0
 8006748:	d1f0      	bne.n	800672c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f003 0308 	and.w	r3, r3, #8
 8006752:	2b00      	cmp	r3, #0
 8006754:	d036      	beq.n	80067c4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	695b      	ldr	r3, [r3, #20]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d016      	beq.n	800678c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800675e:	4b15      	ldr	r3, [pc, #84]	@ (80067b4 <HAL_RCC_OscConfig+0x248>)
 8006760:	2201      	movs	r2, #1
 8006762:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006764:	f7fc fb6c 	bl	8002e40 <HAL_GetTick>
 8006768:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800676a:	e008      	b.n	800677e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800676c:	f7fc fb68 	bl	8002e40 <HAL_GetTick>
 8006770:	4602      	mov	r2, r0
 8006772:	693b      	ldr	r3, [r7, #16]
 8006774:	1ad3      	subs	r3, r2, r3
 8006776:	2b02      	cmp	r3, #2
 8006778:	d901      	bls.n	800677e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800677a:	2303      	movs	r3, #3
 800677c:	e167      	b.n	8006a4e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800677e:	4b0b      	ldr	r3, [pc, #44]	@ (80067ac <HAL_RCC_OscConfig+0x240>)
 8006780:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006782:	f003 0302 	and.w	r3, r3, #2
 8006786:	2b00      	cmp	r3, #0
 8006788:	d0f0      	beq.n	800676c <HAL_RCC_OscConfig+0x200>
 800678a:	e01b      	b.n	80067c4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800678c:	4b09      	ldr	r3, [pc, #36]	@ (80067b4 <HAL_RCC_OscConfig+0x248>)
 800678e:	2200      	movs	r2, #0
 8006790:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006792:	f7fc fb55 	bl	8002e40 <HAL_GetTick>
 8006796:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006798:	e00e      	b.n	80067b8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800679a:	f7fc fb51 	bl	8002e40 <HAL_GetTick>
 800679e:	4602      	mov	r2, r0
 80067a0:	693b      	ldr	r3, [r7, #16]
 80067a2:	1ad3      	subs	r3, r2, r3
 80067a4:	2b02      	cmp	r3, #2
 80067a6:	d907      	bls.n	80067b8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80067a8:	2303      	movs	r3, #3
 80067aa:	e150      	b.n	8006a4e <HAL_RCC_OscConfig+0x4e2>
 80067ac:	40023800 	.word	0x40023800
 80067b0:	42470000 	.word	0x42470000
 80067b4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80067b8:	4b88      	ldr	r3, [pc, #544]	@ (80069dc <HAL_RCC_OscConfig+0x470>)
 80067ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80067bc:	f003 0302 	and.w	r3, r3, #2
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d1ea      	bne.n	800679a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f003 0304 	and.w	r3, r3, #4
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	f000 8097 	beq.w	8006900 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80067d2:	2300      	movs	r3, #0
 80067d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80067d6:	4b81      	ldr	r3, [pc, #516]	@ (80069dc <HAL_RCC_OscConfig+0x470>)
 80067d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d10f      	bne.n	8006802 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80067e2:	2300      	movs	r3, #0
 80067e4:	60bb      	str	r3, [r7, #8]
 80067e6:	4b7d      	ldr	r3, [pc, #500]	@ (80069dc <HAL_RCC_OscConfig+0x470>)
 80067e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067ea:	4a7c      	ldr	r2, [pc, #496]	@ (80069dc <HAL_RCC_OscConfig+0x470>)
 80067ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80067f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80067f2:	4b7a      	ldr	r3, [pc, #488]	@ (80069dc <HAL_RCC_OscConfig+0x470>)
 80067f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80067fa:	60bb      	str	r3, [r7, #8]
 80067fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80067fe:	2301      	movs	r3, #1
 8006800:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006802:	4b77      	ldr	r3, [pc, #476]	@ (80069e0 <HAL_RCC_OscConfig+0x474>)
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800680a:	2b00      	cmp	r3, #0
 800680c:	d118      	bne.n	8006840 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800680e:	4b74      	ldr	r3, [pc, #464]	@ (80069e0 <HAL_RCC_OscConfig+0x474>)
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	4a73      	ldr	r2, [pc, #460]	@ (80069e0 <HAL_RCC_OscConfig+0x474>)
 8006814:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006818:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800681a:	f7fc fb11 	bl	8002e40 <HAL_GetTick>
 800681e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006820:	e008      	b.n	8006834 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006822:	f7fc fb0d 	bl	8002e40 <HAL_GetTick>
 8006826:	4602      	mov	r2, r0
 8006828:	693b      	ldr	r3, [r7, #16]
 800682a:	1ad3      	subs	r3, r2, r3
 800682c:	2b02      	cmp	r3, #2
 800682e:	d901      	bls.n	8006834 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006830:	2303      	movs	r3, #3
 8006832:	e10c      	b.n	8006a4e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006834:	4b6a      	ldr	r3, [pc, #424]	@ (80069e0 <HAL_RCC_OscConfig+0x474>)
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800683c:	2b00      	cmp	r3, #0
 800683e:	d0f0      	beq.n	8006822 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	689b      	ldr	r3, [r3, #8]
 8006844:	2b01      	cmp	r3, #1
 8006846:	d106      	bne.n	8006856 <HAL_RCC_OscConfig+0x2ea>
 8006848:	4b64      	ldr	r3, [pc, #400]	@ (80069dc <HAL_RCC_OscConfig+0x470>)
 800684a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800684c:	4a63      	ldr	r2, [pc, #396]	@ (80069dc <HAL_RCC_OscConfig+0x470>)
 800684e:	f043 0301 	orr.w	r3, r3, #1
 8006852:	6713      	str	r3, [r2, #112]	@ 0x70
 8006854:	e01c      	b.n	8006890 <HAL_RCC_OscConfig+0x324>
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	689b      	ldr	r3, [r3, #8]
 800685a:	2b05      	cmp	r3, #5
 800685c:	d10c      	bne.n	8006878 <HAL_RCC_OscConfig+0x30c>
 800685e:	4b5f      	ldr	r3, [pc, #380]	@ (80069dc <HAL_RCC_OscConfig+0x470>)
 8006860:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006862:	4a5e      	ldr	r2, [pc, #376]	@ (80069dc <HAL_RCC_OscConfig+0x470>)
 8006864:	f043 0304 	orr.w	r3, r3, #4
 8006868:	6713      	str	r3, [r2, #112]	@ 0x70
 800686a:	4b5c      	ldr	r3, [pc, #368]	@ (80069dc <HAL_RCC_OscConfig+0x470>)
 800686c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800686e:	4a5b      	ldr	r2, [pc, #364]	@ (80069dc <HAL_RCC_OscConfig+0x470>)
 8006870:	f043 0301 	orr.w	r3, r3, #1
 8006874:	6713      	str	r3, [r2, #112]	@ 0x70
 8006876:	e00b      	b.n	8006890 <HAL_RCC_OscConfig+0x324>
 8006878:	4b58      	ldr	r3, [pc, #352]	@ (80069dc <HAL_RCC_OscConfig+0x470>)
 800687a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800687c:	4a57      	ldr	r2, [pc, #348]	@ (80069dc <HAL_RCC_OscConfig+0x470>)
 800687e:	f023 0301 	bic.w	r3, r3, #1
 8006882:	6713      	str	r3, [r2, #112]	@ 0x70
 8006884:	4b55      	ldr	r3, [pc, #340]	@ (80069dc <HAL_RCC_OscConfig+0x470>)
 8006886:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006888:	4a54      	ldr	r2, [pc, #336]	@ (80069dc <HAL_RCC_OscConfig+0x470>)
 800688a:	f023 0304 	bic.w	r3, r3, #4
 800688e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	689b      	ldr	r3, [r3, #8]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d015      	beq.n	80068c4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006898:	f7fc fad2 	bl	8002e40 <HAL_GetTick>
 800689c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800689e:	e00a      	b.n	80068b6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80068a0:	f7fc face 	bl	8002e40 <HAL_GetTick>
 80068a4:	4602      	mov	r2, r0
 80068a6:	693b      	ldr	r3, [r7, #16]
 80068a8:	1ad3      	subs	r3, r2, r3
 80068aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d901      	bls.n	80068b6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80068b2:	2303      	movs	r3, #3
 80068b4:	e0cb      	b.n	8006a4e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80068b6:	4b49      	ldr	r3, [pc, #292]	@ (80069dc <HAL_RCC_OscConfig+0x470>)
 80068b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068ba:	f003 0302 	and.w	r3, r3, #2
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d0ee      	beq.n	80068a0 <HAL_RCC_OscConfig+0x334>
 80068c2:	e014      	b.n	80068ee <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80068c4:	f7fc fabc 	bl	8002e40 <HAL_GetTick>
 80068c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80068ca:	e00a      	b.n	80068e2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80068cc:	f7fc fab8 	bl	8002e40 <HAL_GetTick>
 80068d0:	4602      	mov	r2, r0
 80068d2:	693b      	ldr	r3, [r7, #16]
 80068d4:	1ad3      	subs	r3, r2, r3
 80068d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80068da:	4293      	cmp	r3, r2
 80068dc:	d901      	bls.n	80068e2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80068de:	2303      	movs	r3, #3
 80068e0:	e0b5      	b.n	8006a4e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80068e2:	4b3e      	ldr	r3, [pc, #248]	@ (80069dc <HAL_RCC_OscConfig+0x470>)
 80068e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068e6:	f003 0302 	and.w	r3, r3, #2
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d1ee      	bne.n	80068cc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80068ee:	7dfb      	ldrb	r3, [r7, #23]
 80068f0:	2b01      	cmp	r3, #1
 80068f2:	d105      	bne.n	8006900 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80068f4:	4b39      	ldr	r3, [pc, #228]	@ (80069dc <HAL_RCC_OscConfig+0x470>)
 80068f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068f8:	4a38      	ldr	r2, [pc, #224]	@ (80069dc <HAL_RCC_OscConfig+0x470>)
 80068fa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80068fe:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	699b      	ldr	r3, [r3, #24]
 8006904:	2b00      	cmp	r3, #0
 8006906:	f000 80a1 	beq.w	8006a4c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800690a:	4b34      	ldr	r3, [pc, #208]	@ (80069dc <HAL_RCC_OscConfig+0x470>)
 800690c:	689b      	ldr	r3, [r3, #8]
 800690e:	f003 030c 	and.w	r3, r3, #12
 8006912:	2b08      	cmp	r3, #8
 8006914:	d05c      	beq.n	80069d0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	699b      	ldr	r3, [r3, #24]
 800691a:	2b02      	cmp	r3, #2
 800691c:	d141      	bne.n	80069a2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800691e:	4b31      	ldr	r3, [pc, #196]	@ (80069e4 <HAL_RCC_OscConfig+0x478>)
 8006920:	2200      	movs	r2, #0
 8006922:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006924:	f7fc fa8c 	bl	8002e40 <HAL_GetTick>
 8006928:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800692a:	e008      	b.n	800693e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800692c:	f7fc fa88 	bl	8002e40 <HAL_GetTick>
 8006930:	4602      	mov	r2, r0
 8006932:	693b      	ldr	r3, [r7, #16]
 8006934:	1ad3      	subs	r3, r2, r3
 8006936:	2b02      	cmp	r3, #2
 8006938:	d901      	bls.n	800693e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800693a:	2303      	movs	r3, #3
 800693c:	e087      	b.n	8006a4e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800693e:	4b27      	ldr	r3, [pc, #156]	@ (80069dc <HAL_RCC_OscConfig+0x470>)
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006946:	2b00      	cmp	r3, #0
 8006948:	d1f0      	bne.n	800692c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	69da      	ldr	r2, [r3, #28]
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6a1b      	ldr	r3, [r3, #32]
 8006952:	431a      	orrs	r2, r3
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006958:	019b      	lsls	r3, r3, #6
 800695a:	431a      	orrs	r2, r3
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006960:	085b      	lsrs	r3, r3, #1
 8006962:	3b01      	subs	r3, #1
 8006964:	041b      	lsls	r3, r3, #16
 8006966:	431a      	orrs	r2, r3
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800696c:	061b      	lsls	r3, r3, #24
 800696e:	491b      	ldr	r1, [pc, #108]	@ (80069dc <HAL_RCC_OscConfig+0x470>)
 8006970:	4313      	orrs	r3, r2
 8006972:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006974:	4b1b      	ldr	r3, [pc, #108]	@ (80069e4 <HAL_RCC_OscConfig+0x478>)
 8006976:	2201      	movs	r2, #1
 8006978:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800697a:	f7fc fa61 	bl	8002e40 <HAL_GetTick>
 800697e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006980:	e008      	b.n	8006994 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006982:	f7fc fa5d 	bl	8002e40 <HAL_GetTick>
 8006986:	4602      	mov	r2, r0
 8006988:	693b      	ldr	r3, [r7, #16]
 800698a:	1ad3      	subs	r3, r2, r3
 800698c:	2b02      	cmp	r3, #2
 800698e:	d901      	bls.n	8006994 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006990:	2303      	movs	r3, #3
 8006992:	e05c      	b.n	8006a4e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006994:	4b11      	ldr	r3, [pc, #68]	@ (80069dc <HAL_RCC_OscConfig+0x470>)
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800699c:	2b00      	cmp	r3, #0
 800699e:	d0f0      	beq.n	8006982 <HAL_RCC_OscConfig+0x416>
 80069a0:	e054      	b.n	8006a4c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80069a2:	4b10      	ldr	r3, [pc, #64]	@ (80069e4 <HAL_RCC_OscConfig+0x478>)
 80069a4:	2200      	movs	r2, #0
 80069a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80069a8:	f7fc fa4a 	bl	8002e40 <HAL_GetTick>
 80069ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80069ae:	e008      	b.n	80069c2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80069b0:	f7fc fa46 	bl	8002e40 <HAL_GetTick>
 80069b4:	4602      	mov	r2, r0
 80069b6:	693b      	ldr	r3, [r7, #16]
 80069b8:	1ad3      	subs	r3, r2, r3
 80069ba:	2b02      	cmp	r3, #2
 80069bc:	d901      	bls.n	80069c2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80069be:	2303      	movs	r3, #3
 80069c0:	e045      	b.n	8006a4e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80069c2:	4b06      	ldr	r3, [pc, #24]	@ (80069dc <HAL_RCC_OscConfig+0x470>)
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d1f0      	bne.n	80069b0 <HAL_RCC_OscConfig+0x444>
 80069ce:	e03d      	b.n	8006a4c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	699b      	ldr	r3, [r3, #24]
 80069d4:	2b01      	cmp	r3, #1
 80069d6:	d107      	bne.n	80069e8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80069d8:	2301      	movs	r3, #1
 80069da:	e038      	b.n	8006a4e <HAL_RCC_OscConfig+0x4e2>
 80069dc:	40023800 	.word	0x40023800
 80069e0:	40007000 	.word	0x40007000
 80069e4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80069e8:	4b1b      	ldr	r3, [pc, #108]	@ (8006a58 <HAL_RCC_OscConfig+0x4ec>)
 80069ea:	685b      	ldr	r3, [r3, #4]
 80069ec:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	699b      	ldr	r3, [r3, #24]
 80069f2:	2b01      	cmp	r3, #1
 80069f4:	d028      	beq.n	8006a48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006a00:	429a      	cmp	r2, r3
 8006a02:	d121      	bne.n	8006a48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a0e:	429a      	cmp	r2, r3
 8006a10:	d11a      	bne.n	8006a48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006a12:	68fa      	ldr	r2, [r7, #12]
 8006a14:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006a18:	4013      	ands	r3, r2
 8006a1a:	687a      	ldr	r2, [r7, #4]
 8006a1c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006a1e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006a20:	4293      	cmp	r3, r2
 8006a22:	d111      	bne.n	8006a48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a2e:	085b      	lsrs	r3, r3, #1
 8006a30:	3b01      	subs	r3, #1
 8006a32:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006a34:	429a      	cmp	r2, r3
 8006a36:	d107      	bne.n	8006a48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a42:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006a44:	429a      	cmp	r2, r3
 8006a46:	d001      	beq.n	8006a4c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8006a48:	2301      	movs	r3, #1
 8006a4a:	e000      	b.n	8006a4e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006a4c:	2300      	movs	r3, #0
}
 8006a4e:	4618      	mov	r0, r3
 8006a50:	3718      	adds	r7, #24
 8006a52:	46bd      	mov	sp, r7
 8006a54:	bd80      	pop	{r7, pc}
 8006a56:	bf00      	nop
 8006a58:	40023800 	.word	0x40023800

08006a5c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	b084      	sub	sp, #16
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
 8006a64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d101      	bne.n	8006a70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006a6c:	2301      	movs	r3, #1
 8006a6e:	e0cc      	b.n	8006c0a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006a70:	4b68      	ldr	r3, [pc, #416]	@ (8006c14 <HAL_RCC_ClockConfig+0x1b8>)
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f003 0307 	and.w	r3, r3, #7
 8006a78:	683a      	ldr	r2, [r7, #0]
 8006a7a:	429a      	cmp	r2, r3
 8006a7c:	d90c      	bls.n	8006a98 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a7e:	4b65      	ldr	r3, [pc, #404]	@ (8006c14 <HAL_RCC_ClockConfig+0x1b8>)
 8006a80:	683a      	ldr	r2, [r7, #0]
 8006a82:	b2d2      	uxtb	r2, r2
 8006a84:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a86:	4b63      	ldr	r3, [pc, #396]	@ (8006c14 <HAL_RCC_ClockConfig+0x1b8>)
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	f003 0307 	and.w	r3, r3, #7
 8006a8e:	683a      	ldr	r2, [r7, #0]
 8006a90:	429a      	cmp	r2, r3
 8006a92:	d001      	beq.n	8006a98 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006a94:	2301      	movs	r3, #1
 8006a96:	e0b8      	b.n	8006c0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f003 0302 	and.w	r3, r3, #2
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d020      	beq.n	8006ae6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f003 0304 	and.w	r3, r3, #4
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d005      	beq.n	8006abc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006ab0:	4b59      	ldr	r3, [pc, #356]	@ (8006c18 <HAL_RCC_ClockConfig+0x1bc>)
 8006ab2:	689b      	ldr	r3, [r3, #8]
 8006ab4:	4a58      	ldr	r2, [pc, #352]	@ (8006c18 <HAL_RCC_ClockConfig+0x1bc>)
 8006ab6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006aba:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f003 0308 	and.w	r3, r3, #8
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d005      	beq.n	8006ad4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006ac8:	4b53      	ldr	r3, [pc, #332]	@ (8006c18 <HAL_RCC_ClockConfig+0x1bc>)
 8006aca:	689b      	ldr	r3, [r3, #8]
 8006acc:	4a52      	ldr	r2, [pc, #328]	@ (8006c18 <HAL_RCC_ClockConfig+0x1bc>)
 8006ace:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006ad2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006ad4:	4b50      	ldr	r3, [pc, #320]	@ (8006c18 <HAL_RCC_ClockConfig+0x1bc>)
 8006ad6:	689b      	ldr	r3, [r3, #8]
 8006ad8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	689b      	ldr	r3, [r3, #8]
 8006ae0:	494d      	ldr	r1, [pc, #308]	@ (8006c18 <HAL_RCC_ClockConfig+0x1bc>)
 8006ae2:	4313      	orrs	r3, r2
 8006ae4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	f003 0301 	and.w	r3, r3, #1
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d044      	beq.n	8006b7c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	685b      	ldr	r3, [r3, #4]
 8006af6:	2b01      	cmp	r3, #1
 8006af8:	d107      	bne.n	8006b0a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006afa:	4b47      	ldr	r3, [pc, #284]	@ (8006c18 <HAL_RCC_ClockConfig+0x1bc>)
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d119      	bne.n	8006b3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006b06:	2301      	movs	r3, #1
 8006b08:	e07f      	b.n	8006c0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	685b      	ldr	r3, [r3, #4]
 8006b0e:	2b02      	cmp	r3, #2
 8006b10:	d003      	beq.n	8006b1a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006b16:	2b03      	cmp	r3, #3
 8006b18:	d107      	bne.n	8006b2a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006b1a:	4b3f      	ldr	r3, [pc, #252]	@ (8006c18 <HAL_RCC_ClockConfig+0x1bc>)
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d109      	bne.n	8006b3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006b26:	2301      	movs	r3, #1
 8006b28:	e06f      	b.n	8006c0a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b2a:	4b3b      	ldr	r3, [pc, #236]	@ (8006c18 <HAL_RCC_ClockConfig+0x1bc>)
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f003 0302 	and.w	r3, r3, #2
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d101      	bne.n	8006b3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006b36:	2301      	movs	r3, #1
 8006b38:	e067      	b.n	8006c0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006b3a:	4b37      	ldr	r3, [pc, #220]	@ (8006c18 <HAL_RCC_ClockConfig+0x1bc>)
 8006b3c:	689b      	ldr	r3, [r3, #8]
 8006b3e:	f023 0203 	bic.w	r2, r3, #3
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	685b      	ldr	r3, [r3, #4]
 8006b46:	4934      	ldr	r1, [pc, #208]	@ (8006c18 <HAL_RCC_ClockConfig+0x1bc>)
 8006b48:	4313      	orrs	r3, r2
 8006b4a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006b4c:	f7fc f978 	bl	8002e40 <HAL_GetTick>
 8006b50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b52:	e00a      	b.n	8006b6a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006b54:	f7fc f974 	bl	8002e40 <HAL_GetTick>
 8006b58:	4602      	mov	r2, r0
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	1ad3      	subs	r3, r2, r3
 8006b5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d901      	bls.n	8006b6a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006b66:	2303      	movs	r3, #3
 8006b68:	e04f      	b.n	8006c0a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b6a:	4b2b      	ldr	r3, [pc, #172]	@ (8006c18 <HAL_RCC_ClockConfig+0x1bc>)
 8006b6c:	689b      	ldr	r3, [r3, #8]
 8006b6e:	f003 020c 	and.w	r2, r3, #12
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	685b      	ldr	r3, [r3, #4]
 8006b76:	009b      	lsls	r3, r3, #2
 8006b78:	429a      	cmp	r2, r3
 8006b7a:	d1eb      	bne.n	8006b54 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006b7c:	4b25      	ldr	r3, [pc, #148]	@ (8006c14 <HAL_RCC_ClockConfig+0x1b8>)
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f003 0307 	and.w	r3, r3, #7
 8006b84:	683a      	ldr	r2, [r7, #0]
 8006b86:	429a      	cmp	r2, r3
 8006b88:	d20c      	bcs.n	8006ba4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b8a:	4b22      	ldr	r3, [pc, #136]	@ (8006c14 <HAL_RCC_ClockConfig+0x1b8>)
 8006b8c:	683a      	ldr	r2, [r7, #0]
 8006b8e:	b2d2      	uxtb	r2, r2
 8006b90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b92:	4b20      	ldr	r3, [pc, #128]	@ (8006c14 <HAL_RCC_ClockConfig+0x1b8>)
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f003 0307 	and.w	r3, r3, #7
 8006b9a:	683a      	ldr	r2, [r7, #0]
 8006b9c:	429a      	cmp	r2, r3
 8006b9e:	d001      	beq.n	8006ba4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006ba0:	2301      	movs	r3, #1
 8006ba2:	e032      	b.n	8006c0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f003 0304 	and.w	r3, r3, #4
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d008      	beq.n	8006bc2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006bb0:	4b19      	ldr	r3, [pc, #100]	@ (8006c18 <HAL_RCC_ClockConfig+0x1bc>)
 8006bb2:	689b      	ldr	r3, [r3, #8]
 8006bb4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	68db      	ldr	r3, [r3, #12]
 8006bbc:	4916      	ldr	r1, [pc, #88]	@ (8006c18 <HAL_RCC_ClockConfig+0x1bc>)
 8006bbe:	4313      	orrs	r3, r2
 8006bc0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	f003 0308 	and.w	r3, r3, #8
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d009      	beq.n	8006be2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006bce:	4b12      	ldr	r3, [pc, #72]	@ (8006c18 <HAL_RCC_ClockConfig+0x1bc>)
 8006bd0:	689b      	ldr	r3, [r3, #8]
 8006bd2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	691b      	ldr	r3, [r3, #16]
 8006bda:	00db      	lsls	r3, r3, #3
 8006bdc:	490e      	ldr	r1, [pc, #56]	@ (8006c18 <HAL_RCC_ClockConfig+0x1bc>)
 8006bde:	4313      	orrs	r3, r2
 8006be0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006be2:	f000 f821 	bl	8006c28 <HAL_RCC_GetSysClockFreq>
 8006be6:	4602      	mov	r2, r0
 8006be8:	4b0b      	ldr	r3, [pc, #44]	@ (8006c18 <HAL_RCC_ClockConfig+0x1bc>)
 8006bea:	689b      	ldr	r3, [r3, #8]
 8006bec:	091b      	lsrs	r3, r3, #4
 8006bee:	f003 030f 	and.w	r3, r3, #15
 8006bf2:	490a      	ldr	r1, [pc, #40]	@ (8006c1c <HAL_RCC_ClockConfig+0x1c0>)
 8006bf4:	5ccb      	ldrb	r3, [r1, r3]
 8006bf6:	fa22 f303 	lsr.w	r3, r2, r3
 8006bfa:	4a09      	ldr	r2, [pc, #36]	@ (8006c20 <HAL_RCC_ClockConfig+0x1c4>)
 8006bfc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8006bfe:	4b09      	ldr	r3, [pc, #36]	@ (8006c24 <HAL_RCC_ClockConfig+0x1c8>)
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	4618      	mov	r0, r3
 8006c04:	f7fc f8d8 	bl	8002db8 <HAL_InitTick>

  return HAL_OK;
 8006c08:	2300      	movs	r3, #0
}
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	3710      	adds	r7, #16
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	bd80      	pop	{r7, pc}
 8006c12:	bf00      	nop
 8006c14:	40023c00 	.word	0x40023c00
 8006c18:	40023800 	.word	0x40023800
 8006c1c:	0800ddd8 	.word	0x0800ddd8
 8006c20:	20000078 	.word	0x20000078
 8006c24:	2000007c 	.word	0x2000007c

08006c28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006c28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006c2c:	b090      	sub	sp, #64	@ 0x40
 8006c2e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006c30:	2300      	movs	r3, #0
 8006c32:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8006c34:	2300      	movs	r3, #0
 8006c36:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8006c38:	2300      	movs	r3, #0
 8006c3a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006c40:	4b59      	ldr	r3, [pc, #356]	@ (8006da8 <HAL_RCC_GetSysClockFreq+0x180>)
 8006c42:	689b      	ldr	r3, [r3, #8]
 8006c44:	f003 030c 	and.w	r3, r3, #12
 8006c48:	2b08      	cmp	r3, #8
 8006c4a:	d00d      	beq.n	8006c68 <HAL_RCC_GetSysClockFreq+0x40>
 8006c4c:	2b08      	cmp	r3, #8
 8006c4e:	f200 80a1 	bhi.w	8006d94 <HAL_RCC_GetSysClockFreq+0x16c>
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d002      	beq.n	8006c5c <HAL_RCC_GetSysClockFreq+0x34>
 8006c56:	2b04      	cmp	r3, #4
 8006c58:	d003      	beq.n	8006c62 <HAL_RCC_GetSysClockFreq+0x3a>
 8006c5a:	e09b      	b.n	8006d94 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006c5c:	4b53      	ldr	r3, [pc, #332]	@ (8006dac <HAL_RCC_GetSysClockFreq+0x184>)
 8006c5e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006c60:	e09b      	b.n	8006d9a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006c62:	4b53      	ldr	r3, [pc, #332]	@ (8006db0 <HAL_RCC_GetSysClockFreq+0x188>)
 8006c64:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006c66:	e098      	b.n	8006d9a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006c68:	4b4f      	ldr	r3, [pc, #316]	@ (8006da8 <HAL_RCC_GetSysClockFreq+0x180>)
 8006c6a:	685b      	ldr	r3, [r3, #4]
 8006c6c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006c70:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006c72:	4b4d      	ldr	r3, [pc, #308]	@ (8006da8 <HAL_RCC_GetSysClockFreq+0x180>)
 8006c74:	685b      	ldr	r3, [r3, #4]
 8006c76:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d028      	beq.n	8006cd0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006c7e:	4b4a      	ldr	r3, [pc, #296]	@ (8006da8 <HAL_RCC_GetSysClockFreq+0x180>)
 8006c80:	685b      	ldr	r3, [r3, #4]
 8006c82:	099b      	lsrs	r3, r3, #6
 8006c84:	2200      	movs	r2, #0
 8006c86:	623b      	str	r3, [r7, #32]
 8006c88:	627a      	str	r2, [r7, #36]	@ 0x24
 8006c8a:	6a3b      	ldr	r3, [r7, #32]
 8006c8c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006c90:	2100      	movs	r1, #0
 8006c92:	4b47      	ldr	r3, [pc, #284]	@ (8006db0 <HAL_RCC_GetSysClockFreq+0x188>)
 8006c94:	fb03 f201 	mul.w	r2, r3, r1
 8006c98:	2300      	movs	r3, #0
 8006c9a:	fb00 f303 	mul.w	r3, r0, r3
 8006c9e:	4413      	add	r3, r2
 8006ca0:	4a43      	ldr	r2, [pc, #268]	@ (8006db0 <HAL_RCC_GetSysClockFreq+0x188>)
 8006ca2:	fba0 1202 	umull	r1, r2, r0, r2
 8006ca6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006ca8:	460a      	mov	r2, r1
 8006caa:	62ba      	str	r2, [r7, #40]	@ 0x28
 8006cac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006cae:	4413      	add	r3, r2
 8006cb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006cb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	61bb      	str	r3, [r7, #24]
 8006cb8:	61fa      	str	r2, [r7, #28]
 8006cba:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006cbe:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8006cc2:	f7f9 ffe1 	bl	8000c88 <__aeabi_uldivmod>
 8006cc6:	4602      	mov	r2, r0
 8006cc8:	460b      	mov	r3, r1
 8006cca:	4613      	mov	r3, r2
 8006ccc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006cce:	e053      	b.n	8006d78 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006cd0:	4b35      	ldr	r3, [pc, #212]	@ (8006da8 <HAL_RCC_GetSysClockFreq+0x180>)
 8006cd2:	685b      	ldr	r3, [r3, #4]
 8006cd4:	099b      	lsrs	r3, r3, #6
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	613b      	str	r3, [r7, #16]
 8006cda:	617a      	str	r2, [r7, #20]
 8006cdc:	693b      	ldr	r3, [r7, #16]
 8006cde:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8006ce2:	f04f 0b00 	mov.w	fp, #0
 8006ce6:	4652      	mov	r2, sl
 8006ce8:	465b      	mov	r3, fp
 8006cea:	f04f 0000 	mov.w	r0, #0
 8006cee:	f04f 0100 	mov.w	r1, #0
 8006cf2:	0159      	lsls	r1, r3, #5
 8006cf4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006cf8:	0150      	lsls	r0, r2, #5
 8006cfa:	4602      	mov	r2, r0
 8006cfc:	460b      	mov	r3, r1
 8006cfe:	ebb2 080a 	subs.w	r8, r2, sl
 8006d02:	eb63 090b 	sbc.w	r9, r3, fp
 8006d06:	f04f 0200 	mov.w	r2, #0
 8006d0a:	f04f 0300 	mov.w	r3, #0
 8006d0e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8006d12:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8006d16:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8006d1a:	ebb2 0408 	subs.w	r4, r2, r8
 8006d1e:	eb63 0509 	sbc.w	r5, r3, r9
 8006d22:	f04f 0200 	mov.w	r2, #0
 8006d26:	f04f 0300 	mov.w	r3, #0
 8006d2a:	00eb      	lsls	r3, r5, #3
 8006d2c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006d30:	00e2      	lsls	r2, r4, #3
 8006d32:	4614      	mov	r4, r2
 8006d34:	461d      	mov	r5, r3
 8006d36:	eb14 030a 	adds.w	r3, r4, sl
 8006d3a:	603b      	str	r3, [r7, #0]
 8006d3c:	eb45 030b 	adc.w	r3, r5, fp
 8006d40:	607b      	str	r3, [r7, #4]
 8006d42:	f04f 0200 	mov.w	r2, #0
 8006d46:	f04f 0300 	mov.w	r3, #0
 8006d4a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006d4e:	4629      	mov	r1, r5
 8006d50:	028b      	lsls	r3, r1, #10
 8006d52:	4621      	mov	r1, r4
 8006d54:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006d58:	4621      	mov	r1, r4
 8006d5a:	028a      	lsls	r2, r1, #10
 8006d5c:	4610      	mov	r0, r2
 8006d5e:	4619      	mov	r1, r3
 8006d60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d62:	2200      	movs	r2, #0
 8006d64:	60bb      	str	r3, [r7, #8]
 8006d66:	60fa      	str	r2, [r7, #12]
 8006d68:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006d6c:	f7f9 ff8c 	bl	8000c88 <__aeabi_uldivmod>
 8006d70:	4602      	mov	r2, r0
 8006d72:	460b      	mov	r3, r1
 8006d74:	4613      	mov	r3, r2
 8006d76:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006d78:	4b0b      	ldr	r3, [pc, #44]	@ (8006da8 <HAL_RCC_GetSysClockFreq+0x180>)
 8006d7a:	685b      	ldr	r3, [r3, #4]
 8006d7c:	0c1b      	lsrs	r3, r3, #16
 8006d7e:	f003 0303 	and.w	r3, r3, #3
 8006d82:	3301      	adds	r3, #1
 8006d84:	005b      	lsls	r3, r3, #1
 8006d86:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8006d88:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006d8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d90:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006d92:	e002      	b.n	8006d9a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006d94:	4b05      	ldr	r3, [pc, #20]	@ (8006dac <HAL_RCC_GetSysClockFreq+0x184>)
 8006d96:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006d98:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006d9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	3740      	adds	r7, #64	@ 0x40
 8006da0:	46bd      	mov	sp, r7
 8006da2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006da6:	bf00      	nop
 8006da8:	40023800 	.word	0x40023800
 8006dac:	00f42400 	.word	0x00f42400
 8006db0:	017d7840 	.word	0x017d7840

08006db4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006db4:	b480      	push	{r7}
 8006db6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006db8:	4b03      	ldr	r3, [pc, #12]	@ (8006dc8 <HAL_RCC_GetHCLKFreq+0x14>)
 8006dba:	681b      	ldr	r3, [r3, #0]
}
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc4:	4770      	bx	lr
 8006dc6:	bf00      	nop
 8006dc8:	20000078 	.word	0x20000078

08006dcc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006dd0:	f7ff fff0 	bl	8006db4 <HAL_RCC_GetHCLKFreq>
 8006dd4:	4602      	mov	r2, r0
 8006dd6:	4b05      	ldr	r3, [pc, #20]	@ (8006dec <HAL_RCC_GetPCLK1Freq+0x20>)
 8006dd8:	689b      	ldr	r3, [r3, #8]
 8006dda:	0a9b      	lsrs	r3, r3, #10
 8006ddc:	f003 0307 	and.w	r3, r3, #7
 8006de0:	4903      	ldr	r1, [pc, #12]	@ (8006df0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006de2:	5ccb      	ldrb	r3, [r1, r3]
 8006de4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006de8:	4618      	mov	r0, r3
 8006dea:	bd80      	pop	{r7, pc}
 8006dec:	40023800 	.word	0x40023800
 8006df0:	0800dde8 	.word	0x0800dde8

08006df4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006df4:	b580      	push	{r7, lr}
 8006df6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006df8:	f7ff ffdc 	bl	8006db4 <HAL_RCC_GetHCLKFreq>
 8006dfc:	4602      	mov	r2, r0
 8006dfe:	4b05      	ldr	r3, [pc, #20]	@ (8006e14 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006e00:	689b      	ldr	r3, [r3, #8]
 8006e02:	0b5b      	lsrs	r3, r3, #13
 8006e04:	f003 0307 	and.w	r3, r3, #7
 8006e08:	4903      	ldr	r1, [pc, #12]	@ (8006e18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006e0a:	5ccb      	ldrb	r3, [r1, r3]
 8006e0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006e10:	4618      	mov	r0, r3
 8006e12:	bd80      	pop	{r7, pc}
 8006e14:	40023800 	.word	0x40023800
 8006e18:	0800dde8 	.word	0x0800dde8

08006e1c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	b082      	sub	sp, #8
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d101      	bne.n	8006e2e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006e2a:	2301      	movs	r3, #1
 8006e2c:	e041      	b.n	8006eb2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006e34:	b2db      	uxtb	r3, r3
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d106      	bne.n	8006e48 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006e42:	6878      	ldr	r0, [r7, #4]
 8006e44:	f7fb fd14 	bl	8002870 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2202      	movs	r2, #2
 8006e4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681a      	ldr	r2, [r3, #0]
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	3304      	adds	r3, #4
 8006e58:	4619      	mov	r1, r3
 8006e5a:	4610      	mov	r0, r2
 8006e5c:	f000 fa88 	bl	8007370 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2201      	movs	r2, #1
 8006e64:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2201      	movs	r2, #1
 8006e6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2201      	movs	r2, #1
 8006e74:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2201      	movs	r2, #1
 8006e7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2201      	movs	r2, #1
 8006e84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2201      	movs	r2, #1
 8006e8c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2201      	movs	r2, #1
 8006e94:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2201      	movs	r2, #1
 8006e9c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2201      	movs	r2, #1
 8006ea4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2201      	movs	r2, #1
 8006eac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006eb0:	2300      	movs	r3, #0
}
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	3708      	adds	r7, #8
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	bd80      	pop	{r7, pc}
	...

08006ebc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006ebc:	b480      	push	{r7}
 8006ebe:	b085      	sub	sp, #20
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006eca:	b2db      	uxtb	r3, r3
 8006ecc:	2b01      	cmp	r3, #1
 8006ece:	d001      	beq.n	8006ed4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006ed0:	2301      	movs	r3, #1
 8006ed2:	e04e      	b.n	8006f72 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2202      	movs	r2, #2
 8006ed8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	68da      	ldr	r2, [r3, #12]
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f042 0201 	orr.w	r2, r2, #1
 8006eea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	4a23      	ldr	r2, [pc, #140]	@ (8006f80 <HAL_TIM_Base_Start_IT+0xc4>)
 8006ef2:	4293      	cmp	r3, r2
 8006ef4:	d022      	beq.n	8006f3c <HAL_TIM_Base_Start_IT+0x80>
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006efe:	d01d      	beq.n	8006f3c <HAL_TIM_Base_Start_IT+0x80>
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	4a1f      	ldr	r2, [pc, #124]	@ (8006f84 <HAL_TIM_Base_Start_IT+0xc8>)
 8006f06:	4293      	cmp	r3, r2
 8006f08:	d018      	beq.n	8006f3c <HAL_TIM_Base_Start_IT+0x80>
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	4a1e      	ldr	r2, [pc, #120]	@ (8006f88 <HAL_TIM_Base_Start_IT+0xcc>)
 8006f10:	4293      	cmp	r3, r2
 8006f12:	d013      	beq.n	8006f3c <HAL_TIM_Base_Start_IT+0x80>
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	4a1c      	ldr	r2, [pc, #112]	@ (8006f8c <HAL_TIM_Base_Start_IT+0xd0>)
 8006f1a:	4293      	cmp	r3, r2
 8006f1c:	d00e      	beq.n	8006f3c <HAL_TIM_Base_Start_IT+0x80>
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	4a1b      	ldr	r2, [pc, #108]	@ (8006f90 <HAL_TIM_Base_Start_IT+0xd4>)
 8006f24:	4293      	cmp	r3, r2
 8006f26:	d009      	beq.n	8006f3c <HAL_TIM_Base_Start_IT+0x80>
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	4a19      	ldr	r2, [pc, #100]	@ (8006f94 <HAL_TIM_Base_Start_IT+0xd8>)
 8006f2e:	4293      	cmp	r3, r2
 8006f30:	d004      	beq.n	8006f3c <HAL_TIM_Base_Start_IT+0x80>
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	4a18      	ldr	r2, [pc, #96]	@ (8006f98 <HAL_TIM_Base_Start_IT+0xdc>)
 8006f38:	4293      	cmp	r3, r2
 8006f3a:	d111      	bne.n	8006f60 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	689b      	ldr	r3, [r3, #8]
 8006f42:	f003 0307 	and.w	r3, r3, #7
 8006f46:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	2b06      	cmp	r3, #6
 8006f4c:	d010      	beq.n	8006f70 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	681a      	ldr	r2, [r3, #0]
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	f042 0201 	orr.w	r2, r2, #1
 8006f5c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f5e:	e007      	b.n	8006f70 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	681a      	ldr	r2, [r3, #0]
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f042 0201 	orr.w	r2, r2, #1
 8006f6e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006f70:	2300      	movs	r3, #0
}
 8006f72:	4618      	mov	r0, r3
 8006f74:	3714      	adds	r7, #20
 8006f76:	46bd      	mov	sp, r7
 8006f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7c:	4770      	bx	lr
 8006f7e:	bf00      	nop
 8006f80:	40010000 	.word	0x40010000
 8006f84:	40000400 	.word	0x40000400
 8006f88:	40000800 	.word	0x40000800
 8006f8c:	40000c00 	.word	0x40000c00
 8006f90:	40010400 	.word	0x40010400
 8006f94:	40014000 	.word	0x40014000
 8006f98:	40001800 	.word	0x40001800

08006f9c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b084      	sub	sp, #16
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	68db      	ldr	r3, [r3, #12]
 8006faa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	691b      	ldr	r3, [r3, #16]
 8006fb2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006fb4:	68bb      	ldr	r3, [r7, #8]
 8006fb6:	f003 0302 	and.w	r3, r3, #2
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d020      	beq.n	8007000 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	f003 0302 	and.w	r3, r3, #2
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d01b      	beq.n	8007000 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f06f 0202 	mvn.w	r2, #2
 8006fd0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	2201      	movs	r2, #1
 8006fd6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	699b      	ldr	r3, [r3, #24]
 8006fde:	f003 0303 	and.w	r3, r3, #3
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d003      	beq.n	8006fee <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006fe6:	6878      	ldr	r0, [r7, #4]
 8006fe8:	f000 f9a3 	bl	8007332 <HAL_TIM_IC_CaptureCallback>
 8006fec:	e005      	b.n	8006ffa <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006fee:	6878      	ldr	r0, [r7, #4]
 8006ff0:	f000 f995 	bl	800731e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ff4:	6878      	ldr	r0, [r7, #4]
 8006ff6:	f000 f9a6 	bl	8007346 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007000:	68bb      	ldr	r3, [r7, #8]
 8007002:	f003 0304 	and.w	r3, r3, #4
 8007006:	2b00      	cmp	r3, #0
 8007008:	d020      	beq.n	800704c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	f003 0304 	and.w	r3, r3, #4
 8007010:	2b00      	cmp	r3, #0
 8007012:	d01b      	beq.n	800704c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f06f 0204 	mvn.w	r2, #4
 800701c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	2202      	movs	r2, #2
 8007022:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	699b      	ldr	r3, [r3, #24]
 800702a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800702e:	2b00      	cmp	r3, #0
 8007030:	d003      	beq.n	800703a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007032:	6878      	ldr	r0, [r7, #4]
 8007034:	f000 f97d 	bl	8007332 <HAL_TIM_IC_CaptureCallback>
 8007038:	e005      	b.n	8007046 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800703a:	6878      	ldr	r0, [r7, #4]
 800703c:	f000 f96f 	bl	800731e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007040:	6878      	ldr	r0, [r7, #4]
 8007042:	f000 f980 	bl	8007346 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	2200      	movs	r2, #0
 800704a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800704c:	68bb      	ldr	r3, [r7, #8]
 800704e:	f003 0308 	and.w	r3, r3, #8
 8007052:	2b00      	cmp	r3, #0
 8007054:	d020      	beq.n	8007098 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	f003 0308 	and.w	r3, r3, #8
 800705c:	2b00      	cmp	r3, #0
 800705e:	d01b      	beq.n	8007098 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	f06f 0208 	mvn.w	r2, #8
 8007068:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	2204      	movs	r2, #4
 800706e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	69db      	ldr	r3, [r3, #28]
 8007076:	f003 0303 	and.w	r3, r3, #3
 800707a:	2b00      	cmp	r3, #0
 800707c:	d003      	beq.n	8007086 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800707e:	6878      	ldr	r0, [r7, #4]
 8007080:	f000 f957 	bl	8007332 <HAL_TIM_IC_CaptureCallback>
 8007084:	e005      	b.n	8007092 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007086:	6878      	ldr	r0, [r7, #4]
 8007088:	f000 f949 	bl	800731e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800708c:	6878      	ldr	r0, [r7, #4]
 800708e:	f000 f95a 	bl	8007346 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	2200      	movs	r2, #0
 8007096:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007098:	68bb      	ldr	r3, [r7, #8]
 800709a:	f003 0310 	and.w	r3, r3, #16
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d020      	beq.n	80070e4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	f003 0310 	and.w	r3, r3, #16
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d01b      	beq.n	80070e4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	f06f 0210 	mvn.w	r2, #16
 80070b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	2208      	movs	r2, #8
 80070ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	69db      	ldr	r3, [r3, #28]
 80070c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d003      	beq.n	80070d2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80070ca:	6878      	ldr	r0, [r7, #4]
 80070cc:	f000 f931 	bl	8007332 <HAL_TIM_IC_CaptureCallback>
 80070d0:	e005      	b.n	80070de <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80070d2:	6878      	ldr	r0, [r7, #4]
 80070d4:	f000 f923 	bl	800731e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80070d8:	6878      	ldr	r0, [r7, #4]
 80070da:	f000 f934 	bl	8007346 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	2200      	movs	r2, #0
 80070e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80070e4:	68bb      	ldr	r3, [r7, #8]
 80070e6:	f003 0301 	and.w	r3, r3, #1
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d00c      	beq.n	8007108 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	f003 0301 	and.w	r3, r3, #1
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d007      	beq.n	8007108 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f06f 0201 	mvn.w	r2, #1
 8007100:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007102:	6878      	ldr	r0, [r7, #4]
 8007104:	f000 f901 	bl	800730a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8007108:	68bb      	ldr	r3, [r7, #8]
 800710a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800710e:	2b00      	cmp	r3, #0
 8007110:	d00c      	beq.n	800712c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007118:	2b00      	cmp	r3, #0
 800711a:	d007      	beq.n	800712c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8007124:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007126:	6878      	ldr	r0, [r7, #4]
 8007128:	f000 faee 	bl	8007708 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800712c:	68bb      	ldr	r3, [r7, #8]
 800712e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007132:	2b00      	cmp	r3, #0
 8007134:	d00c      	beq.n	8007150 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800713c:	2b00      	cmp	r3, #0
 800713e:	d007      	beq.n	8007150 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007148:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800714a:	6878      	ldr	r0, [r7, #4]
 800714c:	f000 f905 	bl	800735a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007150:	68bb      	ldr	r3, [r7, #8]
 8007152:	f003 0320 	and.w	r3, r3, #32
 8007156:	2b00      	cmp	r3, #0
 8007158:	d00c      	beq.n	8007174 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	f003 0320 	and.w	r3, r3, #32
 8007160:	2b00      	cmp	r3, #0
 8007162:	d007      	beq.n	8007174 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	f06f 0220 	mvn.w	r2, #32
 800716c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800716e:	6878      	ldr	r0, [r7, #4]
 8007170:	f000 fac0 	bl	80076f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007174:	bf00      	nop
 8007176:	3710      	adds	r7, #16
 8007178:	46bd      	mov	sp, r7
 800717a:	bd80      	pop	{r7, pc}

0800717c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800717c:	b580      	push	{r7, lr}
 800717e:	b084      	sub	sp, #16
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
 8007184:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007186:	2300      	movs	r3, #0
 8007188:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007190:	2b01      	cmp	r3, #1
 8007192:	d101      	bne.n	8007198 <HAL_TIM_ConfigClockSource+0x1c>
 8007194:	2302      	movs	r3, #2
 8007196:	e0b4      	b.n	8007302 <HAL_TIM_ConfigClockSource+0x186>
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	2201      	movs	r2, #1
 800719c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2202      	movs	r2, #2
 80071a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	689b      	ldr	r3, [r3, #8]
 80071ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80071b0:	68bb      	ldr	r3, [r7, #8]
 80071b2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80071b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80071b8:	68bb      	ldr	r3, [r7, #8]
 80071ba:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80071be:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	68ba      	ldr	r2, [r7, #8]
 80071c6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80071d0:	d03e      	beq.n	8007250 <HAL_TIM_ConfigClockSource+0xd4>
 80071d2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80071d6:	f200 8087 	bhi.w	80072e8 <HAL_TIM_ConfigClockSource+0x16c>
 80071da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80071de:	f000 8086 	beq.w	80072ee <HAL_TIM_ConfigClockSource+0x172>
 80071e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80071e6:	d87f      	bhi.n	80072e8 <HAL_TIM_ConfigClockSource+0x16c>
 80071e8:	2b70      	cmp	r3, #112	@ 0x70
 80071ea:	d01a      	beq.n	8007222 <HAL_TIM_ConfigClockSource+0xa6>
 80071ec:	2b70      	cmp	r3, #112	@ 0x70
 80071ee:	d87b      	bhi.n	80072e8 <HAL_TIM_ConfigClockSource+0x16c>
 80071f0:	2b60      	cmp	r3, #96	@ 0x60
 80071f2:	d050      	beq.n	8007296 <HAL_TIM_ConfigClockSource+0x11a>
 80071f4:	2b60      	cmp	r3, #96	@ 0x60
 80071f6:	d877      	bhi.n	80072e8 <HAL_TIM_ConfigClockSource+0x16c>
 80071f8:	2b50      	cmp	r3, #80	@ 0x50
 80071fa:	d03c      	beq.n	8007276 <HAL_TIM_ConfigClockSource+0xfa>
 80071fc:	2b50      	cmp	r3, #80	@ 0x50
 80071fe:	d873      	bhi.n	80072e8 <HAL_TIM_ConfigClockSource+0x16c>
 8007200:	2b40      	cmp	r3, #64	@ 0x40
 8007202:	d058      	beq.n	80072b6 <HAL_TIM_ConfigClockSource+0x13a>
 8007204:	2b40      	cmp	r3, #64	@ 0x40
 8007206:	d86f      	bhi.n	80072e8 <HAL_TIM_ConfigClockSource+0x16c>
 8007208:	2b30      	cmp	r3, #48	@ 0x30
 800720a:	d064      	beq.n	80072d6 <HAL_TIM_ConfigClockSource+0x15a>
 800720c:	2b30      	cmp	r3, #48	@ 0x30
 800720e:	d86b      	bhi.n	80072e8 <HAL_TIM_ConfigClockSource+0x16c>
 8007210:	2b20      	cmp	r3, #32
 8007212:	d060      	beq.n	80072d6 <HAL_TIM_ConfigClockSource+0x15a>
 8007214:	2b20      	cmp	r3, #32
 8007216:	d867      	bhi.n	80072e8 <HAL_TIM_ConfigClockSource+0x16c>
 8007218:	2b00      	cmp	r3, #0
 800721a:	d05c      	beq.n	80072d6 <HAL_TIM_ConfigClockSource+0x15a>
 800721c:	2b10      	cmp	r3, #16
 800721e:	d05a      	beq.n	80072d6 <HAL_TIM_ConfigClockSource+0x15a>
 8007220:	e062      	b.n	80072e8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007226:	683b      	ldr	r3, [r7, #0]
 8007228:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800722a:	683b      	ldr	r3, [r7, #0]
 800722c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800722e:	683b      	ldr	r3, [r7, #0]
 8007230:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007232:	f000 f9c3 	bl	80075bc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	689b      	ldr	r3, [r3, #8]
 800723c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800723e:	68bb      	ldr	r3, [r7, #8]
 8007240:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007244:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	68ba      	ldr	r2, [r7, #8]
 800724c:	609a      	str	r2, [r3, #8]
      break;
 800724e:	e04f      	b.n	80072f0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007254:	683b      	ldr	r3, [r7, #0]
 8007256:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007258:	683b      	ldr	r3, [r7, #0]
 800725a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007260:	f000 f9ac 	bl	80075bc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	689a      	ldr	r2, [r3, #8]
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007272:	609a      	str	r2, [r3, #8]
      break;
 8007274:	e03c      	b.n	80072f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800727a:	683b      	ldr	r3, [r7, #0]
 800727c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800727e:	683b      	ldr	r3, [r7, #0]
 8007280:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007282:	461a      	mov	r2, r3
 8007284:	f000 f920 	bl	80074c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	2150      	movs	r1, #80	@ 0x50
 800728e:	4618      	mov	r0, r3
 8007290:	f000 f979 	bl	8007586 <TIM_ITRx_SetConfig>
      break;
 8007294:	e02c      	b.n	80072f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800729a:	683b      	ldr	r3, [r7, #0]
 800729c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800729e:	683b      	ldr	r3, [r7, #0]
 80072a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80072a2:	461a      	mov	r2, r3
 80072a4:	f000 f93f 	bl	8007526 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	2160      	movs	r1, #96	@ 0x60
 80072ae:	4618      	mov	r0, r3
 80072b0:	f000 f969 	bl	8007586 <TIM_ITRx_SetConfig>
      break;
 80072b4:	e01c      	b.n	80072f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80072be:	683b      	ldr	r3, [r7, #0]
 80072c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80072c2:	461a      	mov	r2, r3
 80072c4:	f000 f900 	bl	80074c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	2140      	movs	r1, #64	@ 0x40
 80072ce:	4618      	mov	r0, r3
 80072d0:	f000 f959 	bl	8007586 <TIM_ITRx_SetConfig>
      break;
 80072d4:	e00c      	b.n	80072f0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681a      	ldr	r2, [r3, #0]
 80072da:	683b      	ldr	r3, [r7, #0]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	4619      	mov	r1, r3
 80072e0:	4610      	mov	r0, r2
 80072e2:	f000 f950 	bl	8007586 <TIM_ITRx_SetConfig>
      break;
 80072e6:	e003      	b.n	80072f0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80072e8:	2301      	movs	r3, #1
 80072ea:	73fb      	strb	r3, [r7, #15]
      break;
 80072ec:	e000      	b.n	80072f0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80072ee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2201      	movs	r2, #1
 80072f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2200      	movs	r2, #0
 80072fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007300:	7bfb      	ldrb	r3, [r7, #15]
}
 8007302:	4618      	mov	r0, r3
 8007304:	3710      	adds	r7, #16
 8007306:	46bd      	mov	sp, r7
 8007308:	bd80      	pop	{r7, pc}

0800730a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800730a:	b480      	push	{r7}
 800730c:	b083      	sub	sp, #12
 800730e:	af00      	add	r7, sp, #0
 8007310:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007312:	bf00      	nop
 8007314:	370c      	adds	r7, #12
 8007316:	46bd      	mov	sp, r7
 8007318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731c:	4770      	bx	lr

0800731e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800731e:	b480      	push	{r7}
 8007320:	b083      	sub	sp, #12
 8007322:	af00      	add	r7, sp, #0
 8007324:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007326:	bf00      	nop
 8007328:	370c      	adds	r7, #12
 800732a:	46bd      	mov	sp, r7
 800732c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007330:	4770      	bx	lr

08007332 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007332:	b480      	push	{r7}
 8007334:	b083      	sub	sp, #12
 8007336:	af00      	add	r7, sp, #0
 8007338:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800733a:	bf00      	nop
 800733c:	370c      	adds	r7, #12
 800733e:	46bd      	mov	sp, r7
 8007340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007344:	4770      	bx	lr

08007346 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007346:	b480      	push	{r7}
 8007348:	b083      	sub	sp, #12
 800734a:	af00      	add	r7, sp, #0
 800734c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800734e:	bf00      	nop
 8007350:	370c      	adds	r7, #12
 8007352:	46bd      	mov	sp, r7
 8007354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007358:	4770      	bx	lr

0800735a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800735a:	b480      	push	{r7}
 800735c:	b083      	sub	sp, #12
 800735e:	af00      	add	r7, sp, #0
 8007360:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007362:	bf00      	nop
 8007364:	370c      	adds	r7, #12
 8007366:	46bd      	mov	sp, r7
 8007368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736c:	4770      	bx	lr
	...

08007370 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007370:	b480      	push	{r7}
 8007372:	b085      	sub	sp, #20
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
 8007378:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	4a46      	ldr	r2, [pc, #280]	@ (800749c <TIM_Base_SetConfig+0x12c>)
 8007384:	4293      	cmp	r3, r2
 8007386:	d013      	beq.n	80073b0 <TIM_Base_SetConfig+0x40>
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800738e:	d00f      	beq.n	80073b0 <TIM_Base_SetConfig+0x40>
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	4a43      	ldr	r2, [pc, #268]	@ (80074a0 <TIM_Base_SetConfig+0x130>)
 8007394:	4293      	cmp	r3, r2
 8007396:	d00b      	beq.n	80073b0 <TIM_Base_SetConfig+0x40>
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	4a42      	ldr	r2, [pc, #264]	@ (80074a4 <TIM_Base_SetConfig+0x134>)
 800739c:	4293      	cmp	r3, r2
 800739e:	d007      	beq.n	80073b0 <TIM_Base_SetConfig+0x40>
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	4a41      	ldr	r2, [pc, #260]	@ (80074a8 <TIM_Base_SetConfig+0x138>)
 80073a4:	4293      	cmp	r3, r2
 80073a6:	d003      	beq.n	80073b0 <TIM_Base_SetConfig+0x40>
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	4a40      	ldr	r2, [pc, #256]	@ (80074ac <TIM_Base_SetConfig+0x13c>)
 80073ac:	4293      	cmp	r3, r2
 80073ae:	d108      	bne.n	80073c2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80073b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80073b8:	683b      	ldr	r3, [r7, #0]
 80073ba:	685b      	ldr	r3, [r3, #4]
 80073bc:	68fa      	ldr	r2, [r7, #12]
 80073be:	4313      	orrs	r3, r2
 80073c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	4a35      	ldr	r2, [pc, #212]	@ (800749c <TIM_Base_SetConfig+0x12c>)
 80073c6:	4293      	cmp	r3, r2
 80073c8:	d02b      	beq.n	8007422 <TIM_Base_SetConfig+0xb2>
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80073d0:	d027      	beq.n	8007422 <TIM_Base_SetConfig+0xb2>
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	4a32      	ldr	r2, [pc, #200]	@ (80074a0 <TIM_Base_SetConfig+0x130>)
 80073d6:	4293      	cmp	r3, r2
 80073d8:	d023      	beq.n	8007422 <TIM_Base_SetConfig+0xb2>
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	4a31      	ldr	r2, [pc, #196]	@ (80074a4 <TIM_Base_SetConfig+0x134>)
 80073de:	4293      	cmp	r3, r2
 80073e0:	d01f      	beq.n	8007422 <TIM_Base_SetConfig+0xb2>
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	4a30      	ldr	r2, [pc, #192]	@ (80074a8 <TIM_Base_SetConfig+0x138>)
 80073e6:	4293      	cmp	r3, r2
 80073e8:	d01b      	beq.n	8007422 <TIM_Base_SetConfig+0xb2>
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	4a2f      	ldr	r2, [pc, #188]	@ (80074ac <TIM_Base_SetConfig+0x13c>)
 80073ee:	4293      	cmp	r3, r2
 80073f0:	d017      	beq.n	8007422 <TIM_Base_SetConfig+0xb2>
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	4a2e      	ldr	r2, [pc, #184]	@ (80074b0 <TIM_Base_SetConfig+0x140>)
 80073f6:	4293      	cmp	r3, r2
 80073f8:	d013      	beq.n	8007422 <TIM_Base_SetConfig+0xb2>
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	4a2d      	ldr	r2, [pc, #180]	@ (80074b4 <TIM_Base_SetConfig+0x144>)
 80073fe:	4293      	cmp	r3, r2
 8007400:	d00f      	beq.n	8007422 <TIM_Base_SetConfig+0xb2>
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	4a2c      	ldr	r2, [pc, #176]	@ (80074b8 <TIM_Base_SetConfig+0x148>)
 8007406:	4293      	cmp	r3, r2
 8007408:	d00b      	beq.n	8007422 <TIM_Base_SetConfig+0xb2>
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	4a2b      	ldr	r2, [pc, #172]	@ (80074bc <TIM_Base_SetConfig+0x14c>)
 800740e:	4293      	cmp	r3, r2
 8007410:	d007      	beq.n	8007422 <TIM_Base_SetConfig+0xb2>
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	4a2a      	ldr	r2, [pc, #168]	@ (80074c0 <TIM_Base_SetConfig+0x150>)
 8007416:	4293      	cmp	r3, r2
 8007418:	d003      	beq.n	8007422 <TIM_Base_SetConfig+0xb2>
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	4a29      	ldr	r2, [pc, #164]	@ (80074c4 <TIM_Base_SetConfig+0x154>)
 800741e:	4293      	cmp	r3, r2
 8007420:	d108      	bne.n	8007434 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007428:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800742a:	683b      	ldr	r3, [r7, #0]
 800742c:	68db      	ldr	r3, [r3, #12]
 800742e:	68fa      	ldr	r2, [r7, #12]
 8007430:	4313      	orrs	r3, r2
 8007432:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800743a:	683b      	ldr	r3, [r7, #0]
 800743c:	695b      	ldr	r3, [r3, #20]
 800743e:	4313      	orrs	r3, r2
 8007440:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	68fa      	ldr	r2, [r7, #12]
 8007446:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007448:	683b      	ldr	r3, [r7, #0]
 800744a:	689a      	ldr	r2, [r3, #8]
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007450:	683b      	ldr	r3, [r7, #0]
 8007452:	681a      	ldr	r2, [r3, #0]
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	4a10      	ldr	r2, [pc, #64]	@ (800749c <TIM_Base_SetConfig+0x12c>)
 800745c:	4293      	cmp	r3, r2
 800745e:	d003      	beq.n	8007468 <TIM_Base_SetConfig+0xf8>
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	4a12      	ldr	r2, [pc, #72]	@ (80074ac <TIM_Base_SetConfig+0x13c>)
 8007464:	4293      	cmp	r3, r2
 8007466:	d103      	bne.n	8007470 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007468:	683b      	ldr	r3, [r7, #0]
 800746a:	691a      	ldr	r2, [r3, #16]
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2201      	movs	r2, #1
 8007474:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	691b      	ldr	r3, [r3, #16]
 800747a:	f003 0301 	and.w	r3, r3, #1
 800747e:	2b01      	cmp	r3, #1
 8007480:	d105      	bne.n	800748e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	691b      	ldr	r3, [r3, #16]
 8007486:	f023 0201 	bic.w	r2, r3, #1
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	611a      	str	r2, [r3, #16]
  }
}
 800748e:	bf00      	nop
 8007490:	3714      	adds	r7, #20
 8007492:	46bd      	mov	sp, r7
 8007494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007498:	4770      	bx	lr
 800749a:	bf00      	nop
 800749c:	40010000 	.word	0x40010000
 80074a0:	40000400 	.word	0x40000400
 80074a4:	40000800 	.word	0x40000800
 80074a8:	40000c00 	.word	0x40000c00
 80074ac:	40010400 	.word	0x40010400
 80074b0:	40014000 	.word	0x40014000
 80074b4:	40014400 	.word	0x40014400
 80074b8:	40014800 	.word	0x40014800
 80074bc:	40001800 	.word	0x40001800
 80074c0:	40001c00 	.word	0x40001c00
 80074c4:	40002000 	.word	0x40002000

080074c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80074c8:	b480      	push	{r7}
 80074ca:	b087      	sub	sp, #28
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	60f8      	str	r0, [r7, #12]
 80074d0:	60b9      	str	r1, [r7, #8]
 80074d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	6a1b      	ldr	r3, [r3, #32]
 80074d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	6a1b      	ldr	r3, [r3, #32]
 80074de:	f023 0201 	bic.w	r2, r3, #1
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	699b      	ldr	r3, [r3, #24]
 80074ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80074ec:	693b      	ldr	r3, [r7, #16]
 80074ee:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80074f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	011b      	lsls	r3, r3, #4
 80074f8:	693a      	ldr	r2, [r7, #16]
 80074fa:	4313      	orrs	r3, r2
 80074fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80074fe:	697b      	ldr	r3, [r7, #20]
 8007500:	f023 030a 	bic.w	r3, r3, #10
 8007504:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007506:	697a      	ldr	r2, [r7, #20]
 8007508:	68bb      	ldr	r3, [r7, #8]
 800750a:	4313      	orrs	r3, r2
 800750c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	693a      	ldr	r2, [r7, #16]
 8007512:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	697a      	ldr	r2, [r7, #20]
 8007518:	621a      	str	r2, [r3, #32]
}
 800751a:	bf00      	nop
 800751c:	371c      	adds	r7, #28
 800751e:	46bd      	mov	sp, r7
 8007520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007524:	4770      	bx	lr

08007526 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007526:	b480      	push	{r7}
 8007528:	b087      	sub	sp, #28
 800752a:	af00      	add	r7, sp, #0
 800752c:	60f8      	str	r0, [r7, #12]
 800752e:	60b9      	str	r1, [r7, #8]
 8007530:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	6a1b      	ldr	r3, [r3, #32]
 8007536:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	6a1b      	ldr	r3, [r3, #32]
 800753c:	f023 0210 	bic.w	r2, r3, #16
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	699b      	ldr	r3, [r3, #24]
 8007548:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800754a:	693b      	ldr	r3, [r7, #16]
 800754c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007550:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	031b      	lsls	r3, r3, #12
 8007556:	693a      	ldr	r2, [r7, #16]
 8007558:	4313      	orrs	r3, r2
 800755a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800755c:	697b      	ldr	r3, [r7, #20]
 800755e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007562:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007564:	68bb      	ldr	r3, [r7, #8]
 8007566:	011b      	lsls	r3, r3, #4
 8007568:	697a      	ldr	r2, [r7, #20]
 800756a:	4313      	orrs	r3, r2
 800756c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	693a      	ldr	r2, [r7, #16]
 8007572:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	697a      	ldr	r2, [r7, #20]
 8007578:	621a      	str	r2, [r3, #32]
}
 800757a:	bf00      	nop
 800757c:	371c      	adds	r7, #28
 800757e:	46bd      	mov	sp, r7
 8007580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007584:	4770      	bx	lr

08007586 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007586:	b480      	push	{r7}
 8007588:	b085      	sub	sp, #20
 800758a:	af00      	add	r7, sp, #0
 800758c:	6078      	str	r0, [r7, #4]
 800758e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	689b      	ldr	r3, [r3, #8]
 8007594:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800759c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800759e:	683a      	ldr	r2, [r7, #0]
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	4313      	orrs	r3, r2
 80075a4:	f043 0307 	orr.w	r3, r3, #7
 80075a8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	68fa      	ldr	r2, [r7, #12]
 80075ae:	609a      	str	r2, [r3, #8]
}
 80075b0:	bf00      	nop
 80075b2:	3714      	adds	r7, #20
 80075b4:	46bd      	mov	sp, r7
 80075b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ba:	4770      	bx	lr

080075bc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80075bc:	b480      	push	{r7}
 80075be:	b087      	sub	sp, #28
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	60f8      	str	r0, [r7, #12]
 80075c4:	60b9      	str	r1, [r7, #8]
 80075c6:	607a      	str	r2, [r7, #4]
 80075c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	689b      	ldr	r3, [r3, #8]
 80075ce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80075d0:	697b      	ldr	r3, [r7, #20]
 80075d2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80075d6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80075d8:	683b      	ldr	r3, [r7, #0]
 80075da:	021a      	lsls	r2, r3, #8
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	431a      	orrs	r2, r3
 80075e0:	68bb      	ldr	r3, [r7, #8]
 80075e2:	4313      	orrs	r3, r2
 80075e4:	697a      	ldr	r2, [r7, #20]
 80075e6:	4313      	orrs	r3, r2
 80075e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	697a      	ldr	r2, [r7, #20]
 80075ee:	609a      	str	r2, [r3, #8]
}
 80075f0:	bf00      	nop
 80075f2:	371c      	adds	r7, #28
 80075f4:	46bd      	mov	sp, r7
 80075f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fa:	4770      	bx	lr

080075fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80075fc:	b480      	push	{r7}
 80075fe:	b085      	sub	sp, #20
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]
 8007604:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800760c:	2b01      	cmp	r3, #1
 800760e:	d101      	bne.n	8007614 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007610:	2302      	movs	r3, #2
 8007612:	e05a      	b.n	80076ca <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2201      	movs	r2, #1
 8007618:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2202      	movs	r2, #2
 8007620:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	685b      	ldr	r3, [r3, #4]
 800762a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	689b      	ldr	r3, [r3, #8]
 8007632:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800763a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	68fa      	ldr	r2, [r7, #12]
 8007642:	4313      	orrs	r3, r2
 8007644:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	68fa      	ldr	r2, [r7, #12]
 800764c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	4a21      	ldr	r2, [pc, #132]	@ (80076d8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007654:	4293      	cmp	r3, r2
 8007656:	d022      	beq.n	800769e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007660:	d01d      	beq.n	800769e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	4a1d      	ldr	r2, [pc, #116]	@ (80076dc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007668:	4293      	cmp	r3, r2
 800766a:	d018      	beq.n	800769e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	4a1b      	ldr	r2, [pc, #108]	@ (80076e0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007672:	4293      	cmp	r3, r2
 8007674:	d013      	beq.n	800769e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	4a1a      	ldr	r2, [pc, #104]	@ (80076e4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800767c:	4293      	cmp	r3, r2
 800767e:	d00e      	beq.n	800769e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	4a18      	ldr	r2, [pc, #96]	@ (80076e8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007686:	4293      	cmp	r3, r2
 8007688:	d009      	beq.n	800769e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	4a17      	ldr	r2, [pc, #92]	@ (80076ec <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007690:	4293      	cmp	r3, r2
 8007692:	d004      	beq.n	800769e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	4a15      	ldr	r2, [pc, #84]	@ (80076f0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800769a:	4293      	cmp	r3, r2
 800769c:	d10c      	bne.n	80076b8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800769e:	68bb      	ldr	r3, [r7, #8]
 80076a0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80076a4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80076a6:	683b      	ldr	r3, [r7, #0]
 80076a8:	685b      	ldr	r3, [r3, #4]
 80076aa:	68ba      	ldr	r2, [r7, #8]
 80076ac:	4313      	orrs	r3, r2
 80076ae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	68ba      	ldr	r2, [r7, #8]
 80076b6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	2201      	movs	r2, #1
 80076bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2200      	movs	r2, #0
 80076c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80076c8:	2300      	movs	r3, #0
}
 80076ca:	4618      	mov	r0, r3
 80076cc:	3714      	adds	r7, #20
 80076ce:	46bd      	mov	sp, r7
 80076d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d4:	4770      	bx	lr
 80076d6:	bf00      	nop
 80076d8:	40010000 	.word	0x40010000
 80076dc:	40000400 	.word	0x40000400
 80076e0:	40000800 	.word	0x40000800
 80076e4:	40000c00 	.word	0x40000c00
 80076e8:	40010400 	.word	0x40010400
 80076ec:	40014000 	.word	0x40014000
 80076f0:	40001800 	.word	0x40001800

080076f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80076f4:	b480      	push	{r7}
 80076f6:	b083      	sub	sp, #12
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80076fc:	bf00      	nop
 80076fe:	370c      	adds	r7, #12
 8007700:	46bd      	mov	sp, r7
 8007702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007706:	4770      	bx	lr

08007708 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007708:	b480      	push	{r7}
 800770a:	b083      	sub	sp, #12
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007710:	bf00      	nop
 8007712:	370c      	adds	r7, #12
 8007714:	46bd      	mov	sp, r7
 8007716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771a:	4770      	bx	lr

0800771c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800771c:	b580      	push	{r7, lr}
 800771e:	b082      	sub	sp, #8
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d101      	bne.n	800772e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800772a:	2301      	movs	r3, #1
 800772c:	e042      	b.n	80077b4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007734:	b2db      	uxtb	r3, r3
 8007736:	2b00      	cmp	r3, #0
 8007738:	d106      	bne.n	8007748 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	2200      	movs	r2, #0
 800773e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007742:	6878      	ldr	r0, [r7, #4]
 8007744:	f7fb f8ba 	bl	80028bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	2224      	movs	r2, #36	@ 0x24
 800774c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	68da      	ldr	r2, [r3, #12]
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800775e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007760:	6878      	ldr	r0, [r7, #4]
 8007762:	f000 fe81 	bl	8008468 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	691a      	ldr	r2, [r3, #16]
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007774:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	695a      	ldr	r2, [r3, #20]
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007784:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	68da      	ldr	r2, [r3, #12]
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007794:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	2200      	movs	r2, #0
 800779a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2220      	movs	r2, #32
 80077a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2220      	movs	r2, #32
 80077a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	2200      	movs	r2, #0
 80077b0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80077b2:	2300      	movs	r3, #0
}
 80077b4:	4618      	mov	r0, r3
 80077b6:	3708      	adds	r7, #8
 80077b8:	46bd      	mov	sp, r7
 80077ba:	bd80      	pop	{r7, pc}

080077bc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80077bc:	b580      	push	{r7, lr}
 80077be:	b08a      	sub	sp, #40	@ 0x28
 80077c0:	af02      	add	r7, sp, #8
 80077c2:	60f8      	str	r0, [r7, #12]
 80077c4:	60b9      	str	r1, [r7, #8]
 80077c6:	603b      	str	r3, [r7, #0]
 80077c8:	4613      	mov	r3, r2
 80077ca:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80077cc:	2300      	movs	r3, #0
 80077ce:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80077d6:	b2db      	uxtb	r3, r3
 80077d8:	2b20      	cmp	r3, #32
 80077da:	d175      	bne.n	80078c8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80077dc:	68bb      	ldr	r3, [r7, #8]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d002      	beq.n	80077e8 <HAL_UART_Transmit+0x2c>
 80077e2:	88fb      	ldrh	r3, [r7, #6]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d101      	bne.n	80077ec <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80077e8:	2301      	movs	r3, #1
 80077ea:	e06e      	b.n	80078ca <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	2200      	movs	r2, #0
 80077f0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	2221      	movs	r2, #33	@ 0x21
 80077f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80077fa:	f7fb fb21 	bl	8002e40 <HAL_GetTick>
 80077fe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	88fa      	ldrh	r2, [r7, #6]
 8007804:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	88fa      	ldrh	r2, [r7, #6]
 800780a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	689b      	ldr	r3, [r3, #8]
 8007810:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007814:	d108      	bne.n	8007828 <HAL_UART_Transmit+0x6c>
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	691b      	ldr	r3, [r3, #16]
 800781a:	2b00      	cmp	r3, #0
 800781c:	d104      	bne.n	8007828 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800781e:	2300      	movs	r3, #0
 8007820:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007822:	68bb      	ldr	r3, [r7, #8]
 8007824:	61bb      	str	r3, [r7, #24]
 8007826:	e003      	b.n	8007830 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007828:	68bb      	ldr	r3, [r7, #8]
 800782a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800782c:	2300      	movs	r3, #0
 800782e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007830:	e02e      	b.n	8007890 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007832:	683b      	ldr	r3, [r7, #0]
 8007834:	9300      	str	r3, [sp, #0]
 8007836:	697b      	ldr	r3, [r7, #20]
 8007838:	2200      	movs	r2, #0
 800783a:	2180      	movs	r1, #128	@ 0x80
 800783c:	68f8      	ldr	r0, [r7, #12]
 800783e:	f000 fbe3 	bl	8008008 <UART_WaitOnFlagUntilTimeout>
 8007842:	4603      	mov	r3, r0
 8007844:	2b00      	cmp	r3, #0
 8007846:	d005      	beq.n	8007854 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	2220      	movs	r2, #32
 800784c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8007850:	2303      	movs	r3, #3
 8007852:	e03a      	b.n	80078ca <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8007854:	69fb      	ldr	r3, [r7, #28]
 8007856:	2b00      	cmp	r3, #0
 8007858:	d10b      	bne.n	8007872 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800785a:	69bb      	ldr	r3, [r7, #24]
 800785c:	881b      	ldrh	r3, [r3, #0]
 800785e:	461a      	mov	r2, r3
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007868:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800786a:	69bb      	ldr	r3, [r7, #24]
 800786c:	3302      	adds	r3, #2
 800786e:	61bb      	str	r3, [r7, #24]
 8007870:	e007      	b.n	8007882 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007872:	69fb      	ldr	r3, [r7, #28]
 8007874:	781a      	ldrb	r2, [r3, #0]
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800787c:	69fb      	ldr	r3, [r7, #28]
 800787e:	3301      	adds	r3, #1
 8007880:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007886:	b29b      	uxth	r3, r3
 8007888:	3b01      	subs	r3, #1
 800788a:	b29a      	uxth	r2, r3
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007894:	b29b      	uxth	r3, r3
 8007896:	2b00      	cmp	r3, #0
 8007898:	d1cb      	bne.n	8007832 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800789a:	683b      	ldr	r3, [r7, #0]
 800789c:	9300      	str	r3, [sp, #0]
 800789e:	697b      	ldr	r3, [r7, #20]
 80078a0:	2200      	movs	r2, #0
 80078a2:	2140      	movs	r1, #64	@ 0x40
 80078a4:	68f8      	ldr	r0, [r7, #12]
 80078a6:	f000 fbaf 	bl	8008008 <UART_WaitOnFlagUntilTimeout>
 80078aa:	4603      	mov	r3, r0
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d005      	beq.n	80078bc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	2220      	movs	r2, #32
 80078b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80078b8:	2303      	movs	r3, #3
 80078ba:	e006      	b.n	80078ca <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	2220      	movs	r2, #32
 80078c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80078c4:	2300      	movs	r3, #0
 80078c6:	e000      	b.n	80078ca <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80078c8:	2302      	movs	r3, #2
  }
}
 80078ca:	4618      	mov	r0, r3
 80078cc:	3720      	adds	r7, #32
 80078ce:	46bd      	mov	sp, r7
 80078d0:	bd80      	pop	{r7, pc}

080078d2 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80078d2:	b580      	push	{r7, lr}
 80078d4:	b08a      	sub	sp, #40	@ 0x28
 80078d6:	af02      	add	r7, sp, #8
 80078d8:	60f8      	str	r0, [r7, #12]
 80078da:	60b9      	str	r1, [r7, #8]
 80078dc:	603b      	str	r3, [r7, #0]
 80078de:	4613      	mov	r3, r2
 80078e0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80078e2:	2300      	movs	r3, #0
 80078e4:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80078ec:	b2db      	uxtb	r3, r3
 80078ee:	2b20      	cmp	r3, #32
 80078f0:	f040 8081 	bne.w	80079f6 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 80078f4:	68bb      	ldr	r3, [r7, #8]
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d002      	beq.n	8007900 <HAL_UART_Receive+0x2e>
 80078fa:	88fb      	ldrh	r3, [r7, #6]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d101      	bne.n	8007904 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8007900:	2301      	movs	r3, #1
 8007902:	e079      	b.n	80079f8 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	2200      	movs	r2, #0
 8007908:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	2222      	movs	r2, #34	@ 0x22
 800790e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	2200      	movs	r2, #0
 8007916:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007918:	f7fb fa92 	bl	8002e40 <HAL_GetTick>
 800791c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	88fa      	ldrh	r2, [r7, #6]
 8007922:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	88fa      	ldrh	r2, [r7, #6]
 8007928:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	689b      	ldr	r3, [r3, #8]
 800792e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007932:	d108      	bne.n	8007946 <HAL_UART_Receive+0x74>
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	691b      	ldr	r3, [r3, #16]
 8007938:	2b00      	cmp	r3, #0
 800793a:	d104      	bne.n	8007946 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 800793c:	2300      	movs	r3, #0
 800793e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007940:	68bb      	ldr	r3, [r7, #8]
 8007942:	61bb      	str	r3, [r7, #24]
 8007944:	e003      	b.n	800794e <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8007946:	68bb      	ldr	r3, [r7, #8]
 8007948:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800794a:	2300      	movs	r3, #0
 800794c:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800794e:	e047      	b.n	80079e0 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8007950:	683b      	ldr	r3, [r7, #0]
 8007952:	9300      	str	r3, [sp, #0]
 8007954:	697b      	ldr	r3, [r7, #20]
 8007956:	2200      	movs	r2, #0
 8007958:	2120      	movs	r1, #32
 800795a:	68f8      	ldr	r0, [r7, #12]
 800795c:	f000 fb54 	bl	8008008 <UART_WaitOnFlagUntilTimeout>
 8007960:	4603      	mov	r3, r0
 8007962:	2b00      	cmp	r3, #0
 8007964:	d005      	beq.n	8007972 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	2220      	movs	r2, #32
 800796a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 800796e:	2303      	movs	r3, #3
 8007970:	e042      	b.n	80079f8 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8007972:	69fb      	ldr	r3, [r7, #28]
 8007974:	2b00      	cmp	r3, #0
 8007976:	d10c      	bne.n	8007992 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	685b      	ldr	r3, [r3, #4]
 800797e:	b29b      	uxth	r3, r3
 8007980:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007984:	b29a      	uxth	r2, r3
 8007986:	69bb      	ldr	r3, [r7, #24]
 8007988:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800798a:	69bb      	ldr	r3, [r7, #24]
 800798c:	3302      	adds	r3, #2
 800798e:	61bb      	str	r3, [r7, #24]
 8007990:	e01f      	b.n	80079d2 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	689b      	ldr	r3, [r3, #8]
 8007996:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800799a:	d007      	beq.n	80079ac <HAL_UART_Receive+0xda>
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	689b      	ldr	r3, [r3, #8]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d10a      	bne.n	80079ba <HAL_UART_Receive+0xe8>
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	691b      	ldr	r3, [r3, #16]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d106      	bne.n	80079ba <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	685b      	ldr	r3, [r3, #4]
 80079b2:	b2da      	uxtb	r2, r3
 80079b4:	69fb      	ldr	r3, [r7, #28]
 80079b6:	701a      	strb	r2, [r3, #0]
 80079b8:	e008      	b.n	80079cc <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	685b      	ldr	r3, [r3, #4]
 80079c0:	b2db      	uxtb	r3, r3
 80079c2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80079c6:	b2da      	uxtb	r2, r3
 80079c8:	69fb      	ldr	r3, [r7, #28]
 80079ca:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80079cc:	69fb      	ldr	r3, [r7, #28]
 80079ce:	3301      	adds	r3, #1
 80079d0:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80079d6:	b29b      	uxth	r3, r3
 80079d8:	3b01      	subs	r3, #1
 80079da:	b29a      	uxth	r2, r3
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80079e4:	b29b      	uxth	r3, r3
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d1b2      	bne.n	8007950 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	2220      	movs	r2, #32
 80079ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 80079f2:	2300      	movs	r3, #0
 80079f4:	e000      	b.n	80079f8 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 80079f6:	2302      	movs	r3, #2
  }
}
 80079f8:	4618      	mov	r0, r3
 80079fa:	3720      	adds	r7, #32
 80079fc:	46bd      	mov	sp, r7
 80079fe:	bd80      	pop	{r7, pc}

08007a00 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007a00:	b480      	push	{r7}
 8007a02:	b085      	sub	sp, #20
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	60f8      	str	r0, [r7, #12]
 8007a08:	60b9      	str	r1, [r7, #8]
 8007a0a:	4613      	mov	r3, r2
 8007a0c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007a14:	b2db      	uxtb	r3, r3
 8007a16:	2b20      	cmp	r3, #32
 8007a18:	d121      	bne.n	8007a5e <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007a1a:	68bb      	ldr	r3, [r7, #8]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d002      	beq.n	8007a26 <HAL_UART_Transmit_IT+0x26>
 8007a20:	88fb      	ldrh	r3, [r7, #6]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d101      	bne.n	8007a2a <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8007a26:	2301      	movs	r3, #1
 8007a28:	e01a      	b.n	8007a60 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	68ba      	ldr	r2, [r7, #8]
 8007a2e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	88fa      	ldrh	r2, [r7, #6]
 8007a34:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	88fa      	ldrh	r2, [r7, #6]
 8007a3a:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	2200      	movs	r2, #0
 8007a40:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	2221      	movs	r2, #33	@ 0x21
 8007a46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	68da      	ldr	r2, [r3, #12]
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8007a58:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	e000      	b.n	8007a60 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8007a5e:	2302      	movs	r3, #2
  }
}
 8007a60:	4618      	mov	r0, r3
 8007a62:	3714      	adds	r7, #20
 8007a64:	46bd      	mov	sp, r7
 8007a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6a:	4770      	bx	lr

08007a6c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007a6c:	b580      	push	{r7, lr}
 8007a6e:	b084      	sub	sp, #16
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	60f8      	str	r0, [r7, #12]
 8007a74:	60b9      	str	r1, [r7, #8]
 8007a76:	4613      	mov	r3, r2
 8007a78:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007a80:	b2db      	uxtb	r3, r3
 8007a82:	2b20      	cmp	r3, #32
 8007a84:	d112      	bne.n	8007aac <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8007a86:	68bb      	ldr	r3, [r7, #8]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d002      	beq.n	8007a92 <HAL_UART_Receive_IT+0x26>
 8007a8c:	88fb      	ldrh	r3, [r7, #6]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d101      	bne.n	8007a96 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007a92:	2301      	movs	r3, #1
 8007a94:	e00b      	b.n	8007aae <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	2200      	movs	r2, #0
 8007a9a:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007a9c:	88fb      	ldrh	r3, [r7, #6]
 8007a9e:	461a      	mov	r2, r3
 8007aa0:	68b9      	ldr	r1, [r7, #8]
 8007aa2:	68f8      	ldr	r0, [r7, #12]
 8007aa4:	f000 fb09 	bl	80080ba <UART_Start_Receive_IT>
 8007aa8:	4603      	mov	r3, r0
 8007aaa:	e000      	b.n	8007aae <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8007aac:	2302      	movs	r3, #2
  }
}
 8007aae:	4618      	mov	r0, r3
 8007ab0:	3710      	adds	r7, #16
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	bd80      	pop	{r7, pc}
	...

08007ab8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b0ba      	sub	sp, #232	@ 0xe8
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	68db      	ldr	r3, [r3, #12]
 8007ad0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	695b      	ldr	r3, [r3, #20]
 8007ada:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8007ade:	2300      	movs	r3, #0
 8007ae0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8007ae4:	2300      	movs	r3, #0
 8007ae6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007aea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007aee:	f003 030f 	and.w	r3, r3, #15
 8007af2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8007af6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d10f      	bne.n	8007b1e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007afe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007b02:	f003 0320 	and.w	r3, r3, #32
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d009      	beq.n	8007b1e <HAL_UART_IRQHandler+0x66>
 8007b0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007b0e:	f003 0320 	and.w	r3, r3, #32
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d003      	beq.n	8007b1e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007b16:	6878      	ldr	r0, [r7, #4]
 8007b18:	f000 fbe8 	bl	80082ec <UART_Receive_IT>
      return;
 8007b1c:	e25b      	b.n	8007fd6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007b1e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	f000 80de 	beq.w	8007ce4 <HAL_UART_IRQHandler+0x22c>
 8007b28:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007b2c:	f003 0301 	and.w	r3, r3, #1
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d106      	bne.n	8007b42 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007b34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007b38:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	f000 80d1 	beq.w	8007ce4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007b42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007b46:	f003 0301 	and.w	r3, r3, #1
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d00b      	beq.n	8007b66 <HAL_UART_IRQHandler+0xae>
 8007b4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007b52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d005      	beq.n	8007b66 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b5e:	f043 0201 	orr.w	r2, r3, #1
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007b66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007b6a:	f003 0304 	and.w	r3, r3, #4
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d00b      	beq.n	8007b8a <HAL_UART_IRQHandler+0xd2>
 8007b72:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007b76:	f003 0301 	and.w	r3, r3, #1
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d005      	beq.n	8007b8a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b82:	f043 0202 	orr.w	r2, r3, #2
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007b8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007b8e:	f003 0302 	and.w	r3, r3, #2
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d00b      	beq.n	8007bae <HAL_UART_IRQHandler+0xf6>
 8007b96:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007b9a:	f003 0301 	and.w	r3, r3, #1
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d005      	beq.n	8007bae <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ba6:	f043 0204 	orr.w	r2, r3, #4
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007bae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007bb2:	f003 0308 	and.w	r3, r3, #8
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d011      	beq.n	8007bde <HAL_UART_IRQHandler+0x126>
 8007bba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007bbe:	f003 0320 	and.w	r3, r3, #32
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d105      	bne.n	8007bd2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007bc6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007bca:	f003 0301 	and.w	r3, r3, #1
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d005      	beq.n	8007bde <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007bd6:	f043 0208 	orr.w	r2, r3, #8
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	f000 81f2 	beq.w	8007fcc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007be8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007bec:	f003 0320 	and.w	r3, r3, #32
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d008      	beq.n	8007c06 <HAL_UART_IRQHandler+0x14e>
 8007bf4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007bf8:	f003 0320 	and.w	r3, r3, #32
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d002      	beq.n	8007c06 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007c00:	6878      	ldr	r0, [r7, #4]
 8007c02:	f000 fb73 	bl	80082ec <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	695b      	ldr	r3, [r3, #20]
 8007c0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c10:	2b40      	cmp	r3, #64	@ 0x40
 8007c12:	bf0c      	ite	eq
 8007c14:	2301      	moveq	r3, #1
 8007c16:	2300      	movne	r3, #0
 8007c18:	b2db      	uxtb	r3, r3
 8007c1a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007c22:	f003 0308 	and.w	r3, r3, #8
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d103      	bne.n	8007c32 <HAL_UART_IRQHandler+0x17a>
 8007c2a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d04f      	beq.n	8007cd2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007c32:	6878      	ldr	r0, [r7, #4]
 8007c34:	f000 fa7b 	bl	800812e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	695b      	ldr	r3, [r3, #20]
 8007c3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c42:	2b40      	cmp	r3, #64	@ 0x40
 8007c44:	d141      	bne.n	8007cca <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	3314      	adds	r3, #20
 8007c4c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c50:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007c54:	e853 3f00 	ldrex	r3, [r3]
 8007c58:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007c5c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007c60:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007c64:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	3314      	adds	r3, #20
 8007c6e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007c72:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007c76:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c7a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007c7e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007c82:	e841 2300 	strex	r3, r2, [r1]
 8007c86:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007c8a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d1d9      	bne.n	8007c46 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d013      	beq.n	8007cc2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c9e:	4a7e      	ldr	r2, [pc, #504]	@ (8007e98 <HAL_UART_IRQHandler+0x3e0>)
 8007ca0:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	f7fb fa7b 	bl	80031a2 <HAL_DMA_Abort_IT>
 8007cac:	4603      	mov	r3, r0
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d016      	beq.n	8007ce0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007cb6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007cb8:	687a      	ldr	r2, [r7, #4]
 8007cba:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8007cbc:	4610      	mov	r0, r2
 8007cbe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007cc0:	e00e      	b.n	8007ce0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007cc2:	6878      	ldr	r0, [r7, #4]
 8007cc4:	f000 f98a 	bl	8007fdc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007cc8:	e00a      	b.n	8007ce0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007cca:	6878      	ldr	r0, [r7, #4]
 8007ccc:	f000 f986 	bl	8007fdc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007cd0:	e006      	b.n	8007ce0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007cd2:	6878      	ldr	r0, [r7, #4]
 8007cd4:	f000 f982 	bl	8007fdc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	2200      	movs	r2, #0
 8007cdc:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8007cde:	e175      	b.n	8007fcc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ce0:	bf00      	nop
    return;
 8007ce2:	e173      	b.n	8007fcc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ce8:	2b01      	cmp	r3, #1
 8007cea:	f040 814f 	bne.w	8007f8c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007cee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007cf2:	f003 0310 	and.w	r3, r3, #16
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	f000 8148 	beq.w	8007f8c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007cfc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007d00:	f003 0310 	and.w	r3, r3, #16
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	f000 8141 	beq.w	8007f8c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	60bb      	str	r3, [r7, #8]
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	60bb      	str	r3, [r7, #8]
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	685b      	ldr	r3, [r3, #4]
 8007d1c:	60bb      	str	r3, [r7, #8]
 8007d1e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	695b      	ldr	r3, [r3, #20]
 8007d26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d2a:	2b40      	cmp	r3, #64	@ 0x40
 8007d2c:	f040 80b6 	bne.w	8007e9c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	685b      	ldr	r3, [r3, #4]
 8007d38:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007d3c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	f000 8145 	beq.w	8007fd0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007d4a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007d4e:	429a      	cmp	r2, r3
 8007d50:	f080 813e 	bcs.w	8007fd0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007d5a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d60:	69db      	ldr	r3, [r3, #28]
 8007d62:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007d66:	f000 8088 	beq.w	8007e7a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	330c      	adds	r3, #12
 8007d70:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d74:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007d78:	e853 3f00 	ldrex	r3, [r3]
 8007d7c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007d80:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007d84:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007d88:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	330c      	adds	r3, #12
 8007d92:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8007d96:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007d9a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d9e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007da2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007da6:	e841 2300 	strex	r3, r2, [r1]
 8007daa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007dae:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d1d9      	bne.n	8007d6a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	3314      	adds	r3, #20
 8007dbc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dbe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007dc0:	e853 3f00 	ldrex	r3, [r3]
 8007dc4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007dc6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007dc8:	f023 0301 	bic.w	r3, r3, #1
 8007dcc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	3314      	adds	r3, #20
 8007dd6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007dda:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007dde:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007de0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007de2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007de6:	e841 2300 	strex	r3, r2, [r1]
 8007dea:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007dec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d1e1      	bne.n	8007db6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	3314      	adds	r3, #20
 8007df8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dfa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007dfc:	e853 3f00 	ldrex	r3, [r3]
 8007e00:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007e02:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007e04:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007e08:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	3314      	adds	r3, #20
 8007e12:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007e16:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007e18:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e1a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007e1c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007e1e:	e841 2300 	strex	r3, r2, [r1]
 8007e22:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007e24:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d1e3      	bne.n	8007df2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	2220      	movs	r2, #32
 8007e2e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	2200      	movs	r2, #0
 8007e36:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	330c      	adds	r3, #12
 8007e3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e40:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007e42:	e853 3f00 	ldrex	r3, [r3]
 8007e46:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007e48:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007e4a:	f023 0310 	bic.w	r3, r3, #16
 8007e4e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	330c      	adds	r3, #12
 8007e58:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8007e5c:	65ba      	str	r2, [r7, #88]	@ 0x58
 8007e5e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e60:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007e62:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007e64:	e841 2300 	strex	r3, r2, [r1]
 8007e68:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007e6a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d1e3      	bne.n	8007e38 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e74:	4618      	mov	r0, r3
 8007e76:	f7fb f924 	bl	80030c2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	2202      	movs	r2, #2
 8007e7e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007e88:	b29b      	uxth	r3, r3
 8007e8a:	1ad3      	subs	r3, r2, r3
 8007e8c:	b29b      	uxth	r3, r3
 8007e8e:	4619      	mov	r1, r3
 8007e90:	6878      	ldr	r0, [r7, #4]
 8007e92:	f000 f8ad 	bl	8007ff0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007e96:	e09b      	b.n	8007fd0 <HAL_UART_IRQHandler+0x518>
 8007e98:	080081f5 	.word	0x080081f5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007ea4:	b29b      	uxth	r3, r3
 8007ea6:	1ad3      	subs	r3, r2, r3
 8007ea8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007eb0:	b29b      	uxth	r3, r3
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	f000 808e 	beq.w	8007fd4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8007eb8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	f000 8089 	beq.w	8007fd4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	330c      	adds	r3, #12
 8007ec8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007eca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ecc:	e853 3f00 	ldrex	r3, [r3]
 8007ed0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007ed2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ed4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007ed8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	330c      	adds	r3, #12
 8007ee2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8007ee6:	647a      	str	r2, [r7, #68]	@ 0x44
 8007ee8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eea:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007eec:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007eee:	e841 2300 	strex	r3, r2, [r1]
 8007ef2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007ef4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d1e3      	bne.n	8007ec2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	3314      	adds	r3, #20
 8007f00:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f04:	e853 3f00 	ldrex	r3, [r3]
 8007f08:	623b      	str	r3, [r7, #32]
   return(result);
 8007f0a:	6a3b      	ldr	r3, [r7, #32]
 8007f0c:	f023 0301 	bic.w	r3, r3, #1
 8007f10:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	3314      	adds	r3, #20
 8007f1a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007f1e:	633a      	str	r2, [r7, #48]	@ 0x30
 8007f20:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f22:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007f24:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007f26:	e841 2300 	strex	r3, r2, [r1]
 8007f2a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007f2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d1e3      	bne.n	8007efa <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	2220      	movs	r2, #32
 8007f36:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	330c      	adds	r3, #12
 8007f46:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f48:	693b      	ldr	r3, [r7, #16]
 8007f4a:	e853 3f00 	ldrex	r3, [r3]
 8007f4e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	f023 0310 	bic.w	r3, r3, #16
 8007f56:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	330c      	adds	r3, #12
 8007f60:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8007f64:	61fa      	str	r2, [r7, #28]
 8007f66:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f68:	69b9      	ldr	r1, [r7, #24]
 8007f6a:	69fa      	ldr	r2, [r7, #28]
 8007f6c:	e841 2300 	strex	r3, r2, [r1]
 8007f70:	617b      	str	r3, [r7, #20]
   return(result);
 8007f72:	697b      	ldr	r3, [r7, #20]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d1e3      	bne.n	8007f40 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	2202      	movs	r2, #2
 8007f7c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007f7e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007f82:	4619      	mov	r1, r3
 8007f84:	6878      	ldr	r0, [r7, #4]
 8007f86:	f000 f833 	bl	8007ff0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007f8a:	e023      	b.n	8007fd4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007f8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007f90:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d009      	beq.n	8007fac <HAL_UART_IRQHandler+0x4f4>
 8007f98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007f9c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d003      	beq.n	8007fac <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8007fa4:	6878      	ldr	r0, [r7, #4]
 8007fa6:	f000 f939 	bl	800821c <UART_Transmit_IT>
    return;
 8007faa:	e014      	b.n	8007fd6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007fac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007fb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d00e      	beq.n	8007fd6 <HAL_UART_IRQHandler+0x51e>
 8007fb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007fbc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d008      	beq.n	8007fd6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8007fc4:	6878      	ldr	r0, [r7, #4]
 8007fc6:	f000 f979 	bl	80082bc <UART_EndTransmit_IT>
    return;
 8007fca:	e004      	b.n	8007fd6 <HAL_UART_IRQHandler+0x51e>
    return;
 8007fcc:	bf00      	nop
 8007fce:	e002      	b.n	8007fd6 <HAL_UART_IRQHandler+0x51e>
      return;
 8007fd0:	bf00      	nop
 8007fd2:	e000      	b.n	8007fd6 <HAL_UART_IRQHandler+0x51e>
      return;
 8007fd4:	bf00      	nop
  }
}
 8007fd6:	37e8      	adds	r7, #232	@ 0xe8
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	bd80      	pop	{r7, pc}

08007fdc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007fdc:	b480      	push	{r7}
 8007fde:	b083      	sub	sp, #12
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007fe4:	bf00      	nop
 8007fe6:	370c      	adds	r7, #12
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fee:	4770      	bx	lr

08007ff0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007ff0:	b480      	push	{r7}
 8007ff2:	b083      	sub	sp, #12
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	6078      	str	r0, [r7, #4]
 8007ff8:	460b      	mov	r3, r1
 8007ffa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007ffc:	bf00      	nop
 8007ffe:	370c      	adds	r7, #12
 8008000:	46bd      	mov	sp, r7
 8008002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008006:	4770      	bx	lr

08008008 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008008:	b580      	push	{r7, lr}
 800800a:	b086      	sub	sp, #24
 800800c:	af00      	add	r7, sp, #0
 800800e:	60f8      	str	r0, [r7, #12]
 8008010:	60b9      	str	r1, [r7, #8]
 8008012:	603b      	str	r3, [r7, #0]
 8008014:	4613      	mov	r3, r2
 8008016:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008018:	e03b      	b.n	8008092 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800801a:	6a3b      	ldr	r3, [r7, #32]
 800801c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008020:	d037      	beq.n	8008092 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008022:	f7fa ff0d 	bl	8002e40 <HAL_GetTick>
 8008026:	4602      	mov	r2, r0
 8008028:	683b      	ldr	r3, [r7, #0]
 800802a:	1ad3      	subs	r3, r2, r3
 800802c:	6a3a      	ldr	r2, [r7, #32]
 800802e:	429a      	cmp	r2, r3
 8008030:	d302      	bcc.n	8008038 <UART_WaitOnFlagUntilTimeout+0x30>
 8008032:	6a3b      	ldr	r3, [r7, #32]
 8008034:	2b00      	cmp	r3, #0
 8008036:	d101      	bne.n	800803c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008038:	2303      	movs	r3, #3
 800803a:	e03a      	b.n	80080b2 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	68db      	ldr	r3, [r3, #12]
 8008042:	f003 0304 	and.w	r3, r3, #4
 8008046:	2b00      	cmp	r3, #0
 8008048:	d023      	beq.n	8008092 <UART_WaitOnFlagUntilTimeout+0x8a>
 800804a:	68bb      	ldr	r3, [r7, #8]
 800804c:	2b80      	cmp	r3, #128	@ 0x80
 800804e:	d020      	beq.n	8008092 <UART_WaitOnFlagUntilTimeout+0x8a>
 8008050:	68bb      	ldr	r3, [r7, #8]
 8008052:	2b40      	cmp	r3, #64	@ 0x40
 8008054:	d01d      	beq.n	8008092 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	f003 0308 	and.w	r3, r3, #8
 8008060:	2b08      	cmp	r3, #8
 8008062:	d116      	bne.n	8008092 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8008064:	2300      	movs	r3, #0
 8008066:	617b      	str	r3, [r7, #20]
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	617b      	str	r3, [r7, #20]
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	685b      	ldr	r3, [r3, #4]
 8008076:	617b      	str	r3, [r7, #20]
 8008078:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800807a:	68f8      	ldr	r0, [r7, #12]
 800807c:	f000 f857 	bl	800812e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	2208      	movs	r2, #8
 8008084:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	2200      	movs	r2, #0
 800808a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800808e:	2301      	movs	r3, #1
 8008090:	e00f      	b.n	80080b2 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	681a      	ldr	r2, [r3, #0]
 8008098:	68bb      	ldr	r3, [r7, #8]
 800809a:	4013      	ands	r3, r2
 800809c:	68ba      	ldr	r2, [r7, #8]
 800809e:	429a      	cmp	r2, r3
 80080a0:	bf0c      	ite	eq
 80080a2:	2301      	moveq	r3, #1
 80080a4:	2300      	movne	r3, #0
 80080a6:	b2db      	uxtb	r3, r3
 80080a8:	461a      	mov	r2, r3
 80080aa:	79fb      	ldrb	r3, [r7, #7]
 80080ac:	429a      	cmp	r2, r3
 80080ae:	d0b4      	beq.n	800801a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80080b0:	2300      	movs	r3, #0
}
 80080b2:	4618      	mov	r0, r3
 80080b4:	3718      	adds	r7, #24
 80080b6:	46bd      	mov	sp, r7
 80080b8:	bd80      	pop	{r7, pc}

080080ba <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80080ba:	b480      	push	{r7}
 80080bc:	b085      	sub	sp, #20
 80080be:	af00      	add	r7, sp, #0
 80080c0:	60f8      	str	r0, [r7, #12]
 80080c2:	60b9      	str	r1, [r7, #8]
 80080c4:	4613      	mov	r3, r2
 80080c6:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	68ba      	ldr	r2, [r7, #8]
 80080cc:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	88fa      	ldrh	r2, [r7, #6]
 80080d2:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	88fa      	ldrh	r2, [r7, #6]
 80080d8:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	2200      	movs	r2, #0
 80080de:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	2222      	movs	r2, #34	@ 0x22
 80080e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	691b      	ldr	r3, [r3, #16]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d007      	beq.n	8008100 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	68da      	ldr	r2, [r3, #12]
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80080fe:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	695a      	ldr	r2, [r3, #20]
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	f042 0201 	orr.w	r2, r2, #1
 800810e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	68da      	ldr	r2, [r3, #12]
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	f042 0220 	orr.w	r2, r2, #32
 800811e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008120:	2300      	movs	r3, #0
}
 8008122:	4618      	mov	r0, r3
 8008124:	3714      	adds	r7, #20
 8008126:	46bd      	mov	sp, r7
 8008128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812c:	4770      	bx	lr

0800812e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800812e:	b480      	push	{r7}
 8008130:	b095      	sub	sp, #84	@ 0x54
 8008132:	af00      	add	r7, sp, #0
 8008134:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	330c      	adds	r3, #12
 800813c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800813e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008140:	e853 3f00 	ldrex	r3, [r3]
 8008144:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008146:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008148:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800814c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	330c      	adds	r3, #12
 8008154:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008156:	643a      	str	r2, [r7, #64]	@ 0x40
 8008158:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800815a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800815c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800815e:	e841 2300 	strex	r3, r2, [r1]
 8008162:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008164:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008166:	2b00      	cmp	r3, #0
 8008168:	d1e5      	bne.n	8008136 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	3314      	adds	r3, #20
 8008170:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008172:	6a3b      	ldr	r3, [r7, #32]
 8008174:	e853 3f00 	ldrex	r3, [r3]
 8008178:	61fb      	str	r3, [r7, #28]
   return(result);
 800817a:	69fb      	ldr	r3, [r7, #28]
 800817c:	f023 0301 	bic.w	r3, r3, #1
 8008180:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	3314      	adds	r3, #20
 8008188:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800818a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800818c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800818e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008190:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008192:	e841 2300 	strex	r3, r2, [r1]
 8008196:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008198:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800819a:	2b00      	cmp	r3, #0
 800819c:	d1e5      	bne.n	800816a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80081a2:	2b01      	cmp	r3, #1
 80081a4:	d119      	bne.n	80081da <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	330c      	adds	r3, #12
 80081ac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	e853 3f00 	ldrex	r3, [r3]
 80081b4:	60bb      	str	r3, [r7, #8]
   return(result);
 80081b6:	68bb      	ldr	r3, [r7, #8]
 80081b8:	f023 0310 	bic.w	r3, r3, #16
 80081bc:	647b      	str	r3, [r7, #68]	@ 0x44
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	330c      	adds	r3, #12
 80081c4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80081c6:	61ba      	str	r2, [r7, #24]
 80081c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081ca:	6979      	ldr	r1, [r7, #20]
 80081cc:	69ba      	ldr	r2, [r7, #24]
 80081ce:	e841 2300 	strex	r3, r2, [r1]
 80081d2:	613b      	str	r3, [r7, #16]
   return(result);
 80081d4:	693b      	ldr	r3, [r7, #16]
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d1e5      	bne.n	80081a6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	2220      	movs	r2, #32
 80081de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	2200      	movs	r2, #0
 80081e6:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80081e8:	bf00      	nop
 80081ea:	3754      	adds	r7, #84	@ 0x54
 80081ec:	46bd      	mov	sp, r7
 80081ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f2:	4770      	bx	lr

080081f4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80081f4:	b580      	push	{r7, lr}
 80081f6:	b084      	sub	sp, #16
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008200:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	2200      	movs	r2, #0
 8008206:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	2200      	movs	r2, #0
 800820c:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800820e:	68f8      	ldr	r0, [r7, #12]
 8008210:	f7ff fee4 	bl	8007fdc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008214:	bf00      	nop
 8008216:	3710      	adds	r7, #16
 8008218:	46bd      	mov	sp, r7
 800821a:	bd80      	pop	{r7, pc}

0800821c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800821c:	b480      	push	{r7}
 800821e:	b085      	sub	sp, #20
 8008220:	af00      	add	r7, sp, #0
 8008222:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800822a:	b2db      	uxtb	r3, r3
 800822c:	2b21      	cmp	r3, #33	@ 0x21
 800822e:	d13e      	bne.n	80082ae <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	689b      	ldr	r3, [r3, #8]
 8008234:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008238:	d114      	bne.n	8008264 <UART_Transmit_IT+0x48>
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	691b      	ldr	r3, [r3, #16]
 800823e:	2b00      	cmp	r3, #0
 8008240:	d110      	bne.n	8008264 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	6a1b      	ldr	r3, [r3, #32]
 8008246:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	881b      	ldrh	r3, [r3, #0]
 800824c:	461a      	mov	r2, r3
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008256:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	6a1b      	ldr	r3, [r3, #32]
 800825c:	1c9a      	adds	r2, r3, #2
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	621a      	str	r2, [r3, #32]
 8008262:	e008      	b.n	8008276 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	6a1b      	ldr	r3, [r3, #32]
 8008268:	1c59      	adds	r1, r3, #1
 800826a:	687a      	ldr	r2, [r7, #4]
 800826c:	6211      	str	r1, [r2, #32]
 800826e:	781a      	ldrb	r2, [r3, #0]
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800827a:	b29b      	uxth	r3, r3
 800827c:	3b01      	subs	r3, #1
 800827e:	b29b      	uxth	r3, r3
 8008280:	687a      	ldr	r2, [r7, #4]
 8008282:	4619      	mov	r1, r3
 8008284:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8008286:	2b00      	cmp	r3, #0
 8008288:	d10f      	bne.n	80082aa <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	68da      	ldr	r2, [r3, #12]
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008298:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	68da      	ldr	r2, [r3, #12]
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80082a8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80082aa:	2300      	movs	r3, #0
 80082ac:	e000      	b.n	80082b0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80082ae:	2302      	movs	r3, #2
  }
}
 80082b0:	4618      	mov	r0, r3
 80082b2:	3714      	adds	r7, #20
 80082b4:	46bd      	mov	sp, r7
 80082b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ba:	4770      	bx	lr

080082bc <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80082bc:	b580      	push	{r7, lr}
 80082be:	b082      	sub	sp, #8
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	68da      	ldr	r2, [r3, #12]
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80082d2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	2220      	movs	r2, #32
 80082d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80082dc:	6878      	ldr	r0, [r7, #4]
 80082de:	f7f9 fe75 	bl	8001fcc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80082e2:	2300      	movs	r3, #0
}
 80082e4:	4618      	mov	r0, r3
 80082e6:	3708      	adds	r7, #8
 80082e8:	46bd      	mov	sp, r7
 80082ea:	bd80      	pop	{r7, pc}

080082ec <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80082ec:	b580      	push	{r7, lr}
 80082ee:	b08c      	sub	sp, #48	@ 0x30
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80082fa:	b2db      	uxtb	r3, r3
 80082fc:	2b22      	cmp	r3, #34	@ 0x22
 80082fe:	f040 80ae 	bne.w	800845e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	689b      	ldr	r3, [r3, #8]
 8008306:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800830a:	d117      	bne.n	800833c <UART_Receive_IT+0x50>
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	691b      	ldr	r3, [r3, #16]
 8008310:	2b00      	cmp	r3, #0
 8008312:	d113      	bne.n	800833c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008314:	2300      	movs	r3, #0
 8008316:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800831c:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	685b      	ldr	r3, [r3, #4]
 8008324:	b29b      	uxth	r3, r3
 8008326:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800832a:	b29a      	uxth	r2, r3
 800832c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800832e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008334:	1c9a      	adds	r2, r3, #2
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	629a      	str	r2, [r3, #40]	@ 0x28
 800833a:	e026      	b.n	800838a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008340:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8008342:	2300      	movs	r3, #0
 8008344:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	689b      	ldr	r3, [r3, #8]
 800834a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800834e:	d007      	beq.n	8008360 <UART_Receive_IT+0x74>
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	689b      	ldr	r3, [r3, #8]
 8008354:	2b00      	cmp	r3, #0
 8008356:	d10a      	bne.n	800836e <UART_Receive_IT+0x82>
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	691b      	ldr	r3, [r3, #16]
 800835c:	2b00      	cmp	r3, #0
 800835e:	d106      	bne.n	800836e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	685b      	ldr	r3, [r3, #4]
 8008366:	b2da      	uxtb	r2, r3
 8008368:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800836a:	701a      	strb	r2, [r3, #0]
 800836c:	e008      	b.n	8008380 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	685b      	ldr	r3, [r3, #4]
 8008374:	b2db      	uxtb	r3, r3
 8008376:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800837a:	b2da      	uxtb	r2, r3
 800837c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800837e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008384:	1c5a      	adds	r2, r3, #1
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800838e:	b29b      	uxth	r3, r3
 8008390:	3b01      	subs	r3, #1
 8008392:	b29b      	uxth	r3, r3
 8008394:	687a      	ldr	r2, [r7, #4]
 8008396:	4619      	mov	r1, r3
 8008398:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800839a:	2b00      	cmp	r3, #0
 800839c:	d15d      	bne.n	800845a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	68da      	ldr	r2, [r3, #12]
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	f022 0220 	bic.w	r2, r2, #32
 80083ac:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	68da      	ldr	r2, [r3, #12]
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80083bc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	695a      	ldr	r2, [r3, #20]
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	f022 0201 	bic.w	r2, r2, #1
 80083cc:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	2220      	movs	r2, #32
 80083d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	2200      	movs	r2, #0
 80083da:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80083e0:	2b01      	cmp	r3, #1
 80083e2:	d135      	bne.n	8008450 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	2200      	movs	r2, #0
 80083e8:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	330c      	adds	r3, #12
 80083f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083f2:	697b      	ldr	r3, [r7, #20]
 80083f4:	e853 3f00 	ldrex	r3, [r3]
 80083f8:	613b      	str	r3, [r7, #16]
   return(result);
 80083fa:	693b      	ldr	r3, [r7, #16]
 80083fc:	f023 0310 	bic.w	r3, r3, #16
 8008400:	627b      	str	r3, [r7, #36]	@ 0x24
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	330c      	adds	r3, #12
 8008408:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800840a:	623a      	str	r2, [r7, #32]
 800840c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800840e:	69f9      	ldr	r1, [r7, #28]
 8008410:	6a3a      	ldr	r2, [r7, #32]
 8008412:	e841 2300 	strex	r3, r2, [r1]
 8008416:	61bb      	str	r3, [r7, #24]
   return(result);
 8008418:	69bb      	ldr	r3, [r7, #24]
 800841a:	2b00      	cmp	r3, #0
 800841c:	d1e5      	bne.n	80083ea <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	f003 0310 	and.w	r3, r3, #16
 8008428:	2b10      	cmp	r3, #16
 800842a:	d10a      	bne.n	8008442 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800842c:	2300      	movs	r3, #0
 800842e:	60fb      	str	r3, [r7, #12]
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	60fb      	str	r3, [r7, #12]
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	685b      	ldr	r3, [r3, #4]
 800843e:	60fb      	str	r3, [r7, #12]
 8008440:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008446:	4619      	mov	r1, r3
 8008448:	6878      	ldr	r0, [r7, #4]
 800844a:	f7ff fdd1 	bl	8007ff0 <HAL_UARTEx_RxEventCallback>
 800844e:	e002      	b.n	8008456 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008450:	6878      	ldr	r0, [r7, #4]
 8008452:	f7f9 fd8d 	bl	8001f70 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008456:	2300      	movs	r3, #0
 8008458:	e002      	b.n	8008460 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800845a:	2300      	movs	r3, #0
 800845c:	e000      	b.n	8008460 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800845e:	2302      	movs	r3, #2
  }
}
 8008460:	4618      	mov	r0, r3
 8008462:	3730      	adds	r7, #48	@ 0x30
 8008464:	46bd      	mov	sp, r7
 8008466:	bd80      	pop	{r7, pc}

08008468 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008468:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800846c:	b0c0      	sub	sp, #256	@ 0x100
 800846e:	af00      	add	r7, sp, #0
 8008470:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008474:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	691b      	ldr	r3, [r3, #16]
 800847c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8008480:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008484:	68d9      	ldr	r1, [r3, #12]
 8008486:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800848a:	681a      	ldr	r2, [r3, #0]
 800848c:	ea40 0301 	orr.w	r3, r0, r1
 8008490:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008492:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008496:	689a      	ldr	r2, [r3, #8]
 8008498:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800849c:	691b      	ldr	r3, [r3, #16]
 800849e:	431a      	orrs	r2, r3
 80084a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80084a4:	695b      	ldr	r3, [r3, #20]
 80084a6:	431a      	orrs	r2, r3
 80084a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80084ac:	69db      	ldr	r3, [r3, #28]
 80084ae:	4313      	orrs	r3, r2
 80084b0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80084b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	68db      	ldr	r3, [r3, #12]
 80084bc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80084c0:	f021 010c 	bic.w	r1, r1, #12
 80084c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80084c8:	681a      	ldr	r2, [r3, #0]
 80084ca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80084ce:	430b      	orrs	r3, r1
 80084d0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80084d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	695b      	ldr	r3, [r3, #20]
 80084da:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80084de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80084e2:	6999      	ldr	r1, [r3, #24]
 80084e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80084e8:	681a      	ldr	r2, [r3, #0]
 80084ea:	ea40 0301 	orr.w	r3, r0, r1
 80084ee:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80084f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80084f4:	681a      	ldr	r2, [r3, #0]
 80084f6:	4b8f      	ldr	r3, [pc, #572]	@ (8008734 <UART_SetConfig+0x2cc>)
 80084f8:	429a      	cmp	r2, r3
 80084fa:	d005      	beq.n	8008508 <UART_SetConfig+0xa0>
 80084fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008500:	681a      	ldr	r2, [r3, #0]
 8008502:	4b8d      	ldr	r3, [pc, #564]	@ (8008738 <UART_SetConfig+0x2d0>)
 8008504:	429a      	cmp	r2, r3
 8008506:	d104      	bne.n	8008512 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008508:	f7fe fc74 	bl	8006df4 <HAL_RCC_GetPCLK2Freq>
 800850c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8008510:	e003      	b.n	800851a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008512:	f7fe fc5b 	bl	8006dcc <HAL_RCC_GetPCLK1Freq>
 8008516:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800851a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800851e:	69db      	ldr	r3, [r3, #28]
 8008520:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008524:	f040 810c 	bne.w	8008740 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008528:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800852c:	2200      	movs	r2, #0
 800852e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008532:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8008536:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800853a:	4622      	mov	r2, r4
 800853c:	462b      	mov	r3, r5
 800853e:	1891      	adds	r1, r2, r2
 8008540:	65b9      	str	r1, [r7, #88]	@ 0x58
 8008542:	415b      	adcs	r3, r3
 8008544:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008546:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800854a:	4621      	mov	r1, r4
 800854c:	eb12 0801 	adds.w	r8, r2, r1
 8008550:	4629      	mov	r1, r5
 8008552:	eb43 0901 	adc.w	r9, r3, r1
 8008556:	f04f 0200 	mov.w	r2, #0
 800855a:	f04f 0300 	mov.w	r3, #0
 800855e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008562:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008566:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800856a:	4690      	mov	r8, r2
 800856c:	4699      	mov	r9, r3
 800856e:	4623      	mov	r3, r4
 8008570:	eb18 0303 	adds.w	r3, r8, r3
 8008574:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008578:	462b      	mov	r3, r5
 800857a:	eb49 0303 	adc.w	r3, r9, r3
 800857e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008582:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008586:	685b      	ldr	r3, [r3, #4]
 8008588:	2200      	movs	r2, #0
 800858a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800858e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8008592:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8008596:	460b      	mov	r3, r1
 8008598:	18db      	adds	r3, r3, r3
 800859a:	653b      	str	r3, [r7, #80]	@ 0x50
 800859c:	4613      	mov	r3, r2
 800859e:	eb42 0303 	adc.w	r3, r2, r3
 80085a2:	657b      	str	r3, [r7, #84]	@ 0x54
 80085a4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80085a8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80085ac:	f7f8 fb6c 	bl	8000c88 <__aeabi_uldivmod>
 80085b0:	4602      	mov	r2, r0
 80085b2:	460b      	mov	r3, r1
 80085b4:	4b61      	ldr	r3, [pc, #388]	@ (800873c <UART_SetConfig+0x2d4>)
 80085b6:	fba3 2302 	umull	r2, r3, r3, r2
 80085ba:	095b      	lsrs	r3, r3, #5
 80085bc:	011c      	lsls	r4, r3, #4
 80085be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80085c2:	2200      	movs	r2, #0
 80085c4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80085c8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80085cc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80085d0:	4642      	mov	r2, r8
 80085d2:	464b      	mov	r3, r9
 80085d4:	1891      	adds	r1, r2, r2
 80085d6:	64b9      	str	r1, [r7, #72]	@ 0x48
 80085d8:	415b      	adcs	r3, r3
 80085da:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80085dc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80085e0:	4641      	mov	r1, r8
 80085e2:	eb12 0a01 	adds.w	sl, r2, r1
 80085e6:	4649      	mov	r1, r9
 80085e8:	eb43 0b01 	adc.w	fp, r3, r1
 80085ec:	f04f 0200 	mov.w	r2, #0
 80085f0:	f04f 0300 	mov.w	r3, #0
 80085f4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80085f8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80085fc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008600:	4692      	mov	sl, r2
 8008602:	469b      	mov	fp, r3
 8008604:	4643      	mov	r3, r8
 8008606:	eb1a 0303 	adds.w	r3, sl, r3
 800860a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800860e:	464b      	mov	r3, r9
 8008610:	eb4b 0303 	adc.w	r3, fp, r3
 8008614:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008618:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800861c:	685b      	ldr	r3, [r3, #4]
 800861e:	2200      	movs	r2, #0
 8008620:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008624:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8008628:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800862c:	460b      	mov	r3, r1
 800862e:	18db      	adds	r3, r3, r3
 8008630:	643b      	str	r3, [r7, #64]	@ 0x40
 8008632:	4613      	mov	r3, r2
 8008634:	eb42 0303 	adc.w	r3, r2, r3
 8008638:	647b      	str	r3, [r7, #68]	@ 0x44
 800863a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800863e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8008642:	f7f8 fb21 	bl	8000c88 <__aeabi_uldivmod>
 8008646:	4602      	mov	r2, r0
 8008648:	460b      	mov	r3, r1
 800864a:	4611      	mov	r1, r2
 800864c:	4b3b      	ldr	r3, [pc, #236]	@ (800873c <UART_SetConfig+0x2d4>)
 800864e:	fba3 2301 	umull	r2, r3, r3, r1
 8008652:	095b      	lsrs	r3, r3, #5
 8008654:	2264      	movs	r2, #100	@ 0x64
 8008656:	fb02 f303 	mul.w	r3, r2, r3
 800865a:	1acb      	subs	r3, r1, r3
 800865c:	00db      	lsls	r3, r3, #3
 800865e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8008662:	4b36      	ldr	r3, [pc, #216]	@ (800873c <UART_SetConfig+0x2d4>)
 8008664:	fba3 2302 	umull	r2, r3, r3, r2
 8008668:	095b      	lsrs	r3, r3, #5
 800866a:	005b      	lsls	r3, r3, #1
 800866c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8008670:	441c      	add	r4, r3
 8008672:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008676:	2200      	movs	r2, #0
 8008678:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800867c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8008680:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8008684:	4642      	mov	r2, r8
 8008686:	464b      	mov	r3, r9
 8008688:	1891      	adds	r1, r2, r2
 800868a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800868c:	415b      	adcs	r3, r3
 800868e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008690:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8008694:	4641      	mov	r1, r8
 8008696:	1851      	adds	r1, r2, r1
 8008698:	6339      	str	r1, [r7, #48]	@ 0x30
 800869a:	4649      	mov	r1, r9
 800869c:	414b      	adcs	r3, r1
 800869e:	637b      	str	r3, [r7, #52]	@ 0x34
 80086a0:	f04f 0200 	mov.w	r2, #0
 80086a4:	f04f 0300 	mov.w	r3, #0
 80086a8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80086ac:	4659      	mov	r1, fp
 80086ae:	00cb      	lsls	r3, r1, #3
 80086b0:	4651      	mov	r1, sl
 80086b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80086b6:	4651      	mov	r1, sl
 80086b8:	00ca      	lsls	r2, r1, #3
 80086ba:	4610      	mov	r0, r2
 80086bc:	4619      	mov	r1, r3
 80086be:	4603      	mov	r3, r0
 80086c0:	4642      	mov	r2, r8
 80086c2:	189b      	adds	r3, r3, r2
 80086c4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80086c8:	464b      	mov	r3, r9
 80086ca:	460a      	mov	r2, r1
 80086cc:	eb42 0303 	adc.w	r3, r2, r3
 80086d0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80086d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80086d8:	685b      	ldr	r3, [r3, #4]
 80086da:	2200      	movs	r2, #0
 80086dc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80086e0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80086e4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80086e8:	460b      	mov	r3, r1
 80086ea:	18db      	adds	r3, r3, r3
 80086ec:	62bb      	str	r3, [r7, #40]	@ 0x28
 80086ee:	4613      	mov	r3, r2
 80086f0:	eb42 0303 	adc.w	r3, r2, r3
 80086f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80086f6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80086fa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80086fe:	f7f8 fac3 	bl	8000c88 <__aeabi_uldivmod>
 8008702:	4602      	mov	r2, r0
 8008704:	460b      	mov	r3, r1
 8008706:	4b0d      	ldr	r3, [pc, #52]	@ (800873c <UART_SetConfig+0x2d4>)
 8008708:	fba3 1302 	umull	r1, r3, r3, r2
 800870c:	095b      	lsrs	r3, r3, #5
 800870e:	2164      	movs	r1, #100	@ 0x64
 8008710:	fb01 f303 	mul.w	r3, r1, r3
 8008714:	1ad3      	subs	r3, r2, r3
 8008716:	00db      	lsls	r3, r3, #3
 8008718:	3332      	adds	r3, #50	@ 0x32
 800871a:	4a08      	ldr	r2, [pc, #32]	@ (800873c <UART_SetConfig+0x2d4>)
 800871c:	fba2 2303 	umull	r2, r3, r2, r3
 8008720:	095b      	lsrs	r3, r3, #5
 8008722:	f003 0207 	and.w	r2, r3, #7
 8008726:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	4422      	add	r2, r4
 800872e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008730:	e106      	b.n	8008940 <UART_SetConfig+0x4d8>
 8008732:	bf00      	nop
 8008734:	40011000 	.word	0x40011000
 8008738:	40011400 	.word	0x40011400
 800873c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008740:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008744:	2200      	movs	r2, #0
 8008746:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800874a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800874e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8008752:	4642      	mov	r2, r8
 8008754:	464b      	mov	r3, r9
 8008756:	1891      	adds	r1, r2, r2
 8008758:	6239      	str	r1, [r7, #32]
 800875a:	415b      	adcs	r3, r3
 800875c:	627b      	str	r3, [r7, #36]	@ 0x24
 800875e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008762:	4641      	mov	r1, r8
 8008764:	1854      	adds	r4, r2, r1
 8008766:	4649      	mov	r1, r9
 8008768:	eb43 0501 	adc.w	r5, r3, r1
 800876c:	f04f 0200 	mov.w	r2, #0
 8008770:	f04f 0300 	mov.w	r3, #0
 8008774:	00eb      	lsls	r3, r5, #3
 8008776:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800877a:	00e2      	lsls	r2, r4, #3
 800877c:	4614      	mov	r4, r2
 800877e:	461d      	mov	r5, r3
 8008780:	4643      	mov	r3, r8
 8008782:	18e3      	adds	r3, r4, r3
 8008784:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008788:	464b      	mov	r3, r9
 800878a:	eb45 0303 	adc.w	r3, r5, r3
 800878e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008792:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008796:	685b      	ldr	r3, [r3, #4]
 8008798:	2200      	movs	r2, #0
 800879a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800879e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80087a2:	f04f 0200 	mov.w	r2, #0
 80087a6:	f04f 0300 	mov.w	r3, #0
 80087aa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80087ae:	4629      	mov	r1, r5
 80087b0:	008b      	lsls	r3, r1, #2
 80087b2:	4621      	mov	r1, r4
 80087b4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80087b8:	4621      	mov	r1, r4
 80087ba:	008a      	lsls	r2, r1, #2
 80087bc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80087c0:	f7f8 fa62 	bl	8000c88 <__aeabi_uldivmod>
 80087c4:	4602      	mov	r2, r0
 80087c6:	460b      	mov	r3, r1
 80087c8:	4b60      	ldr	r3, [pc, #384]	@ (800894c <UART_SetConfig+0x4e4>)
 80087ca:	fba3 2302 	umull	r2, r3, r3, r2
 80087ce:	095b      	lsrs	r3, r3, #5
 80087d0:	011c      	lsls	r4, r3, #4
 80087d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80087d6:	2200      	movs	r2, #0
 80087d8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80087dc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80087e0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80087e4:	4642      	mov	r2, r8
 80087e6:	464b      	mov	r3, r9
 80087e8:	1891      	adds	r1, r2, r2
 80087ea:	61b9      	str	r1, [r7, #24]
 80087ec:	415b      	adcs	r3, r3
 80087ee:	61fb      	str	r3, [r7, #28]
 80087f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80087f4:	4641      	mov	r1, r8
 80087f6:	1851      	adds	r1, r2, r1
 80087f8:	6139      	str	r1, [r7, #16]
 80087fa:	4649      	mov	r1, r9
 80087fc:	414b      	adcs	r3, r1
 80087fe:	617b      	str	r3, [r7, #20]
 8008800:	f04f 0200 	mov.w	r2, #0
 8008804:	f04f 0300 	mov.w	r3, #0
 8008808:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800880c:	4659      	mov	r1, fp
 800880e:	00cb      	lsls	r3, r1, #3
 8008810:	4651      	mov	r1, sl
 8008812:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008816:	4651      	mov	r1, sl
 8008818:	00ca      	lsls	r2, r1, #3
 800881a:	4610      	mov	r0, r2
 800881c:	4619      	mov	r1, r3
 800881e:	4603      	mov	r3, r0
 8008820:	4642      	mov	r2, r8
 8008822:	189b      	adds	r3, r3, r2
 8008824:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008828:	464b      	mov	r3, r9
 800882a:	460a      	mov	r2, r1
 800882c:	eb42 0303 	adc.w	r3, r2, r3
 8008830:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008834:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008838:	685b      	ldr	r3, [r3, #4]
 800883a:	2200      	movs	r2, #0
 800883c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800883e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8008840:	f04f 0200 	mov.w	r2, #0
 8008844:	f04f 0300 	mov.w	r3, #0
 8008848:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800884c:	4649      	mov	r1, r9
 800884e:	008b      	lsls	r3, r1, #2
 8008850:	4641      	mov	r1, r8
 8008852:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008856:	4641      	mov	r1, r8
 8008858:	008a      	lsls	r2, r1, #2
 800885a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800885e:	f7f8 fa13 	bl	8000c88 <__aeabi_uldivmod>
 8008862:	4602      	mov	r2, r0
 8008864:	460b      	mov	r3, r1
 8008866:	4611      	mov	r1, r2
 8008868:	4b38      	ldr	r3, [pc, #224]	@ (800894c <UART_SetConfig+0x4e4>)
 800886a:	fba3 2301 	umull	r2, r3, r3, r1
 800886e:	095b      	lsrs	r3, r3, #5
 8008870:	2264      	movs	r2, #100	@ 0x64
 8008872:	fb02 f303 	mul.w	r3, r2, r3
 8008876:	1acb      	subs	r3, r1, r3
 8008878:	011b      	lsls	r3, r3, #4
 800887a:	3332      	adds	r3, #50	@ 0x32
 800887c:	4a33      	ldr	r2, [pc, #204]	@ (800894c <UART_SetConfig+0x4e4>)
 800887e:	fba2 2303 	umull	r2, r3, r2, r3
 8008882:	095b      	lsrs	r3, r3, #5
 8008884:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008888:	441c      	add	r4, r3
 800888a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800888e:	2200      	movs	r2, #0
 8008890:	673b      	str	r3, [r7, #112]	@ 0x70
 8008892:	677a      	str	r2, [r7, #116]	@ 0x74
 8008894:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8008898:	4642      	mov	r2, r8
 800889a:	464b      	mov	r3, r9
 800889c:	1891      	adds	r1, r2, r2
 800889e:	60b9      	str	r1, [r7, #8]
 80088a0:	415b      	adcs	r3, r3
 80088a2:	60fb      	str	r3, [r7, #12]
 80088a4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80088a8:	4641      	mov	r1, r8
 80088aa:	1851      	adds	r1, r2, r1
 80088ac:	6039      	str	r1, [r7, #0]
 80088ae:	4649      	mov	r1, r9
 80088b0:	414b      	adcs	r3, r1
 80088b2:	607b      	str	r3, [r7, #4]
 80088b4:	f04f 0200 	mov.w	r2, #0
 80088b8:	f04f 0300 	mov.w	r3, #0
 80088bc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80088c0:	4659      	mov	r1, fp
 80088c2:	00cb      	lsls	r3, r1, #3
 80088c4:	4651      	mov	r1, sl
 80088c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80088ca:	4651      	mov	r1, sl
 80088cc:	00ca      	lsls	r2, r1, #3
 80088ce:	4610      	mov	r0, r2
 80088d0:	4619      	mov	r1, r3
 80088d2:	4603      	mov	r3, r0
 80088d4:	4642      	mov	r2, r8
 80088d6:	189b      	adds	r3, r3, r2
 80088d8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80088da:	464b      	mov	r3, r9
 80088dc:	460a      	mov	r2, r1
 80088de:	eb42 0303 	adc.w	r3, r2, r3
 80088e2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80088e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80088e8:	685b      	ldr	r3, [r3, #4]
 80088ea:	2200      	movs	r2, #0
 80088ec:	663b      	str	r3, [r7, #96]	@ 0x60
 80088ee:	667a      	str	r2, [r7, #100]	@ 0x64
 80088f0:	f04f 0200 	mov.w	r2, #0
 80088f4:	f04f 0300 	mov.w	r3, #0
 80088f8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80088fc:	4649      	mov	r1, r9
 80088fe:	008b      	lsls	r3, r1, #2
 8008900:	4641      	mov	r1, r8
 8008902:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008906:	4641      	mov	r1, r8
 8008908:	008a      	lsls	r2, r1, #2
 800890a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800890e:	f7f8 f9bb 	bl	8000c88 <__aeabi_uldivmod>
 8008912:	4602      	mov	r2, r0
 8008914:	460b      	mov	r3, r1
 8008916:	4b0d      	ldr	r3, [pc, #52]	@ (800894c <UART_SetConfig+0x4e4>)
 8008918:	fba3 1302 	umull	r1, r3, r3, r2
 800891c:	095b      	lsrs	r3, r3, #5
 800891e:	2164      	movs	r1, #100	@ 0x64
 8008920:	fb01 f303 	mul.w	r3, r1, r3
 8008924:	1ad3      	subs	r3, r2, r3
 8008926:	011b      	lsls	r3, r3, #4
 8008928:	3332      	adds	r3, #50	@ 0x32
 800892a:	4a08      	ldr	r2, [pc, #32]	@ (800894c <UART_SetConfig+0x4e4>)
 800892c:	fba2 2303 	umull	r2, r3, r2, r3
 8008930:	095b      	lsrs	r3, r3, #5
 8008932:	f003 020f 	and.w	r2, r3, #15
 8008936:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	4422      	add	r2, r4
 800893e:	609a      	str	r2, [r3, #8]
}
 8008940:	bf00      	nop
 8008942:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8008946:	46bd      	mov	sp, r7
 8008948:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800894c:	51eb851f 	.word	0x51eb851f

08008950 <calloc>:
 8008950:	4b02      	ldr	r3, [pc, #8]	@ (800895c <calloc+0xc>)
 8008952:	460a      	mov	r2, r1
 8008954:	4601      	mov	r1, r0
 8008956:	6818      	ldr	r0, [r3, #0]
 8008958:	f000 b802 	b.w	8008960 <_calloc_r>
 800895c:	20000090 	.word	0x20000090

08008960 <_calloc_r>:
 8008960:	b570      	push	{r4, r5, r6, lr}
 8008962:	fba1 5402 	umull	r5, r4, r1, r2
 8008966:	b93c      	cbnz	r4, 8008978 <_calloc_r+0x18>
 8008968:	4629      	mov	r1, r5
 800896a:	f000 f837 	bl	80089dc <_malloc_r>
 800896e:	4606      	mov	r6, r0
 8008970:	b928      	cbnz	r0, 800897e <_calloc_r+0x1e>
 8008972:	2600      	movs	r6, #0
 8008974:	4630      	mov	r0, r6
 8008976:	bd70      	pop	{r4, r5, r6, pc}
 8008978:	220c      	movs	r2, #12
 800897a:	6002      	str	r2, [r0, #0]
 800897c:	e7f9      	b.n	8008972 <_calloc_r+0x12>
 800897e:	462a      	mov	r2, r5
 8008980:	4621      	mov	r1, r4
 8008982:	f001 f967 	bl	8009c54 <memset>
 8008986:	e7f5      	b.n	8008974 <_calloc_r+0x14>

08008988 <malloc>:
 8008988:	4b02      	ldr	r3, [pc, #8]	@ (8008994 <malloc+0xc>)
 800898a:	4601      	mov	r1, r0
 800898c:	6818      	ldr	r0, [r3, #0]
 800898e:	f000 b825 	b.w	80089dc <_malloc_r>
 8008992:	bf00      	nop
 8008994:	20000090 	.word	0x20000090

08008998 <sbrk_aligned>:
 8008998:	b570      	push	{r4, r5, r6, lr}
 800899a:	4e0f      	ldr	r6, [pc, #60]	@ (80089d8 <sbrk_aligned+0x40>)
 800899c:	460c      	mov	r4, r1
 800899e:	6831      	ldr	r1, [r6, #0]
 80089a0:	4605      	mov	r5, r0
 80089a2:	b911      	cbnz	r1, 80089aa <sbrk_aligned+0x12>
 80089a4:	f001 f9be 	bl	8009d24 <_sbrk_r>
 80089a8:	6030      	str	r0, [r6, #0]
 80089aa:	4621      	mov	r1, r4
 80089ac:	4628      	mov	r0, r5
 80089ae:	f001 f9b9 	bl	8009d24 <_sbrk_r>
 80089b2:	1c43      	adds	r3, r0, #1
 80089b4:	d103      	bne.n	80089be <sbrk_aligned+0x26>
 80089b6:	f04f 34ff 	mov.w	r4, #4294967295
 80089ba:	4620      	mov	r0, r4
 80089bc:	bd70      	pop	{r4, r5, r6, pc}
 80089be:	1cc4      	adds	r4, r0, #3
 80089c0:	f024 0403 	bic.w	r4, r4, #3
 80089c4:	42a0      	cmp	r0, r4
 80089c6:	d0f8      	beq.n	80089ba <sbrk_aligned+0x22>
 80089c8:	1a21      	subs	r1, r4, r0
 80089ca:	4628      	mov	r0, r5
 80089cc:	f001 f9aa 	bl	8009d24 <_sbrk_r>
 80089d0:	3001      	adds	r0, #1
 80089d2:	d1f2      	bne.n	80089ba <sbrk_aligned+0x22>
 80089d4:	e7ef      	b.n	80089b6 <sbrk_aligned+0x1e>
 80089d6:	bf00      	nop
 80089d8:	20000768 	.word	0x20000768

080089dc <_malloc_r>:
 80089dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80089e0:	1ccd      	adds	r5, r1, #3
 80089e2:	f025 0503 	bic.w	r5, r5, #3
 80089e6:	3508      	adds	r5, #8
 80089e8:	2d0c      	cmp	r5, #12
 80089ea:	bf38      	it	cc
 80089ec:	250c      	movcc	r5, #12
 80089ee:	2d00      	cmp	r5, #0
 80089f0:	4606      	mov	r6, r0
 80089f2:	db01      	blt.n	80089f8 <_malloc_r+0x1c>
 80089f4:	42a9      	cmp	r1, r5
 80089f6:	d904      	bls.n	8008a02 <_malloc_r+0x26>
 80089f8:	230c      	movs	r3, #12
 80089fa:	6033      	str	r3, [r6, #0]
 80089fc:	2000      	movs	r0, #0
 80089fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a02:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008ad8 <_malloc_r+0xfc>
 8008a06:	f000 f869 	bl	8008adc <__malloc_lock>
 8008a0a:	f8d8 3000 	ldr.w	r3, [r8]
 8008a0e:	461c      	mov	r4, r3
 8008a10:	bb44      	cbnz	r4, 8008a64 <_malloc_r+0x88>
 8008a12:	4629      	mov	r1, r5
 8008a14:	4630      	mov	r0, r6
 8008a16:	f7ff ffbf 	bl	8008998 <sbrk_aligned>
 8008a1a:	1c43      	adds	r3, r0, #1
 8008a1c:	4604      	mov	r4, r0
 8008a1e:	d158      	bne.n	8008ad2 <_malloc_r+0xf6>
 8008a20:	f8d8 4000 	ldr.w	r4, [r8]
 8008a24:	4627      	mov	r7, r4
 8008a26:	2f00      	cmp	r7, #0
 8008a28:	d143      	bne.n	8008ab2 <_malloc_r+0xd6>
 8008a2a:	2c00      	cmp	r4, #0
 8008a2c:	d04b      	beq.n	8008ac6 <_malloc_r+0xea>
 8008a2e:	6823      	ldr	r3, [r4, #0]
 8008a30:	4639      	mov	r1, r7
 8008a32:	4630      	mov	r0, r6
 8008a34:	eb04 0903 	add.w	r9, r4, r3
 8008a38:	f001 f974 	bl	8009d24 <_sbrk_r>
 8008a3c:	4581      	cmp	r9, r0
 8008a3e:	d142      	bne.n	8008ac6 <_malloc_r+0xea>
 8008a40:	6821      	ldr	r1, [r4, #0]
 8008a42:	1a6d      	subs	r5, r5, r1
 8008a44:	4629      	mov	r1, r5
 8008a46:	4630      	mov	r0, r6
 8008a48:	f7ff ffa6 	bl	8008998 <sbrk_aligned>
 8008a4c:	3001      	adds	r0, #1
 8008a4e:	d03a      	beq.n	8008ac6 <_malloc_r+0xea>
 8008a50:	6823      	ldr	r3, [r4, #0]
 8008a52:	442b      	add	r3, r5
 8008a54:	6023      	str	r3, [r4, #0]
 8008a56:	f8d8 3000 	ldr.w	r3, [r8]
 8008a5a:	685a      	ldr	r2, [r3, #4]
 8008a5c:	bb62      	cbnz	r2, 8008ab8 <_malloc_r+0xdc>
 8008a5e:	f8c8 7000 	str.w	r7, [r8]
 8008a62:	e00f      	b.n	8008a84 <_malloc_r+0xa8>
 8008a64:	6822      	ldr	r2, [r4, #0]
 8008a66:	1b52      	subs	r2, r2, r5
 8008a68:	d420      	bmi.n	8008aac <_malloc_r+0xd0>
 8008a6a:	2a0b      	cmp	r2, #11
 8008a6c:	d917      	bls.n	8008a9e <_malloc_r+0xc2>
 8008a6e:	1961      	adds	r1, r4, r5
 8008a70:	42a3      	cmp	r3, r4
 8008a72:	6025      	str	r5, [r4, #0]
 8008a74:	bf18      	it	ne
 8008a76:	6059      	strne	r1, [r3, #4]
 8008a78:	6863      	ldr	r3, [r4, #4]
 8008a7a:	bf08      	it	eq
 8008a7c:	f8c8 1000 	streq.w	r1, [r8]
 8008a80:	5162      	str	r2, [r4, r5]
 8008a82:	604b      	str	r3, [r1, #4]
 8008a84:	4630      	mov	r0, r6
 8008a86:	f000 f82f 	bl	8008ae8 <__malloc_unlock>
 8008a8a:	f104 000b 	add.w	r0, r4, #11
 8008a8e:	1d23      	adds	r3, r4, #4
 8008a90:	f020 0007 	bic.w	r0, r0, #7
 8008a94:	1ac2      	subs	r2, r0, r3
 8008a96:	bf1c      	itt	ne
 8008a98:	1a1b      	subne	r3, r3, r0
 8008a9a:	50a3      	strne	r3, [r4, r2]
 8008a9c:	e7af      	b.n	80089fe <_malloc_r+0x22>
 8008a9e:	6862      	ldr	r2, [r4, #4]
 8008aa0:	42a3      	cmp	r3, r4
 8008aa2:	bf0c      	ite	eq
 8008aa4:	f8c8 2000 	streq.w	r2, [r8]
 8008aa8:	605a      	strne	r2, [r3, #4]
 8008aaa:	e7eb      	b.n	8008a84 <_malloc_r+0xa8>
 8008aac:	4623      	mov	r3, r4
 8008aae:	6864      	ldr	r4, [r4, #4]
 8008ab0:	e7ae      	b.n	8008a10 <_malloc_r+0x34>
 8008ab2:	463c      	mov	r4, r7
 8008ab4:	687f      	ldr	r7, [r7, #4]
 8008ab6:	e7b6      	b.n	8008a26 <_malloc_r+0x4a>
 8008ab8:	461a      	mov	r2, r3
 8008aba:	685b      	ldr	r3, [r3, #4]
 8008abc:	42a3      	cmp	r3, r4
 8008abe:	d1fb      	bne.n	8008ab8 <_malloc_r+0xdc>
 8008ac0:	2300      	movs	r3, #0
 8008ac2:	6053      	str	r3, [r2, #4]
 8008ac4:	e7de      	b.n	8008a84 <_malloc_r+0xa8>
 8008ac6:	230c      	movs	r3, #12
 8008ac8:	6033      	str	r3, [r6, #0]
 8008aca:	4630      	mov	r0, r6
 8008acc:	f000 f80c 	bl	8008ae8 <__malloc_unlock>
 8008ad0:	e794      	b.n	80089fc <_malloc_r+0x20>
 8008ad2:	6005      	str	r5, [r0, #0]
 8008ad4:	e7d6      	b.n	8008a84 <_malloc_r+0xa8>
 8008ad6:	bf00      	nop
 8008ad8:	2000076c 	.word	0x2000076c

08008adc <__malloc_lock>:
 8008adc:	4801      	ldr	r0, [pc, #4]	@ (8008ae4 <__malloc_lock+0x8>)
 8008ade:	f001 b96e 	b.w	8009dbe <__retarget_lock_acquire_recursive>
 8008ae2:	bf00      	nop
 8008ae4:	200008b0 	.word	0x200008b0

08008ae8 <__malloc_unlock>:
 8008ae8:	4801      	ldr	r0, [pc, #4]	@ (8008af0 <__malloc_unlock+0x8>)
 8008aea:	f001 b969 	b.w	8009dc0 <__retarget_lock_release_recursive>
 8008aee:	bf00      	nop
 8008af0:	200008b0 	.word	0x200008b0

08008af4 <__cvt>:
 8008af4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008af8:	ec57 6b10 	vmov	r6, r7, d0
 8008afc:	2f00      	cmp	r7, #0
 8008afe:	460c      	mov	r4, r1
 8008b00:	4619      	mov	r1, r3
 8008b02:	463b      	mov	r3, r7
 8008b04:	bfbb      	ittet	lt
 8008b06:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8008b0a:	461f      	movlt	r7, r3
 8008b0c:	2300      	movge	r3, #0
 8008b0e:	232d      	movlt	r3, #45	@ 0x2d
 8008b10:	700b      	strb	r3, [r1, #0]
 8008b12:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008b14:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8008b18:	4691      	mov	r9, r2
 8008b1a:	f023 0820 	bic.w	r8, r3, #32
 8008b1e:	bfbc      	itt	lt
 8008b20:	4632      	movlt	r2, r6
 8008b22:	4616      	movlt	r6, r2
 8008b24:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008b28:	d005      	beq.n	8008b36 <__cvt+0x42>
 8008b2a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8008b2e:	d100      	bne.n	8008b32 <__cvt+0x3e>
 8008b30:	3401      	adds	r4, #1
 8008b32:	2102      	movs	r1, #2
 8008b34:	e000      	b.n	8008b38 <__cvt+0x44>
 8008b36:	2103      	movs	r1, #3
 8008b38:	ab03      	add	r3, sp, #12
 8008b3a:	9301      	str	r3, [sp, #4]
 8008b3c:	ab02      	add	r3, sp, #8
 8008b3e:	9300      	str	r3, [sp, #0]
 8008b40:	ec47 6b10 	vmov	d0, r6, r7
 8008b44:	4653      	mov	r3, sl
 8008b46:	4622      	mov	r2, r4
 8008b48:	f001 f9d2 	bl	8009ef0 <_dtoa_r>
 8008b4c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8008b50:	4605      	mov	r5, r0
 8008b52:	d119      	bne.n	8008b88 <__cvt+0x94>
 8008b54:	f019 0f01 	tst.w	r9, #1
 8008b58:	d00e      	beq.n	8008b78 <__cvt+0x84>
 8008b5a:	eb00 0904 	add.w	r9, r0, r4
 8008b5e:	2200      	movs	r2, #0
 8008b60:	2300      	movs	r3, #0
 8008b62:	4630      	mov	r0, r6
 8008b64:	4639      	mov	r1, r7
 8008b66:	f7f7 ffaf 	bl	8000ac8 <__aeabi_dcmpeq>
 8008b6a:	b108      	cbz	r0, 8008b70 <__cvt+0x7c>
 8008b6c:	f8cd 900c 	str.w	r9, [sp, #12]
 8008b70:	2230      	movs	r2, #48	@ 0x30
 8008b72:	9b03      	ldr	r3, [sp, #12]
 8008b74:	454b      	cmp	r3, r9
 8008b76:	d31e      	bcc.n	8008bb6 <__cvt+0xc2>
 8008b78:	9b03      	ldr	r3, [sp, #12]
 8008b7a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008b7c:	1b5b      	subs	r3, r3, r5
 8008b7e:	4628      	mov	r0, r5
 8008b80:	6013      	str	r3, [r2, #0]
 8008b82:	b004      	add	sp, #16
 8008b84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b88:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008b8c:	eb00 0904 	add.w	r9, r0, r4
 8008b90:	d1e5      	bne.n	8008b5e <__cvt+0x6a>
 8008b92:	7803      	ldrb	r3, [r0, #0]
 8008b94:	2b30      	cmp	r3, #48	@ 0x30
 8008b96:	d10a      	bne.n	8008bae <__cvt+0xba>
 8008b98:	2200      	movs	r2, #0
 8008b9a:	2300      	movs	r3, #0
 8008b9c:	4630      	mov	r0, r6
 8008b9e:	4639      	mov	r1, r7
 8008ba0:	f7f7 ff92 	bl	8000ac8 <__aeabi_dcmpeq>
 8008ba4:	b918      	cbnz	r0, 8008bae <__cvt+0xba>
 8008ba6:	f1c4 0401 	rsb	r4, r4, #1
 8008baa:	f8ca 4000 	str.w	r4, [sl]
 8008bae:	f8da 3000 	ldr.w	r3, [sl]
 8008bb2:	4499      	add	r9, r3
 8008bb4:	e7d3      	b.n	8008b5e <__cvt+0x6a>
 8008bb6:	1c59      	adds	r1, r3, #1
 8008bb8:	9103      	str	r1, [sp, #12]
 8008bba:	701a      	strb	r2, [r3, #0]
 8008bbc:	e7d9      	b.n	8008b72 <__cvt+0x7e>

08008bbe <__exponent>:
 8008bbe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008bc0:	2900      	cmp	r1, #0
 8008bc2:	bfba      	itte	lt
 8008bc4:	4249      	neglt	r1, r1
 8008bc6:	232d      	movlt	r3, #45	@ 0x2d
 8008bc8:	232b      	movge	r3, #43	@ 0x2b
 8008bca:	2909      	cmp	r1, #9
 8008bcc:	7002      	strb	r2, [r0, #0]
 8008bce:	7043      	strb	r3, [r0, #1]
 8008bd0:	dd29      	ble.n	8008c26 <__exponent+0x68>
 8008bd2:	f10d 0307 	add.w	r3, sp, #7
 8008bd6:	461d      	mov	r5, r3
 8008bd8:	270a      	movs	r7, #10
 8008bda:	461a      	mov	r2, r3
 8008bdc:	fbb1 f6f7 	udiv	r6, r1, r7
 8008be0:	fb07 1416 	mls	r4, r7, r6, r1
 8008be4:	3430      	adds	r4, #48	@ 0x30
 8008be6:	f802 4c01 	strb.w	r4, [r2, #-1]
 8008bea:	460c      	mov	r4, r1
 8008bec:	2c63      	cmp	r4, #99	@ 0x63
 8008bee:	f103 33ff 	add.w	r3, r3, #4294967295
 8008bf2:	4631      	mov	r1, r6
 8008bf4:	dcf1      	bgt.n	8008bda <__exponent+0x1c>
 8008bf6:	3130      	adds	r1, #48	@ 0x30
 8008bf8:	1e94      	subs	r4, r2, #2
 8008bfa:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008bfe:	1c41      	adds	r1, r0, #1
 8008c00:	4623      	mov	r3, r4
 8008c02:	42ab      	cmp	r3, r5
 8008c04:	d30a      	bcc.n	8008c1c <__exponent+0x5e>
 8008c06:	f10d 0309 	add.w	r3, sp, #9
 8008c0a:	1a9b      	subs	r3, r3, r2
 8008c0c:	42ac      	cmp	r4, r5
 8008c0e:	bf88      	it	hi
 8008c10:	2300      	movhi	r3, #0
 8008c12:	3302      	adds	r3, #2
 8008c14:	4403      	add	r3, r0
 8008c16:	1a18      	subs	r0, r3, r0
 8008c18:	b003      	add	sp, #12
 8008c1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008c1c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008c20:	f801 6f01 	strb.w	r6, [r1, #1]!
 8008c24:	e7ed      	b.n	8008c02 <__exponent+0x44>
 8008c26:	2330      	movs	r3, #48	@ 0x30
 8008c28:	3130      	adds	r1, #48	@ 0x30
 8008c2a:	7083      	strb	r3, [r0, #2]
 8008c2c:	70c1      	strb	r1, [r0, #3]
 8008c2e:	1d03      	adds	r3, r0, #4
 8008c30:	e7f1      	b.n	8008c16 <__exponent+0x58>
	...

08008c34 <_printf_float>:
 8008c34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c38:	b08d      	sub	sp, #52	@ 0x34
 8008c3a:	460c      	mov	r4, r1
 8008c3c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8008c40:	4616      	mov	r6, r2
 8008c42:	461f      	mov	r7, r3
 8008c44:	4605      	mov	r5, r0
 8008c46:	f001 f835 	bl	8009cb4 <_localeconv_r>
 8008c4a:	6803      	ldr	r3, [r0, #0]
 8008c4c:	9304      	str	r3, [sp, #16]
 8008c4e:	4618      	mov	r0, r3
 8008c50:	f7f7 fb0e 	bl	8000270 <strlen>
 8008c54:	2300      	movs	r3, #0
 8008c56:	930a      	str	r3, [sp, #40]	@ 0x28
 8008c58:	f8d8 3000 	ldr.w	r3, [r8]
 8008c5c:	9005      	str	r0, [sp, #20]
 8008c5e:	3307      	adds	r3, #7
 8008c60:	f023 0307 	bic.w	r3, r3, #7
 8008c64:	f103 0208 	add.w	r2, r3, #8
 8008c68:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008c6c:	f8d4 b000 	ldr.w	fp, [r4]
 8008c70:	f8c8 2000 	str.w	r2, [r8]
 8008c74:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008c78:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8008c7c:	9307      	str	r3, [sp, #28]
 8008c7e:	f8cd 8018 	str.w	r8, [sp, #24]
 8008c82:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8008c86:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008c8a:	4b9c      	ldr	r3, [pc, #624]	@ (8008efc <_printf_float+0x2c8>)
 8008c8c:	f04f 32ff 	mov.w	r2, #4294967295
 8008c90:	f7f7 ff4c 	bl	8000b2c <__aeabi_dcmpun>
 8008c94:	bb70      	cbnz	r0, 8008cf4 <_printf_float+0xc0>
 8008c96:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008c9a:	4b98      	ldr	r3, [pc, #608]	@ (8008efc <_printf_float+0x2c8>)
 8008c9c:	f04f 32ff 	mov.w	r2, #4294967295
 8008ca0:	f7f7 ff26 	bl	8000af0 <__aeabi_dcmple>
 8008ca4:	bb30      	cbnz	r0, 8008cf4 <_printf_float+0xc0>
 8008ca6:	2200      	movs	r2, #0
 8008ca8:	2300      	movs	r3, #0
 8008caa:	4640      	mov	r0, r8
 8008cac:	4649      	mov	r1, r9
 8008cae:	f7f7 ff15 	bl	8000adc <__aeabi_dcmplt>
 8008cb2:	b110      	cbz	r0, 8008cba <_printf_float+0x86>
 8008cb4:	232d      	movs	r3, #45	@ 0x2d
 8008cb6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008cba:	4a91      	ldr	r2, [pc, #580]	@ (8008f00 <_printf_float+0x2cc>)
 8008cbc:	4b91      	ldr	r3, [pc, #580]	@ (8008f04 <_printf_float+0x2d0>)
 8008cbe:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8008cc2:	bf94      	ite	ls
 8008cc4:	4690      	movls	r8, r2
 8008cc6:	4698      	movhi	r8, r3
 8008cc8:	2303      	movs	r3, #3
 8008cca:	6123      	str	r3, [r4, #16]
 8008ccc:	f02b 0304 	bic.w	r3, fp, #4
 8008cd0:	6023      	str	r3, [r4, #0]
 8008cd2:	f04f 0900 	mov.w	r9, #0
 8008cd6:	9700      	str	r7, [sp, #0]
 8008cd8:	4633      	mov	r3, r6
 8008cda:	aa0b      	add	r2, sp, #44	@ 0x2c
 8008cdc:	4621      	mov	r1, r4
 8008cde:	4628      	mov	r0, r5
 8008ce0:	f000 f9d2 	bl	8009088 <_printf_common>
 8008ce4:	3001      	adds	r0, #1
 8008ce6:	f040 808d 	bne.w	8008e04 <_printf_float+0x1d0>
 8008cea:	f04f 30ff 	mov.w	r0, #4294967295
 8008cee:	b00d      	add	sp, #52	@ 0x34
 8008cf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cf4:	4642      	mov	r2, r8
 8008cf6:	464b      	mov	r3, r9
 8008cf8:	4640      	mov	r0, r8
 8008cfa:	4649      	mov	r1, r9
 8008cfc:	f7f7 ff16 	bl	8000b2c <__aeabi_dcmpun>
 8008d00:	b140      	cbz	r0, 8008d14 <_printf_float+0xe0>
 8008d02:	464b      	mov	r3, r9
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	bfbc      	itt	lt
 8008d08:	232d      	movlt	r3, #45	@ 0x2d
 8008d0a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8008d0e:	4a7e      	ldr	r2, [pc, #504]	@ (8008f08 <_printf_float+0x2d4>)
 8008d10:	4b7e      	ldr	r3, [pc, #504]	@ (8008f0c <_printf_float+0x2d8>)
 8008d12:	e7d4      	b.n	8008cbe <_printf_float+0x8a>
 8008d14:	6863      	ldr	r3, [r4, #4]
 8008d16:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8008d1a:	9206      	str	r2, [sp, #24]
 8008d1c:	1c5a      	adds	r2, r3, #1
 8008d1e:	d13b      	bne.n	8008d98 <_printf_float+0x164>
 8008d20:	2306      	movs	r3, #6
 8008d22:	6063      	str	r3, [r4, #4]
 8008d24:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8008d28:	2300      	movs	r3, #0
 8008d2a:	6022      	str	r2, [r4, #0]
 8008d2c:	9303      	str	r3, [sp, #12]
 8008d2e:	ab0a      	add	r3, sp, #40	@ 0x28
 8008d30:	e9cd a301 	strd	sl, r3, [sp, #4]
 8008d34:	ab09      	add	r3, sp, #36	@ 0x24
 8008d36:	9300      	str	r3, [sp, #0]
 8008d38:	6861      	ldr	r1, [r4, #4]
 8008d3a:	ec49 8b10 	vmov	d0, r8, r9
 8008d3e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8008d42:	4628      	mov	r0, r5
 8008d44:	f7ff fed6 	bl	8008af4 <__cvt>
 8008d48:	9b06      	ldr	r3, [sp, #24]
 8008d4a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008d4c:	2b47      	cmp	r3, #71	@ 0x47
 8008d4e:	4680      	mov	r8, r0
 8008d50:	d129      	bne.n	8008da6 <_printf_float+0x172>
 8008d52:	1cc8      	adds	r0, r1, #3
 8008d54:	db02      	blt.n	8008d5c <_printf_float+0x128>
 8008d56:	6863      	ldr	r3, [r4, #4]
 8008d58:	4299      	cmp	r1, r3
 8008d5a:	dd41      	ble.n	8008de0 <_printf_float+0x1ac>
 8008d5c:	f1aa 0a02 	sub.w	sl, sl, #2
 8008d60:	fa5f fa8a 	uxtb.w	sl, sl
 8008d64:	3901      	subs	r1, #1
 8008d66:	4652      	mov	r2, sl
 8008d68:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8008d6c:	9109      	str	r1, [sp, #36]	@ 0x24
 8008d6e:	f7ff ff26 	bl	8008bbe <__exponent>
 8008d72:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008d74:	1813      	adds	r3, r2, r0
 8008d76:	2a01      	cmp	r2, #1
 8008d78:	4681      	mov	r9, r0
 8008d7a:	6123      	str	r3, [r4, #16]
 8008d7c:	dc02      	bgt.n	8008d84 <_printf_float+0x150>
 8008d7e:	6822      	ldr	r2, [r4, #0]
 8008d80:	07d2      	lsls	r2, r2, #31
 8008d82:	d501      	bpl.n	8008d88 <_printf_float+0x154>
 8008d84:	3301      	adds	r3, #1
 8008d86:	6123      	str	r3, [r4, #16]
 8008d88:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d0a2      	beq.n	8008cd6 <_printf_float+0xa2>
 8008d90:	232d      	movs	r3, #45	@ 0x2d
 8008d92:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008d96:	e79e      	b.n	8008cd6 <_printf_float+0xa2>
 8008d98:	9a06      	ldr	r2, [sp, #24]
 8008d9a:	2a47      	cmp	r2, #71	@ 0x47
 8008d9c:	d1c2      	bne.n	8008d24 <_printf_float+0xf0>
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d1c0      	bne.n	8008d24 <_printf_float+0xf0>
 8008da2:	2301      	movs	r3, #1
 8008da4:	e7bd      	b.n	8008d22 <_printf_float+0xee>
 8008da6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008daa:	d9db      	bls.n	8008d64 <_printf_float+0x130>
 8008dac:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8008db0:	d118      	bne.n	8008de4 <_printf_float+0x1b0>
 8008db2:	2900      	cmp	r1, #0
 8008db4:	6863      	ldr	r3, [r4, #4]
 8008db6:	dd0b      	ble.n	8008dd0 <_printf_float+0x19c>
 8008db8:	6121      	str	r1, [r4, #16]
 8008dba:	b913      	cbnz	r3, 8008dc2 <_printf_float+0x18e>
 8008dbc:	6822      	ldr	r2, [r4, #0]
 8008dbe:	07d0      	lsls	r0, r2, #31
 8008dc0:	d502      	bpl.n	8008dc8 <_printf_float+0x194>
 8008dc2:	3301      	adds	r3, #1
 8008dc4:	440b      	add	r3, r1
 8008dc6:	6123      	str	r3, [r4, #16]
 8008dc8:	65a1      	str	r1, [r4, #88]	@ 0x58
 8008dca:	f04f 0900 	mov.w	r9, #0
 8008dce:	e7db      	b.n	8008d88 <_printf_float+0x154>
 8008dd0:	b913      	cbnz	r3, 8008dd8 <_printf_float+0x1a4>
 8008dd2:	6822      	ldr	r2, [r4, #0]
 8008dd4:	07d2      	lsls	r2, r2, #31
 8008dd6:	d501      	bpl.n	8008ddc <_printf_float+0x1a8>
 8008dd8:	3302      	adds	r3, #2
 8008dda:	e7f4      	b.n	8008dc6 <_printf_float+0x192>
 8008ddc:	2301      	movs	r3, #1
 8008dde:	e7f2      	b.n	8008dc6 <_printf_float+0x192>
 8008de0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8008de4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008de6:	4299      	cmp	r1, r3
 8008de8:	db05      	blt.n	8008df6 <_printf_float+0x1c2>
 8008dea:	6823      	ldr	r3, [r4, #0]
 8008dec:	6121      	str	r1, [r4, #16]
 8008dee:	07d8      	lsls	r0, r3, #31
 8008df0:	d5ea      	bpl.n	8008dc8 <_printf_float+0x194>
 8008df2:	1c4b      	adds	r3, r1, #1
 8008df4:	e7e7      	b.n	8008dc6 <_printf_float+0x192>
 8008df6:	2900      	cmp	r1, #0
 8008df8:	bfd4      	ite	le
 8008dfa:	f1c1 0202 	rsble	r2, r1, #2
 8008dfe:	2201      	movgt	r2, #1
 8008e00:	4413      	add	r3, r2
 8008e02:	e7e0      	b.n	8008dc6 <_printf_float+0x192>
 8008e04:	6823      	ldr	r3, [r4, #0]
 8008e06:	055a      	lsls	r2, r3, #21
 8008e08:	d407      	bmi.n	8008e1a <_printf_float+0x1e6>
 8008e0a:	6923      	ldr	r3, [r4, #16]
 8008e0c:	4642      	mov	r2, r8
 8008e0e:	4631      	mov	r1, r6
 8008e10:	4628      	mov	r0, r5
 8008e12:	47b8      	blx	r7
 8008e14:	3001      	adds	r0, #1
 8008e16:	d12b      	bne.n	8008e70 <_printf_float+0x23c>
 8008e18:	e767      	b.n	8008cea <_printf_float+0xb6>
 8008e1a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008e1e:	f240 80dd 	bls.w	8008fdc <_printf_float+0x3a8>
 8008e22:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008e26:	2200      	movs	r2, #0
 8008e28:	2300      	movs	r3, #0
 8008e2a:	f7f7 fe4d 	bl	8000ac8 <__aeabi_dcmpeq>
 8008e2e:	2800      	cmp	r0, #0
 8008e30:	d033      	beq.n	8008e9a <_printf_float+0x266>
 8008e32:	4a37      	ldr	r2, [pc, #220]	@ (8008f10 <_printf_float+0x2dc>)
 8008e34:	2301      	movs	r3, #1
 8008e36:	4631      	mov	r1, r6
 8008e38:	4628      	mov	r0, r5
 8008e3a:	47b8      	blx	r7
 8008e3c:	3001      	adds	r0, #1
 8008e3e:	f43f af54 	beq.w	8008cea <_printf_float+0xb6>
 8008e42:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8008e46:	4543      	cmp	r3, r8
 8008e48:	db02      	blt.n	8008e50 <_printf_float+0x21c>
 8008e4a:	6823      	ldr	r3, [r4, #0]
 8008e4c:	07d8      	lsls	r0, r3, #31
 8008e4e:	d50f      	bpl.n	8008e70 <_printf_float+0x23c>
 8008e50:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008e54:	4631      	mov	r1, r6
 8008e56:	4628      	mov	r0, r5
 8008e58:	47b8      	blx	r7
 8008e5a:	3001      	adds	r0, #1
 8008e5c:	f43f af45 	beq.w	8008cea <_printf_float+0xb6>
 8008e60:	f04f 0900 	mov.w	r9, #0
 8008e64:	f108 38ff 	add.w	r8, r8, #4294967295
 8008e68:	f104 0a1a 	add.w	sl, r4, #26
 8008e6c:	45c8      	cmp	r8, r9
 8008e6e:	dc09      	bgt.n	8008e84 <_printf_float+0x250>
 8008e70:	6823      	ldr	r3, [r4, #0]
 8008e72:	079b      	lsls	r3, r3, #30
 8008e74:	f100 8103 	bmi.w	800907e <_printf_float+0x44a>
 8008e78:	68e0      	ldr	r0, [r4, #12]
 8008e7a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008e7c:	4298      	cmp	r0, r3
 8008e7e:	bfb8      	it	lt
 8008e80:	4618      	movlt	r0, r3
 8008e82:	e734      	b.n	8008cee <_printf_float+0xba>
 8008e84:	2301      	movs	r3, #1
 8008e86:	4652      	mov	r2, sl
 8008e88:	4631      	mov	r1, r6
 8008e8a:	4628      	mov	r0, r5
 8008e8c:	47b8      	blx	r7
 8008e8e:	3001      	adds	r0, #1
 8008e90:	f43f af2b 	beq.w	8008cea <_printf_float+0xb6>
 8008e94:	f109 0901 	add.w	r9, r9, #1
 8008e98:	e7e8      	b.n	8008e6c <_printf_float+0x238>
 8008e9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	dc39      	bgt.n	8008f14 <_printf_float+0x2e0>
 8008ea0:	4a1b      	ldr	r2, [pc, #108]	@ (8008f10 <_printf_float+0x2dc>)
 8008ea2:	2301      	movs	r3, #1
 8008ea4:	4631      	mov	r1, r6
 8008ea6:	4628      	mov	r0, r5
 8008ea8:	47b8      	blx	r7
 8008eaa:	3001      	adds	r0, #1
 8008eac:	f43f af1d 	beq.w	8008cea <_printf_float+0xb6>
 8008eb0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8008eb4:	ea59 0303 	orrs.w	r3, r9, r3
 8008eb8:	d102      	bne.n	8008ec0 <_printf_float+0x28c>
 8008eba:	6823      	ldr	r3, [r4, #0]
 8008ebc:	07d9      	lsls	r1, r3, #31
 8008ebe:	d5d7      	bpl.n	8008e70 <_printf_float+0x23c>
 8008ec0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008ec4:	4631      	mov	r1, r6
 8008ec6:	4628      	mov	r0, r5
 8008ec8:	47b8      	blx	r7
 8008eca:	3001      	adds	r0, #1
 8008ecc:	f43f af0d 	beq.w	8008cea <_printf_float+0xb6>
 8008ed0:	f04f 0a00 	mov.w	sl, #0
 8008ed4:	f104 0b1a 	add.w	fp, r4, #26
 8008ed8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008eda:	425b      	negs	r3, r3
 8008edc:	4553      	cmp	r3, sl
 8008ede:	dc01      	bgt.n	8008ee4 <_printf_float+0x2b0>
 8008ee0:	464b      	mov	r3, r9
 8008ee2:	e793      	b.n	8008e0c <_printf_float+0x1d8>
 8008ee4:	2301      	movs	r3, #1
 8008ee6:	465a      	mov	r2, fp
 8008ee8:	4631      	mov	r1, r6
 8008eea:	4628      	mov	r0, r5
 8008eec:	47b8      	blx	r7
 8008eee:	3001      	adds	r0, #1
 8008ef0:	f43f aefb 	beq.w	8008cea <_printf_float+0xb6>
 8008ef4:	f10a 0a01 	add.w	sl, sl, #1
 8008ef8:	e7ee      	b.n	8008ed8 <_printf_float+0x2a4>
 8008efa:	bf00      	nop
 8008efc:	7fefffff 	.word	0x7fefffff
 8008f00:	0800ddf0 	.word	0x0800ddf0
 8008f04:	0800ddf4 	.word	0x0800ddf4
 8008f08:	0800ddf8 	.word	0x0800ddf8
 8008f0c:	0800ddfc 	.word	0x0800ddfc
 8008f10:	0800e190 	.word	0x0800e190
 8008f14:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008f16:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008f1a:	4553      	cmp	r3, sl
 8008f1c:	bfa8      	it	ge
 8008f1e:	4653      	movge	r3, sl
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	4699      	mov	r9, r3
 8008f24:	dc36      	bgt.n	8008f94 <_printf_float+0x360>
 8008f26:	f04f 0b00 	mov.w	fp, #0
 8008f2a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008f2e:	f104 021a 	add.w	r2, r4, #26
 8008f32:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008f34:	9306      	str	r3, [sp, #24]
 8008f36:	eba3 0309 	sub.w	r3, r3, r9
 8008f3a:	455b      	cmp	r3, fp
 8008f3c:	dc31      	bgt.n	8008fa2 <_printf_float+0x36e>
 8008f3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f40:	459a      	cmp	sl, r3
 8008f42:	dc3a      	bgt.n	8008fba <_printf_float+0x386>
 8008f44:	6823      	ldr	r3, [r4, #0]
 8008f46:	07da      	lsls	r2, r3, #31
 8008f48:	d437      	bmi.n	8008fba <_printf_float+0x386>
 8008f4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f4c:	ebaa 0903 	sub.w	r9, sl, r3
 8008f50:	9b06      	ldr	r3, [sp, #24]
 8008f52:	ebaa 0303 	sub.w	r3, sl, r3
 8008f56:	4599      	cmp	r9, r3
 8008f58:	bfa8      	it	ge
 8008f5a:	4699      	movge	r9, r3
 8008f5c:	f1b9 0f00 	cmp.w	r9, #0
 8008f60:	dc33      	bgt.n	8008fca <_printf_float+0x396>
 8008f62:	f04f 0800 	mov.w	r8, #0
 8008f66:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008f6a:	f104 0b1a 	add.w	fp, r4, #26
 8008f6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f70:	ebaa 0303 	sub.w	r3, sl, r3
 8008f74:	eba3 0309 	sub.w	r3, r3, r9
 8008f78:	4543      	cmp	r3, r8
 8008f7a:	f77f af79 	ble.w	8008e70 <_printf_float+0x23c>
 8008f7e:	2301      	movs	r3, #1
 8008f80:	465a      	mov	r2, fp
 8008f82:	4631      	mov	r1, r6
 8008f84:	4628      	mov	r0, r5
 8008f86:	47b8      	blx	r7
 8008f88:	3001      	adds	r0, #1
 8008f8a:	f43f aeae 	beq.w	8008cea <_printf_float+0xb6>
 8008f8e:	f108 0801 	add.w	r8, r8, #1
 8008f92:	e7ec      	b.n	8008f6e <_printf_float+0x33a>
 8008f94:	4642      	mov	r2, r8
 8008f96:	4631      	mov	r1, r6
 8008f98:	4628      	mov	r0, r5
 8008f9a:	47b8      	blx	r7
 8008f9c:	3001      	adds	r0, #1
 8008f9e:	d1c2      	bne.n	8008f26 <_printf_float+0x2f2>
 8008fa0:	e6a3      	b.n	8008cea <_printf_float+0xb6>
 8008fa2:	2301      	movs	r3, #1
 8008fa4:	4631      	mov	r1, r6
 8008fa6:	4628      	mov	r0, r5
 8008fa8:	9206      	str	r2, [sp, #24]
 8008faa:	47b8      	blx	r7
 8008fac:	3001      	adds	r0, #1
 8008fae:	f43f ae9c 	beq.w	8008cea <_printf_float+0xb6>
 8008fb2:	9a06      	ldr	r2, [sp, #24]
 8008fb4:	f10b 0b01 	add.w	fp, fp, #1
 8008fb8:	e7bb      	b.n	8008f32 <_printf_float+0x2fe>
 8008fba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008fbe:	4631      	mov	r1, r6
 8008fc0:	4628      	mov	r0, r5
 8008fc2:	47b8      	blx	r7
 8008fc4:	3001      	adds	r0, #1
 8008fc6:	d1c0      	bne.n	8008f4a <_printf_float+0x316>
 8008fc8:	e68f      	b.n	8008cea <_printf_float+0xb6>
 8008fca:	9a06      	ldr	r2, [sp, #24]
 8008fcc:	464b      	mov	r3, r9
 8008fce:	4442      	add	r2, r8
 8008fd0:	4631      	mov	r1, r6
 8008fd2:	4628      	mov	r0, r5
 8008fd4:	47b8      	blx	r7
 8008fd6:	3001      	adds	r0, #1
 8008fd8:	d1c3      	bne.n	8008f62 <_printf_float+0x32e>
 8008fda:	e686      	b.n	8008cea <_printf_float+0xb6>
 8008fdc:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008fe0:	f1ba 0f01 	cmp.w	sl, #1
 8008fe4:	dc01      	bgt.n	8008fea <_printf_float+0x3b6>
 8008fe6:	07db      	lsls	r3, r3, #31
 8008fe8:	d536      	bpl.n	8009058 <_printf_float+0x424>
 8008fea:	2301      	movs	r3, #1
 8008fec:	4642      	mov	r2, r8
 8008fee:	4631      	mov	r1, r6
 8008ff0:	4628      	mov	r0, r5
 8008ff2:	47b8      	blx	r7
 8008ff4:	3001      	adds	r0, #1
 8008ff6:	f43f ae78 	beq.w	8008cea <_printf_float+0xb6>
 8008ffa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008ffe:	4631      	mov	r1, r6
 8009000:	4628      	mov	r0, r5
 8009002:	47b8      	blx	r7
 8009004:	3001      	adds	r0, #1
 8009006:	f43f ae70 	beq.w	8008cea <_printf_float+0xb6>
 800900a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800900e:	2200      	movs	r2, #0
 8009010:	2300      	movs	r3, #0
 8009012:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009016:	f7f7 fd57 	bl	8000ac8 <__aeabi_dcmpeq>
 800901a:	b9c0      	cbnz	r0, 800904e <_printf_float+0x41a>
 800901c:	4653      	mov	r3, sl
 800901e:	f108 0201 	add.w	r2, r8, #1
 8009022:	4631      	mov	r1, r6
 8009024:	4628      	mov	r0, r5
 8009026:	47b8      	blx	r7
 8009028:	3001      	adds	r0, #1
 800902a:	d10c      	bne.n	8009046 <_printf_float+0x412>
 800902c:	e65d      	b.n	8008cea <_printf_float+0xb6>
 800902e:	2301      	movs	r3, #1
 8009030:	465a      	mov	r2, fp
 8009032:	4631      	mov	r1, r6
 8009034:	4628      	mov	r0, r5
 8009036:	47b8      	blx	r7
 8009038:	3001      	adds	r0, #1
 800903a:	f43f ae56 	beq.w	8008cea <_printf_float+0xb6>
 800903e:	f108 0801 	add.w	r8, r8, #1
 8009042:	45d0      	cmp	r8, sl
 8009044:	dbf3      	blt.n	800902e <_printf_float+0x3fa>
 8009046:	464b      	mov	r3, r9
 8009048:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800904c:	e6df      	b.n	8008e0e <_printf_float+0x1da>
 800904e:	f04f 0800 	mov.w	r8, #0
 8009052:	f104 0b1a 	add.w	fp, r4, #26
 8009056:	e7f4      	b.n	8009042 <_printf_float+0x40e>
 8009058:	2301      	movs	r3, #1
 800905a:	4642      	mov	r2, r8
 800905c:	e7e1      	b.n	8009022 <_printf_float+0x3ee>
 800905e:	2301      	movs	r3, #1
 8009060:	464a      	mov	r2, r9
 8009062:	4631      	mov	r1, r6
 8009064:	4628      	mov	r0, r5
 8009066:	47b8      	blx	r7
 8009068:	3001      	adds	r0, #1
 800906a:	f43f ae3e 	beq.w	8008cea <_printf_float+0xb6>
 800906e:	f108 0801 	add.w	r8, r8, #1
 8009072:	68e3      	ldr	r3, [r4, #12]
 8009074:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009076:	1a5b      	subs	r3, r3, r1
 8009078:	4543      	cmp	r3, r8
 800907a:	dcf0      	bgt.n	800905e <_printf_float+0x42a>
 800907c:	e6fc      	b.n	8008e78 <_printf_float+0x244>
 800907e:	f04f 0800 	mov.w	r8, #0
 8009082:	f104 0919 	add.w	r9, r4, #25
 8009086:	e7f4      	b.n	8009072 <_printf_float+0x43e>

08009088 <_printf_common>:
 8009088:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800908c:	4616      	mov	r6, r2
 800908e:	4698      	mov	r8, r3
 8009090:	688a      	ldr	r2, [r1, #8]
 8009092:	690b      	ldr	r3, [r1, #16]
 8009094:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009098:	4293      	cmp	r3, r2
 800909a:	bfb8      	it	lt
 800909c:	4613      	movlt	r3, r2
 800909e:	6033      	str	r3, [r6, #0]
 80090a0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80090a4:	4607      	mov	r7, r0
 80090a6:	460c      	mov	r4, r1
 80090a8:	b10a      	cbz	r2, 80090ae <_printf_common+0x26>
 80090aa:	3301      	adds	r3, #1
 80090ac:	6033      	str	r3, [r6, #0]
 80090ae:	6823      	ldr	r3, [r4, #0]
 80090b0:	0699      	lsls	r1, r3, #26
 80090b2:	bf42      	ittt	mi
 80090b4:	6833      	ldrmi	r3, [r6, #0]
 80090b6:	3302      	addmi	r3, #2
 80090b8:	6033      	strmi	r3, [r6, #0]
 80090ba:	6825      	ldr	r5, [r4, #0]
 80090bc:	f015 0506 	ands.w	r5, r5, #6
 80090c0:	d106      	bne.n	80090d0 <_printf_common+0x48>
 80090c2:	f104 0a19 	add.w	sl, r4, #25
 80090c6:	68e3      	ldr	r3, [r4, #12]
 80090c8:	6832      	ldr	r2, [r6, #0]
 80090ca:	1a9b      	subs	r3, r3, r2
 80090cc:	42ab      	cmp	r3, r5
 80090ce:	dc26      	bgt.n	800911e <_printf_common+0x96>
 80090d0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80090d4:	6822      	ldr	r2, [r4, #0]
 80090d6:	3b00      	subs	r3, #0
 80090d8:	bf18      	it	ne
 80090da:	2301      	movne	r3, #1
 80090dc:	0692      	lsls	r2, r2, #26
 80090de:	d42b      	bmi.n	8009138 <_printf_common+0xb0>
 80090e0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80090e4:	4641      	mov	r1, r8
 80090e6:	4638      	mov	r0, r7
 80090e8:	47c8      	blx	r9
 80090ea:	3001      	adds	r0, #1
 80090ec:	d01e      	beq.n	800912c <_printf_common+0xa4>
 80090ee:	6823      	ldr	r3, [r4, #0]
 80090f0:	6922      	ldr	r2, [r4, #16]
 80090f2:	f003 0306 	and.w	r3, r3, #6
 80090f6:	2b04      	cmp	r3, #4
 80090f8:	bf02      	ittt	eq
 80090fa:	68e5      	ldreq	r5, [r4, #12]
 80090fc:	6833      	ldreq	r3, [r6, #0]
 80090fe:	1aed      	subeq	r5, r5, r3
 8009100:	68a3      	ldr	r3, [r4, #8]
 8009102:	bf0c      	ite	eq
 8009104:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009108:	2500      	movne	r5, #0
 800910a:	4293      	cmp	r3, r2
 800910c:	bfc4      	itt	gt
 800910e:	1a9b      	subgt	r3, r3, r2
 8009110:	18ed      	addgt	r5, r5, r3
 8009112:	2600      	movs	r6, #0
 8009114:	341a      	adds	r4, #26
 8009116:	42b5      	cmp	r5, r6
 8009118:	d11a      	bne.n	8009150 <_printf_common+0xc8>
 800911a:	2000      	movs	r0, #0
 800911c:	e008      	b.n	8009130 <_printf_common+0xa8>
 800911e:	2301      	movs	r3, #1
 8009120:	4652      	mov	r2, sl
 8009122:	4641      	mov	r1, r8
 8009124:	4638      	mov	r0, r7
 8009126:	47c8      	blx	r9
 8009128:	3001      	adds	r0, #1
 800912a:	d103      	bne.n	8009134 <_printf_common+0xac>
 800912c:	f04f 30ff 	mov.w	r0, #4294967295
 8009130:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009134:	3501      	adds	r5, #1
 8009136:	e7c6      	b.n	80090c6 <_printf_common+0x3e>
 8009138:	18e1      	adds	r1, r4, r3
 800913a:	1c5a      	adds	r2, r3, #1
 800913c:	2030      	movs	r0, #48	@ 0x30
 800913e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009142:	4422      	add	r2, r4
 8009144:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009148:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800914c:	3302      	adds	r3, #2
 800914e:	e7c7      	b.n	80090e0 <_printf_common+0x58>
 8009150:	2301      	movs	r3, #1
 8009152:	4622      	mov	r2, r4
 8009154:	4641      	mov	r1, r8
 8009156:	4638      	mov	r0, r7
 8009158:	47c8      	blx	r9
 800915a:	3001      	adds	r0, #1
 800915c:	d0e6      	beq.n	800912c <_printf_common+0xa4>
 800915e:	3601      	adds	r6, #1
 8009160:	e7d9      	b.n	8009116 <_printf_common+0x8e>
	...

08009164 <_printf_i>:
 8009164:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009168:	7e0f      	ldrb	r7, [r1, #24]
 800916a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800916c:	2f78      	cmp	r7, #120	@ 0x78
 800916e:	4691      	mov	r9, r2
 8009170:	4680      	mov	r8, r0
 8009172:	460c      	mov	r4, r1
 8009174:	469a      	mov	sl, r3
 8009176:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800917a:	d807      	bhi.n	800918c <_printf_i+0x28>
 800917c:	2f62      	cmp	r7, #98	@ 0x62
 800917e:	d80a      	bhi.n	8009196 <_printf_i+0x32>
 8009180:	2f00      	cmp	r7, #0
 8009182:	f000 80d2 	beq.w	800932a <_printf_i+0x1c6>
 8009186:	2f58      	cmp	r7, #88	@ 0x58
 8009188:	f000 80b9 	beq.w	80092fe <_printf_i+0x19a>
 800918c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009190:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009194:	e03a      	b.n	800920c <_printf_i+0xa8>
 8009196:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800919a:	2b15      	cmp	r3, #21
 800919c:	d8f6      	bhi.n	800918c <_printf_i+0x28>
 800919e:	a101      	add	r1, pc, #4	@ (adr r1, 80091a4 <_printf_i+0x40>)
 80091a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80091a4:	080091fd 	.word	0x080091fd
 80091a8:	08009211 	.word	0x08009211
 80091ac:	0800918d 	.word	0x0800918d
 80091b0:	0800918d 	.word	0x0800918d
 80091b4:	0800918d 	.word	0x0800918d
 80091b8:	0800918d 	.word	0x0800918d
 80091bc:	08009211 	.word	0x08009211
 80091c0:	0800918d 	.word	0x0800918d
 80091c4:	0800918d 	.word	0x0800918d
 80091c8:	0800918d 	.word	0x0800918d
 80091cc:	0800918d 	.word	0x0800918d
 80091d0:	08009311 	.word	0x08009311
 80091d4:	0800923b 	.word	0x0800923b
 80091d8:	080092cb 	.word	0x080092cb
 80091dc:	0800918d 	.word	0x0800918d
 80091e0:	0800918d 	.word	0x0800918d
 80091e4:	08009333 	.word	0x08009333
 80091e8:	0800918d 	.word	0x0800918d
 80091ec:	0800923b 	.word	0x0800923b
 80091f0:	0800918d 	.word	0x0800918d
 80091f4:	0800918d 	.word	0x0800918d
 80091f8:	080092d3 	.word	0x080092d3
 80091fc:	6833      	ldr	r3, [r6, #0]
 80091fe:	1d1a      	adds	r2, r3, #4
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	6032      	str	r2, [r6, #0]
 8009204:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009208:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800920c:	2301      	movs	r3, #1
 800920e:	e09d      	b.n	800934c <_printf_i+0x1e8>
 8009210:	6833      	ldr	r3, [r6, #0]
 8009212:	6820      	ldr	r0, [r4, #0]
 8009214:	1d19      	adds	r1, r3, #4
 8009216:	6031      	str	r1, [r6, #0]
 8009218:	0606      	lsls	r6, r0, #24
 800921a:	d501      	bpl.n	8009220 <_printf_i+0xbc>
 800921c:	681d      	ldr	r5, [r3, #0]
 800921e:	e003      	b.n	8009228 <_printf_i+0xc4>
 8009220:	0645      	lsls	r5, r0, #25
 8009222:	d5fb      	bpl.n	800921c <_printf_i+0xb8>
 8009224:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009228:	2d00      	cmp	r5, #0
 800922a:	da03      	bge.n	8009234 <_printf_i+0xd0>
 800922c:	232d      	movs	r3, #45	@ 0x2d
 800922e:	426d      	negs	r5, r5
 8009230:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009234:	4859      	ldr	r0, [pc, #356]	@ (800939c <_printf_i+0x238>)
 8009236:	230a      	movs	r3, #10
 8009238:	e011      	b.n	800925e <_printf_i+0xfa>
 800923a:	6821      	ldr	r1, [r4, #0]
 800923c:	6833      	ldr	r3, [r6, #0]
 800923e:	0608      	lsls	r0, r1, #24
 8009240:	f853 5b04 	ldr.w	r5, [r3], #4
 8009244:	d402      	bmi.n	800924c <_printf_i+0xe8>
 8009246:	0649      	lsls	r1, r1, #25
 8009248:	bf48      	it	mi
 800924a:	b2ad      	uxthmi	r5, r5
 800924c:	2f6f      	cmp	r7, #111	@ 0x6f
 800924e:	4853      	ldr	r0, [pc, #332]	@ (800939c <_printf_i+0x238>)
 8009250:	6033      	str	r3, [r6, #0]
 8009252:	bf14      	ite	ne
 8009254:	230a      	movne	r3, #10
 8009256:	2308      	moveq	r3, #8
 8009258:	2100      	movs	r1, #0
 800925a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800925e:	6866      	ldr	r6, [r4, #4]
 8009260:	60a6      	str	r6, [r4, #8]
 8009262:	2e00      	cmp	r6, #0
 8009264:	bfa2      	ittt	ge
 8009266:	6821      	ldrge	r1, [r4, #0]
 8009268:	f021 0104 	bicge.w	r1, r1, #4
 800926c:	6021      	strge	r1, [r4, #0]
 800926e:	b90d      	cbnz	r5, 8009274 <_printf_i+0x110>
 8009270:	2e00      	cmp	r6, #0
 8009272:	d04b      	beq.n	800930c <_printf_i+0x1a8>
 8009274:	4616      	mov	r6, r2
 8009276:	fbb5 f1f3 	udiv	r1, r5, r3
 800927a:	fb03 5711 	mls	r7, r3, r1, r5
 800927e:	5dc7      	ldrb	r7, [r0, r7]
 8009280:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009284:	462f      	mov	r7, r5
 8009286:	42bb      	cmp	r3, r7
 8009288:	460d      	mov	r5, r1
 800928a:	d9f4      	bls.n	8009276 <_printf_i+0x112>
 800928c:	2b08      	cmp	r3, #8
 800928e:	d10b      	bne.n	80092a8 <_printf_i+0x144>
 8009290:	6823      	ldr	r3, [r4, #0]
 8009292:	07df      	lsls	r7, r3, #31
 8009294:	d508      	bpl.n	80092a8 <_printf_i+0x144>
 8009296:	6923      	ldr	r3, [r4, #16]
 8009298:	6861      	ldr	r1, [r4, #4]
 800929a:	4299      	cmp	r1, r3
 800929c:	bfde      	ittt	le
 800929e:	2330      	movle	r3, #48	@ 0x30
 80092a0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80092a4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80092a8:	1b92      	subs	r2, r2, r6
 80092aa:	6122      	str	r2, [r4, #16]
 80092ac:	f8cd a000 	str.w	sl, [sp]
 80092b0:	464b      	mov	r3, r9
 80092b2:	aa03      	add	r2, sp, #12
 80092b4:	4621      	mov	r1, r4
 80092b6:	4640      	mov	r0, r8
 80092b8:	f7ff fee6 	bl	8009088 <_printf_common>
 80092bc:	3001      	adds	r0, #1
 80092be:	d14a      	bne.n	8009356 <_printf_i+0x1f2>
 80092c0:	f04f 30ff 	mov.w	r0, #4294967295
 80092c4:	b004      	add	sp, #16
 80092c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092ca:	6823      	ldr	r3, [r4, #0]
 80092cc:	f043 0320 	orr.w	r3, r3, #32
 80092d0:	6023      	str	r3, [r4, #0]
 80092d2:	4833      	ldr	r0, [pc, #204]	@ (80093a0 <_printf_i+0x23c>)
 80092d4:	2778      	movs	r7, #120	@ 0x78
 80092d6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80092da:	6823      	ldr	r3, [r4, #0]
 80092dc:	6831      	ldr	r1, [r6, #0]
 80092de:	061f      	lsls	r7, r3, #24
 80092e0:	f851 5b04 	ldr.w	r5, [r1], #4
 80092e4:	d402      	bmi.n	80092ec <_printf_i+0x188>
 80092e6:	065f      	lsls	r7, r3, #25
 80092e8:	bf48      	it	mi
 80092ea:	b2ad      	uxthmi	r5, r5
 80092ec:	6031      	str	r1, [r6, #0]
 80092ee:	07d9      	lsls	r1, r3, #31
 80092f0:	bf44      	itt	mi
 80092f2:	f043 0320 	orrmi.w	r3, r3, #32
 80092f6:	6023      	strmi	r3, [r4, #0]
 80092f8:	b11d      	cbz	r5, 8009302 <_printf_i+0x19e>
 80092fa:	2310      	movs	r3, #16
 80092fc:	e7ac      	b.n	8009258 <_printf_i+0xf4>
 80092fe:	4827      	ldr	r0, [pc, #156]	@ (800939c <_printf_i+0x238>)
 8009300:	e7e9      	b.n	80092d6 <_printf_i+0x172>
 8009302:	6823      	ldr	r3, [r4, #0]
 8009304:	f023 0320 	bic.w	r3, r3, #32
 8009308:	6023      	str	r3, [r4, #0]
 800930a:	e7f6      	b.n	80092fa <_printf_i+0x196>
 800930c:	4616      	mov	r6, r2
 800930e:	e7bd      	b.n	800928c <_printf_i+0x128>
 8009310:	6833      	ldr	r3, [r6, #0]
 8009312:	6825      	ldr	r5, [r4, #0]
 8009314:	6961      	ldr	r1, [r4, #20]
 8009316:	1d18      	adds	r0, r3, #4
 8009318:	6030      	str	r0, [r6, #0]
 800931a:	062e      	lsls	r6, r5, #24
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	d501      	bpl.n	8009324 <_printf_i+0x1c0>
 8009320:	6019      	str	r1, [r3, #0]
 8009322:	e002      	b.n	800932a <_printf_i+0x1c6>
 8009324:	0668      	lsls	r0, r5, #25
 8009326:	d5fb      	bpl.n	8009320 <_printf_i+0x1bc>
 8009328:	8019      	strh	r1, [r3, #0]
 800932a:	2300      	movs	r3, #0
 800932c:	6123      	str	r3, [r4, #16]
 800932e:	4616      	mov	r6, r2
 8009330:	e7bc      	b.n	80092ac <_printf_i+0x148>
 8009332:	6833      	ldr	r3, [r6, #0]
 8009334:	1d1a      	adds	r2, r3, #4
 8009336:	6032      	str	r2, [r6, #0]
 8009338:	681e      	ldr	r6, [r3, #0]
 800933a:	6862      	ldr	r2, [r4, #4]
 800933c:	2100      	movs	r1, #0
 800933e:	4630      	mov	r0, r6
 8009340:	f7f6 ff46 	bl	80001d0 <memchr>
 8009344:	b108      	cbz	r0, 800934a <_printf_i+0x1e6>
 8009346:	1b80      	subs	r0, r0, r6
 8009348:	6060      	str	r0, [r4, #4]
 800934a:	6863      	ldr	r3, [r4, #4]
 800934c:	6123      	str	r3, [r4, #16]
 800934e:	2300      	movs	r3, #0
 8009350:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009354:	e7aa      	b.n	80092ac <_printf_i+0x148>
 8009356:	6923      	ldr	r3, [r4, #16]
 8009358:	4632      	mov	r2, r6
 800935a:	4649      	mov	r1, r9
 800935c:	4640      	mov	r0, r8
 800935e:	47d0      	blx	sl
 8009360:	3001      	adds	r0, #1
 8009362:	d0ad      	beq.n	80092c0 <_printf_i+0x15c>
 8009364:	6823      	ldr	r3, [r4, #0]
 8009366:	079b      	lsls	r3, r3, #30
 8009368:	d413      	bmi.n	8009392 <_printf_i+0x22e>
 800936a:	68e0      	ldr	r0, [r4, #12]
 800936c:	9b03      	ldr	r3, [sp, #12]
 800936e:	4298      	cmp	r0, r3
 8009370:	bfb8      	it	lt
 8009372:	4618      	movlt	r0, r3
 8009374:	e7a6      	b.n	80092c4 <_printf_i+0x160>
 8009376:	2301      	movs	r3, #1
 8009378:	4632      	mov	r2, r6
 800937a:	4649      	mov	r1, r9
 800937c:	4640      	mov	r0, r8
 800937e:	47d0      	blx	sl
 8009380:	3001      	adds	r0, #1
 8009382:	d09d      	beq.n	80092c0 <_printf_i+0x15c>
 8009384:	3501      	adds	r5, #1
 8009386:	68e3      	ldr	r3, [r4, #12]
 8009388:	9903      	ldr	r1, [sp, #12]
 800938a:	1a5b      	subs	r3, r3, r1
 800938c:	42ab      	cmp	r3, r5
 800938e:	dcf2      	bgt.n	8009376 <_printf_i+0x212>
 8009390:	e7eb      	b.n	800936a <_printf_i+0x206>
 8009392:	2500      	movs	r5, #0
 8009394:	f104 0619 	add.w	r6, r4, #25
 8009398:	e7f5      	b.n	8009386 <_printf_i+0x222>
 800939a:	bf00      	nop
 800939c:	0800de00 	.word	0x0800de00
 80093a0:	0800de11 	.word	0x0800de11

080093a4 <_scanf_float>:
 80093a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093a8:	b087      	sub	sp, #28
 80093aa:	4617      	mov	r7, r2
 80093ac:	9303      	str	r3, [sp, #12]
 80093ae:	688b      	ldr	r3, [r1, #8]
 80093b0:	1e5a      	subs	r2, r3, #1
 80093b2:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80093b6:	bf81      	itttt	hi
 80093b8:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80093bc:	eb03 0b05 	addhi.w	fp, r3, r5
 80093c0:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80093c4:	608b      	strhi	r3, [r1, #8]
 80093c6:	680b      	ldr	r3, [r1, #0]
 80093c8:	460a      	mov	r2, r1
 80093ca:	f04f 0500 	mov.w	r5, #0
 80093ce:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80093d2:	f842 3b1c 	str.w	r3, [r2], #28
 80093d6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80093da:	4680      	mov	r8, r0
 80093dc:	460c      	mov	r4, r1
 80093de:	bf98      	it	ls
 80093e0:	f04f 0b00 	movls.w	fp, #0
 80093e4:	9201      	str	r2, [sp, #4]
 80093e6:	4616      	mov	r6, r2
 80093e8:	46aa      	mov	sl, r5
 80093ea:	46a9      	mov	r9, r5
 80093ec:	9502      	str	r5, [sp, #8]
 80093ee:	68a2      	ldr	r2, [r4, #8]
 80093f0:	b152      	cbz	r2, 8009408 <_scanf_float+0x64>
 80093f2:	683b      	ldr	r3, [r7, #0]
 80093f4:	781b      	ldrb	r3, [r3, #0]
 80093f6:	2b4e      	cmp	r3, #78	@ 0x4e
 80093f8:	d864      	bhi.n	80094c4 <_scanf_float+0x120>
 80093fa:	2b40      	cmp	r3, #64	@ 0x40
 80093fc:	d83c      	bhi.n	8009478 <_scanf_float+0xd4>
 80093fe:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8009402:	b2c8      	uxtb	r0, r1
 8009404:	280e      	cmp	r0, #14
 8009406:	d93a      	bls.n	800947e <_scanf_float+0xda>
 8009408:	f1b9 0f00 	cmp.w	r9, #0
 800940c:	d003      	beq.n	8009416 <_scanf_float+0x72>
 800940e:	6823      	ldr	r3, [r4, #0]
 8009410:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009414:	6023      	str	r3, [r4, #0]
 8009416:	f10a 3aff 	add.w	sl, sl, #4294967295
 800941a:	f1ba 0f01 	cmp.w	sl, #1
 800941e:	f200 8117 	bhi.w	8009650 <_scanf_float+0x2ac>
 8009422:	9b01      	ldr	r3, [sp, #4]
 8009424:	429e      	cmp	r6, r3
 8009426:	f200 8108 	bhi.w	800963a <_scanf_float+0x296>
 800942a:	2001      	movs	r0, #1
 800942c:	b007      	add	sp, #28
 800942e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009432:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8009436:	2a0d      	cmp	r2, #13
 8009438:	d8e6      	bhi.n	8009408 <_scanf_float+0x64>
 800943a:	a101      	add	r1, pc, #4	@ (adr r1, 8009440 <_scanf_float+0x9c>)
 800943c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009440:	08009587 	.word	0x08009587
 8009444:	08009409 	.word	0x08009409
 8009448:	08009409 	.word	0x08009409
 800944c:	08009409 	.word	0x08009409
 8009450:	080095e7 	.word	0x080095e7
 8009454:	080095bf 	.word	0x080095bf
 8009458:	08009409 	.word	0x08009409
 800945c:	08009409 	.word	0x08009409
 8009460:	08009595 	.word	0x08009595
 8009464:	08009409 	.word	0x08009409
 8009468:	08009409 	.word	0x08009409
 800946c:	08009409 	.word	0x08009409
 8009470:	08009409 	.word	0x08009409
 8009474:	0800954d 	.word	0x0800954d
 8009478:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800947c:	e7db      	b.n	8009436 <_scanf_float+0x92>
 800947e:	290e      	cmp	r1, #14
 8009480:	d8c2      	bhi.n	8009408 <_scanf_float+0x64>
 8009482:	a001      	add	r0, pc, #4	@ (adr r0, 8009488 <_scanf_float+0xe4>)
 8009484:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8009488:	0800953d 	.word	0x0800953d
 800948c:	08009409 	.word	0x08009409
 8009490:	0800953d 	.word	0x0800953d
 8009494:	080095d3 	.word	0x080095d3
 8009498:	08009409 	.word	0x08009409
 800949c:	080094e5 	.word	0x080094e5
 80094a0:	08009523 	.word	0x08009523
 80094a4:	08009523 	.word	0x08009523
 80094a8:	08009523 	.word	0x08009523
 80094ac:	08009523 	.word	0x08009523
 80094b0:	08009523 	.word	0x08009523
 80094b4:	08009523 	.word	0x08009523
 80094b8:	08009523 	.word	0x08009523
 80094bc:	08009523 	.word	0x08009523
 80094c0:	08009523 	.word	0x08009523
 80094c4:	2b6e      	cmp	r3, #110	@ 0x6e
 80094c6:	d809      	bhi.n	80094dc <_scanf_float+0x138>
 80094c8:	2b60      	cmp	r3, #96	@ 0x60
 80094ca:	d8b2      	bhi.n	8009432 <_scanf_float+0x8e>
 80094cc:	2b54      	cmp	r3, #84	@ 0x54
 80094ce:	d07b      	beq.n	80095c8 <_scanf_float+0x224>
 80094d0:	2b59      	cmp	r3, #89	@ 0x59
 80094d2:	d199      	bne.n	8009408 <_scanf_float+0x64>
 80094d4:	2d07      	cmp	r5, #7
 80094d6:	d197      	bne.n	8009408 <_scanf_float+0x64>
 80094d8:	2508      	movs	r5, #8
 80094da:	e02c      	b.n	8009536 <_scanf_float+0x192>
 80094dc:	2b74      	cmp	r3, #116	@ 0x74
 80094de:	d073      	beq.n	80095c8 <_scanf_float+0x224>
 80094e0:	2b79      	cmp	r3, #121	@ 0x79
 80094e2:	e7f6      	b.n	80094d2 <_scanf_float+0x12e>
 80094e4:	6821      	ldr	r1, [r4, #0]
 80094e6:	05c8      	lsls	r0, r1, #23
 80094e8:	d51b      	bpl.n	8009522 <_scanf_float+0x17e>
 80094ea:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80094ee:	6021      	str	r1, [r4, #0]
 80094f0:	f109 0901 	add.w	r9, r9, #1
 80094f4:	f1bb 0f00 	cmp.w	fp, #0
 80094f8:	d003      	beq.n	8009502 <_scanf_float+0x15e>
 80094fa:	3201      	adds	r2, #1
 80094fc:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009500:	60a2      	str	r2, [r4, #8]
 8009502:	68a3      	ldr	r3, [r4, #8]
 8009504:	3b01      	subs	r3, #1
 8009506:	60a3      	str	r3, [r4, #8]
 8009508:	6923      	ldr	r3, [r4, #16]
 800950a:	3301      	adds	r3, #1
 800950c:	6123      	str	r3, [r4, #16]
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	3b01      	subs	r3, #1
 8009512:	2b00      	cmp	r3, #0
 8009514:	607b      	str	r3, [r7, #4]
 8009516:	f340 8087 	ble.w	8009628 <_scanf_float+0x284>
 800951a:	683b      	ldr	r3, [r7, #0]
 800951c:	3301      	adds	r3, #1
 800951e:	603b      	str	r3, [r7, #0]
 8009520:	e765      	b.n	80093ee <_scanf_float+0x4a>
 8009522:	eb1a 0105 	adds.w	r1, sl, r5
 8009526:	f47f af6f 	bne.w	8009408 <_scanf_float+0x64>
 800952a:	6822      	ldr	r2, [r4, #0]
 800952c:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8009530:	6022      	str	r2, [r4, #0]
 8009532:	460d      	mov	r5, r1
 8009534:	468a      	mov	sl, r1
 8009536:	f806 3b01 	strb.w	r3, [r6], #1
 800953a:	e7e2      	b.n	8009502 <_scanf_float+0x15e>
 800953c:	6822      	ldr	r2, [r4, #0]
 800953e:	0610      	lsls	r0, r2, #24
 8009540:	f57f af62 	bpl.w	8009408 <_scanf_float+0x64>
 8009544:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009548:	6022      	str	r2, [r4, #0]
 800954a:	e7f4      	b.n	8009536 <_scanf_float+0x192>
 800954c:	f1ba 0f00 	cmp.w	sl, #0
 8009550:	d10e      	bne.n	8009570 <_scanf_float+0x1cc>
 8009552:	f1b9 0f00 	cmp.w	r9, #0
 8009556:	d10e      	bne.n	8009576 <_scanf_float+0x1d2>
 8009558:	6822      	ldr	r2, [r4, #0]
 800955a:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800955e:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8009562:	d108      	bne.n	8009576 <_scanf_float+0x1d2>
 8009564:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8009568:	6022      	str	r2, [r4, #0]
 800956a:	f04f 0a01 	mov.w	sl, #1
 800956e:	e7e2      	b.n	8009536 <_scanf_float+0x192>
 8009570:	f1ba 0f02 	cmp.w	sl, #2
 8009574:	d055      	beq.n	8009622 <_scanf_float+0x27e>
 8009576:	2d01      	cmp	r5, #1
 8009578:	d002      	beq.n	8009580 <_scanf_float+0x1dc>
 800957a:	2d04      	cmp	r5, #4
 800957c:	f47f af44 	bne.w	8009408 <_scanf_float+0x64>
 8009580:	3501      	adds	r5, #1
 8009582:	b2ed      	uxtb	r5, r5
 8009584:	e7d7      	b.n	8009536 <_scanf_float+0x192>
 8009586:	f1ba 0f01 	cmp.w	sl, #1
 800958a:	f47f af3d 	bne.w	8009408 <_scanf_float+0x64>
 800958e:	f04f 0a02 	mov.w	sl, #2
 8009592:	e7d0      	b.n	8009536 <_scanf_float+0x192>
 8009594:	b97d      	cbnz	r5, 80095b6 <_scanf_float+0x212>
 8009596:	f1b9 0f00 	cmp.w	r9, #0
 800959a:	f47f af38 	bne.w	800940e <_scanf_float+0x6a>
 800959e:	6822      	ldr	r2, [r4, #0]
 80095a0:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80095a4:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80095a8:	f040 8108 	bne.w	80097bc <_scanf_float+0x418>
 80095ac:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80095b0:	6022      	str	r2, [r4, #0]
 80095b2:	2501      	movs	r5, #1
 80095b4:	e7bf      	b.n	8009536 <_scanf_float+0x192>
 80095b6:	2d03      	cmp	r5, #3
 80095b8:	d0e2      	beq.n	8009580 <_scanf_float+0x1dc>
 80095ba:	2d05      	cmp	r5, #5
 80095bc:	e7de      	b.n	800957c <_scanf_float+0x1d8>
 80095be:	2d02      	cmp	r5, #2
 80095c0:	f47f af22 	bne.w	8009408 <_scanf_float+0x64>
 80095c4:	2503      	movs	r5, #3
 80095c6:	e7b6      	b.n	8009536 <_scanf_float+0x192>
 80095c8:	2d06      	cmp	r5, #6
 80095ca:	f47f af1d 	bne.w	8009408 <_scanf_float+0x64>
 80095ce:	2507      	movs	r5, #7
 80095d0:	e7b1      	b.n	8009536 <_scanf_float+0x192>
 80095d2:	6822      	ldr	r2, [r4, #0]
 80095d4:	0591      	lsls	r1, r2, #22
 80095d6:	f57f af17 	bpl.w	8009408 <_scanf_float+0x64>
 80095da:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80095de:	6022      	str	r2, [r4, #0]
 80095e0:	f8cd 9008 	str.w	r9, [sp, #8]
 80095e4:	e7a7      	b.n	8009536 <_scanf_float+0x192>
 80095e6:	6822      	ldr	r2, [r4, #0]
 80095e8:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80095ec:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80095f0:	d006      	beq.n	8009600 <_scanf_float+0x25c>
 80095f2:	0550      	lsls	r0, r2, #21
 80095f4:	f57f af08 	bpl.w	8009408 <_scanf_float+0x64>
 80095f8:	f1b9 0f00 	cmp.w	r9, #0
 80095fc:	f000 80de 	beq.w	80097bc <_scanf_float+0x418>
 8009600:	0591      	lsls	r1, r2, #22
 8009602:	bf58      	it	pl
 8009604:	9902      	ldrpl	r1, [sp, #8]
 8009606:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800960a:	bf58      	it	pl
 800960c:	eba9 0101 	subpl.w	r1, r9, r1
 8009610:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8009614:	bf58      	it	pl
 8009616:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800961a:	6022      	str	r2, [r4, #0]
 800961c:	f04f 0900 	mov.w	r9, #0
 8009620:	e789      	b.n	8009536 <_scanf_float+0x192>
 8009622:	f04f 0a03 	mov.w	sl, #3
 8009626:	e786      	b.n	8009536 <_scanf_float+0x192>
 8009628:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800962c:	4639      	mov	r1, r7
 800962e:	4640      	mov	r0, r8
 8009630:	4798      	blx	r3
 8009632:	2800      	cmp	r0, #0
 8009634:	f43f aedb 	beq.w	80093ee <_scanf_float+0x4a>
 8009638:	e6e6      	b.n	8009408 <_scanf_float+0x64>
 800963a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800963e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009642:	463a      	mov	r2, r7
 8009644:	4640      	mov	r0, r8
 8009646:	4798      	blx	r3
 8009648:	6923      	ldr	r3, [r4, #16]
 800964a:	3b01      	subs	r3, #1
 800964c:	6123      	str	r3, [r4, #16]
 800964e:	e6e8      	b.n	8009422 <_scanf_float+0x7e>
 8009650:	1e6b      	subs	r3, r5, #1
 8009652:	2b06      	cmp	r3, #6
 8009654:	d824      	bhi.n	80096a0 <_scanf_float+0x2fc>
 8009656:	2d02      	cmp	r5, #2
 8009658:	d836      	bhi.n	80096c8 <_scanf_float+0x324>
 800965a:	9b01      	ldr	r3, [sp, #4]
 800965c:	429e      	cmp	r6, r3
 800965e:	f67f aee4 	bls.w	800942a <_scanf_float+0x86>
 8009662:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009666:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800966a:	463a      	mov	r2, r7
 800966c:	4640      	mov	r0, r8
 800966e:	4798      	blx	r3
 8009670:	6923      	ldr	r3, [r4, #16]
 8009672:	3b01      	subs	r3, #1
 8009674:	6123      	str	r3, [r4, #16]
 8009676:	e7f0      	b.n	800965a <_scanf_float+0x2b6>
 8009678:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800967c:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8009680:	463a      	mov	r2, r7
 8009682:	4640      	mov	r0, r8
 8009684:	4798      	blx	r3
 8009686:	6923      	ldr	r3, [r4, #16]
 8009688:	3b01      	subs	r3, #1
 800968a:	6123      	str	r3, [r4, #16]
 800968c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009690:	fa5f fa8a 	uxtb.w	sl, sl
 8009694:	f1ba 0f02 	cmp.w	sl, #2
 8009698:	d1ee      	bne.n	8009678 <_scanf_float+0x2d4>
 800969a:	3d03      	subs	r5, #3
 800969c:	b2ed      	uxtb	r5, r5
 800969e:	1b76      	subs	r6, r6, r5
 80096a0:	6823      	ldr	r3, [r4, #0]
 80096a2:	05da      	lsls	r2, r3, #23
 80096a4:	d530      	bpl.n	8009708 <_scanf_float+0x364>
 80096a6:	055b      	lsls	r3, r3, #21
 80096a8:	d511      	bpl.n	80096ce <_scanf_float+0x32a>
 80096aa:	9b01      	ldr	r3, [sp, #4]
 80096ac:	429e      	cmp	r6, r3
 80096ae:	f67f aebc 	bls.w	800942a <_scanf_float+0x86>
 80096b2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80096b6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80096ba:	463a      	mov	r2, r7
 80096bc:	4640      	mov	r0, r8
 80096be:	4798      	blx	r3
 80096c0:	6923      	ldr	r3, [r4, #16]
 80096c2:	3b01      	subs	r3, #1
 80096c4:	6123      	str	r3, [r4, #16]
 80096c6:	e7f0      	b.n	80096aa <_scanf_float+0x306>
 80096c8:	46aa      	mov	sl, r5
 80096ca:	46b3      	mov	fp, r6
 80096cc:	e7de      	b.n	800968c <_scanf_float+0x2e8>
 80096ce:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80096d2:	6923      	ldr	r3, [r4, #16]
 80096d4:	2965      	cmp	r1, #101	@ 0x65
 80096d6:	f103 33ff 	add.w	r3, r3, #4294967295
 80096da:	f106 35ff 	add.w	r5, r6, #4294967295
 80096de:	6123      	str	r3, [r4, #16]
 80096e0:	d00c      	beq.n	80096fc <_scanf_float+0x358>
 80096e2:	2945      	cmp	r1, #69	@ 0x45
 80096e4:	d00a      	beq.n	80096fc <_scanf_float+0x358>
 80096e6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80096ea:	463a      	mov	r2, r7
 80096ec:	4640      	mov	r0, r8
 80096ee:	4798      	blx	r3
 80096f0:	6923      	ldr	r3, [r4, #16]
 80096f2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80096f6:	3b01      	subs	r3, #1
 80096f8:	1eb5      	subs	r5, r6, #2
 80096fa:	6123      	str	r3, [r4, #16]
 80096fc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009700:	463a      	mov	r2, r7
 8009702:	4640      	mov	r0, r8
 8009704:	4798      	blx	r3
 8009706:	462e      	mov	r6, r5
 8009708:	6822      	ldr	r2, [r4, #0]
 800970a:	f012 0210 	ands.w	r2, r2, #16
 800970e:	d001      	beq.n	8009714 <_scanf_float+0x370>
 8009710:	2000      	movs	r0, #0
 8009712:	e68b      	b.n	800942c <_scanf_float+0x88>
 8009714:	7032      	strb	r2, [r6, #0]
 8009716:	6823      	ldr	r3, [r4, #0]
 8009718:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800971c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009720:	d11c      	bne.n	800975c <_scanf_float+0x3b8>
 8009722:	9b02      	ldr	r3, [sp, #8]
 8009724:	454b      	cmp	r3, r9
 8009726:	eba3 0209 	sub.w	r2, r3, r9
 800972a:	d123      	bne.n	8009774 <_scanf_float+0x3d0>
 800972c:	9901      	ldr	r1, [sp, #4]
 800972e:	2200      	movs	r2, #0
 8009730:	4640      	mov	r0, r8
 8009732:	f002 fca1 	bl	800c078 <_strtod_r>
 8009736:	9b03      	ldr	r3, [sp, #12]
 8009738:	6821      	ldr	r1, [r4, #0]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	f011 0f02 	tst.w	r1, #2
 8009740:	ec57 6b10 	vmov	r6, r7, d0
 8009744:	f103 0204 	add.w	r2, r3, #4
 8009748:	d01f      	beq.n	800978a <_scanf_float+0x3e6>
 800974a:	9903      	ldr	r1, [sp, #12]
 800974c:	600a      	str	r2, [r1, #0]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	e9c3 6700 	strd	r6, r7, [r3]
 8009754:	68e3      	ldr	r3, [r4, #12]
 8009756:	3301      	adds	r3, #1
 8009758:	60e3      	str	r3, [r4, #12]
 800975a:	e7d9      	b.n	8009710 <_scanf_float+0x36c>
 800975c:	9b04      	ldr	r3, [sp, #16]
 800975e:	2b00      	cmp	r3, #0
 8009760:	d0e4      	beq.n	800972c <_scanf_float+0x388>
 8009762:	9905      	ldr	r1, [sp, #20]
 8009764:	230a      	movs	r3, #10
 8009766:	3101      	adds	r1, #1
 8009768:	4640      	mov	r0, r8
 800976a:	f002 fd05 	bl	800c178 <_strtol_r>
 800976e:	9b04      	ldr	r3, [sp, #16]
 8009770:	9e05      	ldr	r6, [sp, #20]
 8009772:	1ac2      	subs	r2, r0, r3
 8009774:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8009778:	429e      	cmp	r6, r3
 800977a:	bf28      	it	cs
 800977c:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8009780:	4910      	ldr	r1, [pc, #64]	@ (80097c4 <_scanf_float+0x420>)
 8009782:	4630      	mov	r0, r6
 8009784:	f000 f942 	bl	8009a0c <siprintf>
 8009788:	e7d0      	b.n	800972c <_scanf_float+0x388>
 800978a:	f011 0f04 	tst.w	r1, #4
 800978e:	9903      	ldr	r1, [sp, #12]
 8009790:	600a      	str	r2, [r1, #0]
 8009792:	d1dc      	bne.n	800974e <_scanf_float+0x3aa>
 8009794:	681d      	ldr	r5, [r3, #0]
 8009796:	4632      	mov	r2, r6
 8009798:	463b      	mov	r3, r7
 800979a:	4630      	mov	r0, r6
 800979c:	4639      	mov	r1, r7
 800979e:	f7f7 f9c5 	bl	8000b2c <__aeabi_dcmpun>
 80097a2:	b128      	cbz	r0, 80097b0 <_scanf_float+0x40c>
 80097a4:	4808      	ldr	r0, [pc, #32]	@ (80097c8 <_scanf_float+0x424>)
 80097a6:	f000 fb15 	bl	8009dd4 <nanf>
 80097aa:	ed85 0a00 	vstr	s0, [r5]
 80097ae:	e7d1      	b.n	8009754 <_scanf_float+0x3b0>
 80097b0:	4630      	mov	r0, r6
 80097b2:	4639      	mov	r1, r7
 80097b4:	f7f7 fa18 	bl	8000be8 <__aeabi_d2f>
 80097b8:	6028      	str	r0, [r5, #0]
 80097ba:	e7cb      	b.n	8009754 <_scanf_float+0x3b0>
 80097bc:	f04f 0900 	mov.w	r9, #0
 80097c0:	e629      	b.n	8009416 <_scanf_float+0x72>
 80097c2:	bf00      	nop
 80097c4:	0800de22 	.word	0x0800de22
 80097c8:	0800e1d8 	.word	0x0800e1d8

080097cc <std>:
 80097cc:	2300      	movs	r3, #0
 80097ce:	b510      	push	{r4, lr}
 80097d0:	4604      	mov	r4, r0
 80097d2:	e9c0 3300 	strd	r3, r3, [r0]
 80097d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80097da:	6083      	str	r3, [r0, #8]
 80097dc:	8181      	strh	r1, [r0, #12]
 80097de:	6643      	str	r3, [r0, #100]	@ 0x64
 80097e0:	81c2      	strh	r2, [r0, #14]
 80097e2:	6183      	str	r3, [r0, #24]
 80097e4:	4619      	mov	r1, r3
 80097e6:	2208      	movs	r2, #8
 80097e8:	305c      	adds	r0, #92	@ 0x5c
 80097ea:	f000 fa33 	bl	8009c54 <memset>
 80097ee:	4b0d      	ldr	r3, [pc, #52]	@ (8009824 <std+0x58>)
 80097f0:	6263      	str	r3, [r4, #36]	@ 0x24
 80097f2:	4b0d      	ldr	r3, [pc, #52]	@ (8009828 <std+0x5c>)
 80097f4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80097f6:	4b0d      	ldr	r3, [pc, #52]	@ (800982c <std+0x60>)
 80097f8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80097fa:	4b0d      	ldr	r3, [pc, #52]	@ (8009830 <std+0x64>)
 80097fc:	6323      	str	r3, [r4, #48]	@ 0x30
 80097fe:	4b0d      	ldr	r3, [pc, #52]	@ (8009834 <std+0x68>)
 8009800:	6224      	str	r4, [r4, #32]
 8009802:	429c      	cmp	r4, r3
 8009804:	d006      	beq.n	8009814 <std+0x48>
 8009806:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800980a:	4294      	cmp	r4, r2
 800980c:	d002      	beq.n	8009814 <std+0x48>
 800980e:	33d0      	adds	r3, #208	@ 0xd0
 8009810:	429c      	cmp	r4, r3
 8009812:	d105      	bne.n	8009820 <std+0x54>
 8009814:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009818:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800981c:	f000 bace 	b.w	8009dbc <__retarget_lock_init_recursive>
 8009820:	bd10      	pop	{r4, pc}
 8009822:	bf00      	nop
 8009824:	08009aa1 	.word	0x08009aa1
 8009828:	08009ac7 	.word	0x08009ac7
 800982c:	08009aff 	.word	0x08009aff
 8009830:	08009b23 	.word	0x08009b23
 8009834:	20000770 	.word	0x20000770

08009838 <stdio_exit_handler>:
 8009838:	4a02      	ldr	r2, [pc, #8]	@ (8009844 <stdio_exit_handler+0xc>)
 800983a:	4903      	ldr	r1, [pc, #12]	@ (8009848 <stdio_exit_handler+0x10>)
 800983c:	4803      	ldr	r0, [pc, #12]	@ (800984c <stdio_exit_handler+0x14>)
 800983e:	f000 b869 	b.w	8009914 <_fwalk_sglue>
 8009842:	bf00      	nop
 8009844:	20000084 	.word	0x20000084
 8009848:	0800cb69 	.word	0x0800cb69
 800984c:	20000094 	.word	0x20000094

08009850 <cleanup_stdio>:
 8009850:	6841      	ldr	r1, [r0, #4]
 8009852:	4b0c      	ldr	r3, [pc, #48]	@ (8009884 <cleanup_stdio+0x34>)
 8009854:	4299      	cmp	r1, r3
 8009856:	b510      	push	{r4, lr}
 8009858:	4604      	mov	r4, r0
 800985a:	d001      	beq.n	8009860 <cleanup_stdio+0x10>
 800985c:	f003 f984 	bl	800cb68 <_fflush_r>
 8009860:	68a1      	ldr	r1, [r4, #8]
 8009862:	4b09      	ldr	r3, [pc, #36]	@ (8009888 <cleanup_stdio+0x38>)
 8009864:	4299      	cmp	r1, r3
 8009866:	d002      	beq.n	800986e <cleanup_stdio+0x1e>
 8009868:	4620      	mov	r0, r4
 800986a:	f003 f97d 	bl	800cb68 <_fflush_r>
 800986e:	68e1      	ldr	r1, [r4, #12]
 8009870:	4b06      	ldr	r3, [pc, #24]	@ (800988c <cleanup_stdio+0x3c>)
 8009872:	4299      	cmp	r1, r3
 8009874:	d004      	beq.n	8009880 <cleanup_stdio+0x30>
 8009876:	4620      	mov	r0, r4
 8009878:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800987c:	f003 b974 	b.w	800cb68 <_fflush_r>
 8009880:	bd10      	pop	{r4, pc}
 8009882:	bf00      	nop
 8009884:	20000770 	.word	0x20000770
 8009888:	200007d8 	.word	0x200007d8
 800988c:	20000840 	.word	0x20000840

08009890 <global_stdio_init.part.0>:
 8009890:	b510      	push	{r4, lr}
 8009892:	4b0b      	ldr	r3, [pc, #44]	@ (80098c0 <global_stdio_init.part.0+0x30>)
 8009894:	4c0b      	ldr	r4, [pc, #44]	@ (80098c4 <global_stdio_init.part.0+0x34>)
 8009896:	4a0c      	ldr	r2, [pc, #48]	@ (80098c8 <global_stdio_init.part.0+0x38>)
 8009898:	601a      	str	r2, [r3, #0]
 800989a:	4620      	mov	r0, r4
 800989c:	2200      	movs	r2, #0
 800989e:	2104      	movs	r1, #4
 80098a0:	f7ff ff94 	bl	80097cc <std>
 80098a4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80098a8:	2201      	movs	r2, #1
 80098aa:	2109      	movs	r1, #9
 80098ac:	f7ff ff8e 	bl	80097cc <std>
 80098b0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80098b4:	2202      	movs	r2, #2
 80098b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80098ba:	2112      	movs	r1, #18
 80098bc:	f7ff bf86 	b.w	80097cc <std>
 80098c0:	200008a8 	.word	0x200008a8
 80098c4:	20000770 	.word	0x20000770
 80098c8:	08009839 	.word	0x08009839

080098cc <__sfp_lock_acquire>:
 80098cc:	4801      	ldr	r0, [pc, #4]	@ (80098d4 <__sfp_lock_acquire+0x8>)
 80098ce:	f000 ba76 	b.w	8009dbe <__retarget_lock_acquire_recursive>
 80098d2:	bf00      	nop
 80098d4:	200008b1 	.word	0x200008b1

080098d8 <__sfp_lock_release>:
 80098d8:	4801      	ldr	r0, [pc, #4]	@ (80098e0 <__sfp_lock_release+0x8>)
 80098da:	f000 ba71 	b.w	8009dc0 <__retarget_lock_release_recursive>
 80098de:	bf00      	nop
 80098e0:	200008b1 	.word	0x200008b1

080098e4 <__sinit>:
 80098e4:	b510      	push	{r4, lr}
 80098e6:	4604      	mov	r4, r0
 80098e8:	f7ff fff0 	bl	80098cc <__sfp_lock_acquire>
 80098ec:	6a23      	ldr	r3, [r4, #32]
 80098ee:	b11b      	cbz	r3, 80098f8 <__sinit+0x14>
 80098f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80098f4:	f7ff bff0 	b.w	80098d8 <__sfp_lock_release>
 80098f8:	4b04      	ldr	r3, [pc, #16]	@ (800990c <__sinit+0x28>)
 80098fa:	6223      	str	r3, [r4, #32]
 80098fc:	4b04      	ldr	r3, [pc, #16]	@ (8009910 <__sinit+0x2c>)
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	2b00      	cmp	r3, #0
 8009902:	d1f5      	bne.n	80098f0 <__sinit+0xc>
 8009904:	f7ff ffc4 	bl	8009890 <global_stdio_init.part.0>
 8009908:	e7f2      	b.n	80098f0 <__sinit+0xc>
 800990a:	bf00      	nop
 800990c:	08009851 	.word	0x08009851
 8009910:	200008a8 	.word	0x200008a8

08009914 <_fwalk_sglue>:
 8009914:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009918:	4607      	mov	r7, r0
 800991a:	4688      	mov	r8, r1
 800991c:	4614      	mov	r4, r2
 800991e:	2600      	movs	r6, #0
 8009920:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009924:	f1b9 0901 	subs.w	r9, r9, #1
 8009928:	d505      	bpl.n	8009936 <_fwalk_sglue+0x22>
 800992a:	6824      	ldr	r4, [r4, #0]
 800992c:	2c00      	cmp	r4, #0
 800992e:	d1f7      	bne.n	8009920 <_fwalk_sglue+0xc>
 8009930:	4630      	mov	r0, r6
 8009932:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009936:	89ab      	ldrh	r3, [r5, #12]
 8009938:	2b01      	cmp	r3, #1
 800993a:	d907      	bls.n	800994c <_fwalk_sglue+0x38>
 800993c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009940:	3301      	adds	r3, #1
 8009942:	d003      	beq.n	800994c <_fwalk_sglue+0x38>
 8009944:	4629      	mov	r1, r5
 8009946:	4638      	mov	r0, r7
 8009948:	47c0      	blx	r8
 800994a:	4306      	orrs	r6, r0
 800994c:	3568      	adds	r5, #104	@ 0x68
 800994e:	e7e9      	b.n	8009924 <_fwalk_sglue+0x10>

08009950 <_puts_r>:
 8009950:	6a03      	ldr	r3, [r0, #32]
 8009952:	b570      	push	{r4, r5, r6, lr}
 8009954:	6884      	ldr	r4, [r0, #8]
 8009956:	4605      	mov	r5, r0
 8009958:	460e      	mov	r6, r1
 800995a:	b90b      	cbnz	r3, 8009960 <_puts_r+0x10>
 800995c:	f7ff ffc2 	bl	80098e4 <__sinit>
 8009960:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009962:	07db      	lsls	r3, r3, #31
 8009964:	d405      	bmi.n	8009972 <_puts_r+0x22>
 8009966:	89a3      	ldrh	r3, [r4, #12]
 8009968:	0598      	lsls	r0, r3, #22
 800996a:	d402      	bmi.n	8009972 <_puts_r+0x22>
 800996c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800996e:	f000 fa26 	bl	8009dbe <__retarget_lock_acquire_recursive>
 8009972:	89a3      	ldrh	r3, [r4, #12]
 8009974:	0719      	lsls	r1, r3, #28
 8009976:	d502      	bpl.n	800997e <_puts_r+0x2e>
 8009978:	6923      	ldr	r3, [r4, #16]
 800997a:	2b00      	cmp	r3, #0
 800997c:	d135      	bne.n	80099ea <_puts_r+0x9a>
 800997e:	4621      	mov	r1, r4
 8009980:	4628      	mov	r0, r5
 8009982:	f000 f911 	bl	8009ba8 <__swsetup_r>
 8009986:	b380      	cbz	r0, 80099ea <_puts_r+0x9a>
 8009988:	f04f 35ff 	mov.w	r5, #4294967295
 800998c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800998e:	07da      	lsls	r2, r3, #31
 8009990:	d405      	bmi.n	800999e <_puts_r+0x4e>
 8009992:	89a3      	ldrh	r3, [r4, #12]
 8009994:	059b      	lsls	r3, r3, #22
 8009996:	d402      	bmi.n	800999e <_puts_r+0x4e>
 8009998:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800999a:	f000 fa11 	bl	8009dc0 <__retarget_lock_release_recursive>
 800999e:	4628      	mov	r0, r5
 80099a0:	bd70      	pop	{r4, r5, r6, pc}
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	da04      	bge.n	80099b0 <_puts_r+0x60>
 80099a6:	69a2      	ldr	r2, [r4, #24]
 80099a8:	429a      	cmp	r2, r3
 80099aa:	dc17      	bgt.n	80099dc <_puts_r+0x8c>
 80099ac:	290a      	cmp	r1, #10
 80099ae:	d015      	beq.n	80099dc <_puts_r+0x8c>
 80099b0:	6823      	ldr	r3, [r4, #0]
 80099b2:	1c5a      	adds	r2, r3, #1
 80099b4:	6022      	str	r2, [r4, #0]
 80099b6:	7019      	strb	r1, [r3, #0]
 80099b8:	68a3      	ldr	r3, [r4, #8]
 80099ba:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80099be:	3b01      	subs	r3, #1
 80099c0:	60a3      	str	r3, [r4, #8]
 80099c2:	2900      	cmp	r1, #0
 80099c4:	d1ed      	bne.n	80099a2 <_puts_r+0x52>
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	da11      	bge.n	80099ee <_puts_r+0x9e>
 80099ca:	4622      	mov	r2, r4
 80099cc:	210a      	movs	r1, #10
 80099ce:	4628      	mov	r0, r5
 80099d0:	f000 f8ab 	bl	8009b2a <__swbuf_r>
 80099d4:	3001      	adds	r0, #1
 80099d6:	d0d7      	beq.n	8009988 <_puts_r+0x38>
 80099d8:	250a      	movs	r5, #10
 80099da:	e7d7      	b.n	800998c <_puts_r+0x3c>
 80099dc:	4622      	mov	r2, r4
 80099de:	4628      	mov	r0, r5
 80099e0:	f000 f8a3 	bl	8009b2a <__swbuf_r>
 80099e4:	3001      	adds	r0, #1
 80099e6:	d1e7      	bne.n	80099b8 <_puts_r+0x68>
 80099e8:	e7ce      	b.n	8009988 <_puts_r+0x38>
 80099ea:	3e01      	subs	r6, #1
 80099ec:	e7e4      	b.n	80099b8 <_puts_r+0x68>
 80099ee:	6823      	ldr	r3, [r4, #0]
 80099f0:	1c5a      	adds	r2, r3, #1
 80099f2:	6022      	str	r2, [r4, #0]
 80099f4:	220a      	movs	r2, #10
 80099f6:	701a      	strb	r2, [r3, #0]
 80099f8:	e7ee      	b.n	80099d8 <_puts_r+0x88>
	...

080099fc <puts>:
 80099fc:	4b02      	ldr	r3, [pc, #8]	@ (8009a08 <puts+0xc>)
 80099fe:	4601      	mov	r1, r0
 8009a00:	6818      	ldr	r0, [r3, #0]
 8009a02:	f7ff bfa5 	b.w	8009950 <_puts_r>
 8009a06:	bf00      	nop
 8009a08:	20000090 	.word	0x20000090

08009a0c <siprintf>:
 8009a0c:	b40e      	push	{r1, r2, r3}
 8009a0e:	b500      	push	{lr}
 8009a10:	b09c      	sub	sp, #112	@ 0x70
 8009a12:	ab1d      	add	r3, sp, #116	@ 0x74
 8009a14:	9002      	str	r0, [sp, #8]
 8009a16:	9006      	str	r0, [sp, #24]
 8009a18:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009a1c:	4809      	ldr	r0, [pc, #36]	@ (8009a44 <siprintf+0x38>)
 8009a1e:	9107      	str	r1, [sp, #28]
 8009a20:	9104      	str	r1, [sp, #16]
 8009a22:	4909      	ldr	r1, [pc, #36]	@ (8009a48 <siprintf+0x3c>)
 8009a24:	f853 2b04 	ldr.w	r2, [r3], #4
 8009a28:	9105      	str	r1, [sp, #20]
 8009a2a:	6800      	ldr	r0, [r0, #0]
 8009a2c:	9301      	str	r3, [sp, #4]
 8009a2e:	a902      	add	r1, sp, #8
 8009a30:	f002 fc00 	bl	800c234 <_svfiprintf_r>
 8009a34:	9b02      	ldr	r3, [sp, #8]
 8009a36:	2200      	movs	r2, #0
 8009a38:	701a      	strb	r2, [r3, #0]
 8009a3a:	b01c      	add	sp, #112	@ 0x70
 8009a3c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009a40:	b003      	add	sp, #12
 8009a42:	4770      	bx	lr
 8009a44:	20000090 	.word	0x20000090
 8009a48:	ffff0208 	.word	0xffff0208

08009a4c <siscanf>:
 8009a4c:	b40e      	push	{r1, r2, r3}
 8009a4e:	b530      	push	{r4, r5, lr}
 8009a50:	b09c      	sub	sp, #112	@ 0x70
 8009a52:	ac1f      	add	r4, sp, #124	@ 0x7c
 8009a54:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8009a58:	f854 5b04 	ldr.w	r5, [r4], #4
 8009a5c:	f8ad 2014 	strh.w	r2, [sp, #20]
 8009a60:	9002      	str	r0, [sp, #8]
 8009a62:	9006      	str	r0, [sp, #24]
 8009a64:	f7f6 fc04 	bl	8000270 <strlen>
 8009a68:	4b0b      	ldr	r3, [pc, #44]	@ (8009a98 <siscanf+0x4c>)
 8009a6a:	9003      	str	r0, [sp, #12]
 8009a6c:	9007      	str	r0, [sp, #28]
 8009a6e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009a70:	480a      	ldr	r0, [pc, #40]	@ (8009a9c <siscanf+0x50>)
 8009a72:	9401      	str	r4, [sp, #4]
 8009a74:	2300      	movs	r3, #0
 8009a76:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009a78:	9314      	str	r3, [sp, #80]	@ 0x50
 8009a7a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8009a7e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009a82:	462a      	mov	r2, r5
 8009a84:	4623      	mov	r3, r4
 8009a86:	a902      	add	r1, sp, #8
 8009a88:	6800      	ldr	r0, [r0, #0]
 8009a8a:	f002 fd27 	bl	800c4dc <__ssvfiscanf_r>
 8009a8e:	b01c      	add	sp, #112	@ 0x70
 8009a90:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009a94:	b003      	add	sp, #12
 8009a96:	4770      	bx	lr
 8009a98:	08009ac3 	.word	0x08009ac3
 8009a9c:	20000090 	.word	0x20000090

08009aa0 <__sread>:
 8009aa0:	b510      	push	{r4, lr}
 8009aa2:	460c      	mov	r4, r1
 8009aa4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009aa8:	f000 f92a 	bl	8009d00 <_read_r>
 8009aac:	2800      	cmp	r0, #0
 8009aae:	bfab      	itete	ge
 8009ab0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009ab2:	89a3      	ldrhlt	r3, [r4, #12]
 8009ab4:	181b      	addge	r3, r3, r0
 8009ab6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009aba:	bfac      	ite	ge
 8009abc:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009abe:	81a3      	strhlt	r3, [r4, #12]
 8009ac0:	bd10      	pop	{r4, pc}

08009ac2 <__seofread>:
 8009ac2:	2000      	movs	r0, #0
 8009ac4:	4770      	bx	lr

08009ac6 <__swrite>:
 8009ac6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009aca:	461f      	mov	r7, r3
 8009acc:	898b      	ldrh	r3, [r1, #12]
 8009ace:	05db      	lsls	r3, r3, #23
 8009ad0:	4605      	mov	r5, r0
 8009ad2:	460c      	mov	r4, r1
 8009ad4:	4616      	mov	r6, r2
 8009ad6:	d505      	bpl.n	8009ae4 <__swrite+0x1e>
 8009ad8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009adc:	2302      	movs	r3, #2
 8009ade:	2200      	movs	r2, #0
 8009ae0:	f000 f8fc 	bl	8009cdc <_lseek_r>
 8009ae4:	89a3      	ldrh	r3, [r4, #12]
 8009ae6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009aea:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009aee:	81a3      	strh	r3, [r4, #12]
 8009af0:	4632      	mov	r2, r6
 8009af2:	463b      	mov	r3, r7
 8009af4:	4628      	mov	r0, r5
 8009af6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009afa:	f000 b923 	b.w	8009d44 <_write_r>

08009afe <__sseek>:
 8009afe:	b510      	push	{r4, lr}
 8009b00:	460c      	mov	r4, r1
 8009b02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b06:	f000 f8e9 	bl	8009cdc <_lseek_r>
 8009b0a:	1c43      	adds	r3, r0, #1
 8009b0c:	89a3      	ldrh	r3, [r4, #12]
 8009b0e:	bf15      	itete	ne
 8009b10:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009b12:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009b16:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009b1a:	81a3      	strheq	r3, [r4, #12]
 8009b1c:	bf18      	it	ne
 8009b1e:	81a3      	strhne	r3, [r4, #12]
 8009b20:	bd10      	pop	{r4, pc}

08009b22 <__sclose>:
 8009b22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b26:	f000 b8c9 	b.w	8009cbc <_close_r>

08009b2a <__swbuf_r>:
 8009b2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b2c:	460e      	mov	r6, r1
 8009b2e:	4614      	mov	r4, r2
 8009b30:	4605      	mov	r5, r0
 8009b32:	b118      	cbz	r0, 8009b3c <__swbuf_r+0x12>
 8009b34:	6a03      	ldr	r3, [r0, #32]
 8009b36:	b90b      	cbnz	r3, 8009b3c <__swbuf_r+0x12>
 8009b38:	f7ff fed4 	bl	80098e4 <__sinit>
 8009b3c:	69a3      	ldr	r3, [r4, #24]
 8009b3e:	60a3      	str	r3, [r4, #8]
 8009b40:	89a3      	ldrh	r3, [r4, #12]
 8009b42:	071a      	lsls	r2, r3, #28
 8009b44:	d501      	bpl.n	8009b4a <__swbuf_r+0x20>
 8009b46:	6923      	ldr	r3, [r4, #16]
 8009b48:	b943      	cbnz	r3, 8009b5c <__swbuf_r+0x32>
 8009b4a:	4621      	mov	r1, r4
 8009b4c:	4628      	mov	r0, r5
 8009b4e:	f000 f82b 	bl	8009ba8 <__swsetup_r>
 8009b52:	b118      	cbz	r0, 8009b5c <__swbuf_r+0x32>
 8009b54:	f04f 37ff 	mov.w	r7, #4294967295
 8009b58:	4638      	mov	r0, r7
 8009b5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009b5c:	6823      	ldr	r3, [r4, #0]
 8009b5e:	6922      	ldr	r2, [r4, #16]
 8009b60:	1a98      	subs	r0, r3, r2
 8009b62:	6963      	ldr	r3, [r4, #20]
 8009b64:	b2f6      	uxtb	r6, r6
 8009b66:	4283      	cmp	r3, r0
 8009b68:	4637      	mov	r7, r6
 8009b6a:	dc05      	bgt.n	8009b78 <__swbuf_r+0x4e>
 8009b6c:	4621      	mov	r1, r4
 8009b6e:	4628      	mov	r0, r5
 8009b70:	f002 fffa 	bl	800cb68 <_fflush_r>
 8009b74:	2800      	cmp	r0, #0
 8009b76:	d1ed      	bne.n	8009b54 <__swbuf_r+0x2a>
 8009b78:	68a3      	ldr	r3, [r4, #8]
 8009b7a:	3b01      	subs	r3, #1
 8009b7c:	60a3      	str	r3, [r4, #8]
 8009b7e:	6823      	ldr	r3, [r4, #0]
 8009b80:	1c5a      	adds	r2, r3, #1
 8009b82:	6022      	str	r2, [r4, #0]
 8009b84:	701e      	strb	r6, [r3, #0]
 8009b86:	6962      	ldr	r2, [r4, #20]
 8009b88:	1c43      	adds	r3, r0, #1
 8009b8a:	429a      	cmp	r2, r3
 8009b8c:	d004      	beq.n	8009b98 <__swbuf_r+0x6e>
 8009b8e:	89a3      	ldrh	r3, [r4, #12]
 8009b90:	07db      	lsls	r3, r3, #31
 8009b92:	d5e1      	bpl.n	8009b58 <__swbuf_r+0x2e>
 8009b94:	2e0a      	cmp	r6, #10
 8009b96:	d1df      	bne.n	8009b58 <__swbuf_r+0x2e>
 8009b98:	4621      	mov	r1, r4
 8009b9a:	4628      	mov	r0, r5
 8009b9c:	f002 ffe4 	bl	800cb68 <_fflush_r>
 8009ba0:	2800      	cmp	r0, #0
 8009ba2:	d0d9      	beq.n	8009b58 <__swbuf_r+0x2e>
 8009ba4:	e7d6      	b.n	8009b54 <__swbuf_r+0x2a>
	...

08009ba8 <__swsetup_r>:
 8009ba8:	b538      	push	{r3, r4, r5, lr}
 8009baa:	4b29      	ldr	r3, [pc, #164]	@ (8009c50 <__swsetup_r+0xa8>)
 8009bac:	4605      	mov	r5, r0
 8009bae:	6818      	ldr	r0, [r3, #0]
 8009bb0:	460c      	mov	r4, r1
 8009bb2:	b118      	cbz	r0, 8009bbc <__swsetup_r+0x14>
 8009bb4:	6a03      	ldr	r3, [r0, #32]
 8009bb6:	b90b      	cbnz	r3, 8009bbc <__swsetup_r+0x14>
 8009bb8:	f7ff fe94 	bl	80098e4 <__sinit>
 8009bbc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009bc0:	0719      	lsls	r1, r3, #28
 8009bc2:	d422      	bmi.n	8009c0a <__swsetup_r+0x62>
 8009bc4:	06da      	lsls	r2, r3, #27
 8009bc6:	d407      	bmi.n	8009bd8 <__swsetup_r+0x30>
 8009bc8:	2209      	movs	r2, #9
 8009bca:	602a      	str	r2, [r5, #0]
 8009bcc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009bd0:	81a3      	strh	r3, [r4, #12]
 8009bd2:	f04f 30ff 	mov.w	r0, #4294967295
 8009bd6:	e033      	b.n	8009c40 <__swsetup_r+0x98>
 8009bd8:	0758      	lsls	r0, r3, #29
 8009bda:	d512      	bpl.n	8009c02 <__swsetup_r+0x5a>
 8009bdc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009bde:	b141      	cbz	r1, 8009bf2 <__swsetup_r+0x4a>
 8009be0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009be4:	4299      	cmp	r1, r3
 8009be6:	d002      	beq.n	8009bee <__swsetup_r+0x46>
 8009be8:	4628      	mov	r0, r5
 8009bea:	f000 ff45 	bl	800aa78 <_free_r>
 8009bee:	2300      	movs	r3, #0
 8009bf0:	6363      	str	r3, [r4, #52]	@ 0x34
 8009bf2:	89a3      	ldrh	r3, [r4, #12]
 8009bf4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009bf8:	81a3      	strh	r3, [r4, #12]
 8009bfa:	2300      	movs	r3, #0
 8009bfc:	6063      	str	r3, [r4, #4]
 8009bfe:	6923      	ldr	r3, [r4, #16]
 8009c00:	6023      	str	r3, [r4, #0]
 8009c02:	89a3      	ldrh	r3, [r4, #12]
 8009c04:	f043 0308 	orr.w	r3, r3, #8
 8009c08:	81a3      	strh	r3, [r4, #12]
 8009c0a:	6923      	ldr	r3, [r4, #16]
 8009c0c:	b94b      	cbnz	r3, 8009c22 <__swsetup_r+0x7a>
 8009c0e:	89a3      	ldrh	r3, [r4, #12]
 8009c10:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009c14:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009c18:	d003      	beq.n	8009c22 <__swsetup_r+0x7a>
 8009c1a:	4621      	mov	r1, r4
 8009c1c:	4628      	mov	r0, r5
 8009c1e:	f002 fff1 	bl	800cc04 <__smakebuf_r>
 8009c22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009c26:	f013 0201 	ands.w	r2, r3, #1
 8009c2a:	d00a      	beq.n	8009c42 <__swsetup_r+0x9a>
 8009c2c:	2200      	movs	r2, #0
 8009c2e:	60a2      	str	r2, [r4, #8]
 8009c30:	6962      	ldr	r2, [r4, #20]
 8009c32:	4252      	negs	r2, r2
 8009c34:	61a2      	str	r2, [r4, #24]
 8009c36:	6922      	ldr	r2, [r4, #16]
 8009c38:	b942      	cbnz	r2, 8009c4c <__swsetup_r+0xa4>
 8009c3a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009c3e:	d1c5      	bne.n	8009bcc <__swsetup_r+0x24>
 8009c40:	bd38      	pop	{r3, r4, r5, pc}
 8009c42:	0799      	lsls	r1, r3, #30
 8009c44:	bf58      	it	pl
 8009c46:	6962      	ldrpl	r2, [r4, #20]
 8009c48:	60a2      	str	r2, [r4, #8]
 8009c4a:	e7f4      	b.n	8009c36 <__swsetup_r+0x8e>
 8009c4c:	2000      	movs	r0, #0
 8009c4e:	e7f7      	b.n	8009c40 <__swsetup_r+0x98>
 8009c50:	20000090 	.word	0x20000090

08009c54 <memset>:
 8009c54:	4402      	add	r2, r0
 8009c56:	4603      	mov	r3, r0
 8009c58:	4293      	cmp	r3, r2
 8009c5a:	d100      	bne.n	8009c5e <memset+0xa>
 8009c5c:	4770      	bx	lr
 8009c5e:	f803 1b01 	strb.w	r1, [r3], #1
 8009c62:	e7f9      	b.n	8009c58 <memset+0x4>

08009c64 <strncmp>:
 8009c64:	b510      	push	{r4, lr}
 8009c66:	b16a      	cbz	r2, 8009c84 <strncmp+0x20>
 8009c68:	3901      	subs	r1, #1
 8009c6a:	1884      	adds	r4, r0, r2
 8009c6c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009c70:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8009c74:	429a      	cmp	r2, r3
 8009c76:	d103      	bne.n	8009c80 <strncmp+0x1c>
 8009c78:	42a0      	cmp	r0, r4
 8009c7a:	d001      	beq.n	8009c80 <strncmp+0x1c>
 8009c7c:	2a00      	cmp	r2, #0
 8009c7e:	d1f5      	bne.n	8009c6c <strncmp+0x8>
 8009c80:	1ad0      	subs	r0, r2, r3
 8009c82:	bd10      	pop	{r4, pc}
 8009c84:	4610      	mov	r0, r2
 8009c86:	e7fc      	b.n	8009c82 <strncmp+0x1e>

08009c88 <strstr>:
 8009c88:	780a      	ldrb	r2, [r1, #0]
 8009c8a:	b570      	push	{r4, r5, r6, lr}
 8009c8c:	b96a      	cbnz	r2, 8009caa <strstr+0x22>
 8009c8e:	bd70      	pop	{r4, r5, r6, pc}
 8009c90:	429a      	cmp	r2, r3
 8009c92:	d109      	bne.n	8009ca8 <strstr+0x20>
 8009c94:	460c      	mov	r4, r1
 8009c96:	4605      	mov	r5, r0
 8009c98:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d0f6      	beq.n	8009c8e <strstr+0x6>
 8009ca0:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8009ca4:	429e      	cmp	r6, r3
 8009ca6:	d0f7      	beq.n	8009c98 <strstr+0x10>
 8009ca8:	3001      	adds	r0, #1
 8009caa:	7803      	ldrb	r3, [r0, #0]
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d1ef      	bne.n	8009c90 <strstr+0x8>
 8009cb0:	4618      	mov	r0, r3
 8009cb2:	e7ec      	b.n	8009c8e <strstr+0x6>

08009cb4 <_localeconv_r>:
 8009cb4:	4800      	ldr	r0, [pc, #0]	@ (8009cb8 <_localeconv_r+0x4>)
 8009cb6:	4770      	bx	lr
 8009cb8:	200001d0 	.word	0x200001d0

08009cbc <_close_r>:
 8009cbc:	b538      	push	{r3, r4, r5, lr}
 8009cbe:	4d06      	ldr	r5, [pc, #24]	@ (8009cd8 <_close_r+0x1c>)
 8009cc0:	2300      	movs	r3, #0
 8009cc2:	4604      	mov	r4, r0
 8009cc4:	4608      	mov	r0, r1
 8009cc6:	602b      	str	r3, [r5, #0]
 8009cc8:	f7f8 ffae 	bl	8002c28 <_close>
 8009ccc:	1c43      	adds	r3, r0, #1
 8009cce:	d102      	bne.n	8009cd6 <_close_r+0x1a>
 8009cd0:	682b      	ldr	r3, [r5, #0]
 8009cd2:	b103      	cbz	r3, 8009cd6 <_close_r+0x1a>
 8009cd4:	6023      	str	r3, [r4, #0]
 8009cd6:	bd38      	pop	{r3, r4, r5, pc}
 8009cd8:	200008ac 	.word	0x200008ac

08009cdc <_lseek_r>:
 8009cdc:	b538      	push	{r3, r4, r5, lr}
 8009cde:	4d07      	ldr	r5, [pc, #28]	@ (8009cfc <_lseek_r+0x20>)
 8009ce0:	4604      	mov	r4, r0
 8009ce2:	4608      	mov	r0, r1
 8009ce4:	4611      	mov	r1, r2
 8009ce6:	2200      	movs	r2, #0
 8009ce8:	602a      	str	r2, [r5, #0]
 8009cea:	461a      	mov	r2, r3
 8009cec:	f7f8 ffc3 	bl	8002c76 <_lseek>
 8009cf0:	1c43      	adds	r3, r0, #1
 8009cf2:	d102      	bne.n	8009cfa <_lseek_r+0x1e>
 8009cf4:	682b      	ldr	r3, [r5, #0]
 8009cf6:	b103      	cbz	r3, 8009cfa <_lseek_r+0x1e>
 8009cf8:	6023      	str	r3, [r4, #0]
 8009cfa:	bd38      	pop	{r3, r4, r5, pc}
 8009cfc:	200008ac 	.word	0x200008ac

08009d00 <_read_r>:
 8009d00:	b538      	push	{r3, r4, r5, lr}
 8009d02:	4d07      	ldr	r5, [pc, #28]	@ (8009d20 <_read_r+0x20>)
 8009d04:	4604      	mov	r4, r0
 8009d06:	4608      	mov	r0, r1
 8009d08:	4611      	mov	r1, r2
 8009d0a:	2200      	movs	r2, #0
 8009d0c:	602a      	str	r2, [r5, #0]
 8009d0e:	461a      	mov	r2, r3
 8009d10:	f7f8 ff51 	bl	8002bb6 <_read>
 8009d14:	1c43      	adds	r3, r0, #1
 8009d16:	d102      	bne.n	8009d1e <_read_r+0x1e>
 8009d18:	682b      	ldr	r3, [r5, #0]
 8009d1a:	b103      	cbz	r3, 8009d1e <_read_r+0x1e>
 8009d1c:	6023      	str	r3, [r4, #0]
 8009d1e:	bd38      	pop	{r3, r4, r5, pc}
 8009d20:	200008ac 	.word	0x200008ac

08009d24 <_sbrk_r>:
 8009d24:	b538      	push	{r3, r4, r5, lr}
 8009d26:	4d06      	ldr	r5, [pc, #24]	@ (8009d40 <_sbrk_r+0x1c>)
 8009d28:	2300      	movs	r3, #0
 8009d2a:	4604      	mov	r4, r0
 8009d2c:	4608      	mov	r0, r1
 8009d2e:	602b      	str	r3, [r5, #0]
 8009d30:	f7f8 ffae 	bl	8002c90 <_sbrk>
 8009d34:	1c43      	adds	r3, r0, #1
 8009d36:	d102      	bne.n	8009d3e <_sbrk_r+0x1a>
 8009d38:	682b      	ldr	r3, [r5, #0]
 8009d3a:	b103      	cbz	r3, 8009d3e <_sbrk_r+0x1a>
 8009d3c:	6023      	str	r3, [r4, #0]
 8009d3e:	bd38      	pop	{r3, r4, r5, pc}
 8009d40:	200008ac 	.word	0x200008ac

08009d44 <_write_r>:
 8009d44:	b538      	push	{r3, r4, r5, lr}
 8009d46:	4d07      	ldr	r5, [pc, #28]	@ (8009d64 <_write_r+0x20>)
 8009d48:	4604      	mov	r4, r0
 8009d4a:	4608      	mov	r0, r1
 8009d4c:	4611      	mov	r1, r2
 8009d4e:	2200      	movs	r2, #0
 8009d50:	602a      	str	r2, [r5, #0]
 8009d52:	461a      	mov	r2, r3
 8009d54:	f7f8 ff4c 	bl	8002bf0 <_write>
 8009d58:	1c43      	adds	r3, r0, #1
 8009d5a:	d102      	bne.n	8009d62 <_write_r+0x1e>
 8009d5c:	682b      	ldr	r3, [r5, #0]
 8009d5e:	b103      	cbz	r3, 8009d62 <_write_r+0x1e>
 8009d60:	6023      	str	r3, [r4, #0]
 8009d62:	bd38      	pop	{r3, r4, r5, pc}
 8009d64:	200008ac 	.word	0x200008ac

08009d68 <__errno>:
 8009d68:	4b01      	ldr	r3, [pc, #4]	@ (8009d70 <__errno+0x8>)
 8009d6a:	6818      	ldr	r0, [r3, #0]
 8009d6c:	4770      	bx	lr
 8009d6e:	bf00      	nop
 8009d70:	20000090 	.word	0x20000090

08009d74 <__libc_init_array>:
 8009d74:	b570      	push	{r4, r5, r6, lr}
 8009d76:	4d0d      	ldr	r5, [pc, #52]	@ (8009dac <__libc_init_array+0x38>)
 8009d78:	4c0d      	ldr	r4, [pc, #52]	@ (8009db0 <__libc_init_array+0x3c>)
 8009d7a:	1b64      	subs	r4, r4, r5
 8009d7c:	10a4      	asrs	r4, r4, #2
 8009d7e:	2600      	movs	r6, #0
 8009d80:	42a6      	cmp	r6, r4
 8009d82:	d109      	bne.n	8009d98 <__libc_init_array+0x24>
 8009d84:	4d0b      	ldr	r5, [pc, #44]	@ (8009db4 <__libc_init_array+0x40>)
 8009d86:	4c0c      	ldr	r4, [pc, #48]	@ (8009db8 <__libc_init_array+0x44>)
 8009d88:	f003 fdfa 	bl	800d980 <_init>
 8009d8c:	1b64      	subs	r4, r4, r5
 8009d8e:	10a4      	asrs	r4, r4, #2
 8009d90:	2600      	movs	r6, #0
 8009d92:	42a6      	cmp	r6, r4
 8009d94:	d105      	bne.n	8009da2 <__libc_init_array+0x2e>
 8009d96:	bd70      	pop	{r4, r5, r6, pc}
 8009d98:	f855 3b04 	ldr.w	r3, [r5], #4
 8009d9c:	4798      	blx	r3
 8009d9e:	3601      	adds	r6, #1
 8009da0:	e7ee      	b.n	8009d80 <__libc_init_array+0xc>
 8009da2:	f855 3b04 	ldr.w	r3, [r5], #4
 8009da6:	4798      	blx	r3
 8009da8:	3601      	adds	r6, #1
 8009daa:	e7f2      	b.n	8009d92 <__libc_init_array+0x1e>
 8009dac:	0800e244 	.word	0x0800e244
 8009db0:	0800e244 	.word	0x0800e244
 8009db4:	0800e244 	.word	0x0800e244
 8009db8:	0800e248 	.word	0x0800e248

08009dbc <__retarget_lock_init_recursive>:
 8009dbc:	4770      	bx	lr

08009dbe <__retarget_lock_acquire_recursive>:
 8009dbe:	4770      	bx	lr

08009dc0 <__retarget_lock_release_recursive>:
 8009dc0:	4770      	bx	lr

08009dc2 <strcpy>:
 8009dc2:	4603      	mov	r3, r0
 8009dc4:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009dc8:	f803 2b01 	strb.w	r2, [r3], #1
 8009dcc:	2a00      	cmp	r2, #0
 8009dce:	d1f9      	bne.n	8009dc4 <strcpy+0x2>
 8009dd0:	4770      	bx	lr
	...

08009dd4 <nanf>:
 8009dd4:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8009ddc <nanf+0x8>
 8009dd8:	4770      	bx	lr
 8009dda:	bf00      	nop
 8009ddc:	7fc00000 	.word	0x7fc00000

08009de0 <quorem>:
 8009de0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009de4:	6903      	ldr	r3, [r0, #16]
 8009de6:	690c      	ldr	r4, [r1, #16]
 8009de8:	42a3      	cmp	r3, r4
 8009dea:	4607      	mov	r7, r0
 8009dec:	db7e      	blt.n	8009eec <quorem+0x10c>
 8009dee:	3c01      	subs	r4, #1
 8009df0:	f101 0814 	add.w	r8, r1, #20
 8009df4:	00a3      	lsls	r3, r4, #2
 8009df6:	f100 0514 	add.w	r5, r0, #20
 8009dfa:	9300      	str	r3, [sp, #0]
 8009dfc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009e00:	9301      	str	r3, [sp, #4]
 8009e02:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009e06:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009e0a:	3301      	adds	r3, #1
 8009e0c:	429a      	cmp	r2, r3
 8009e0e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009e12:	fbb2 f6f3 	udiv	r6, r2, r3
 8009e16:	d32e      	bcc.n	8009e76 <quorem+0x96>
 8009e18:	f04f 0a00 	mov.w	sl, #0
 8009e1c:	46c4      	mov	ip, r8
 8009e1e:	46ae      	mov	lr, r5
 8009e20:	46d3      	mov	fp, sl
 8009e22:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009e26:	b298      	uxth	r0, r3
 8009e28:	fb06 a000 	mla	r0, r6, r0, sl
 8009e2c:	0c02      	lsrs	r2, r0, #16
 8009e2e:	0c1b      	lsrs	r3, r3, #16
 8009e30:	fb06 2303 	mla	r3, r6, r3, r2
 8009e34:	f8de 2000 	ldr.w	r2, [lr]
 8009e38:	b280      	uxth	r0, r0
 8009e3a:	b292      	uxth	r2, r2
 8009e3c:	1a12      	subs	r2, r2, r0
 8009e3e:	445a      	add	r2, fp
 8009e40:	f8de 0000 	ldr.w	r0, [lr]
 8009e44:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009e48:	b29b      	uxth	r3, r3
 8009e4a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8009e4e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8009e52:	b292      	uxth	r2, r2
 8009e54:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009e58:	45e1      	cmp	r9, ip
 8009e5a:	f84e 2b04 	str.w	r2, [lr], #4
 8009e5e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8009e62:	d2de      	bcs.n	8009e22 <quorem+0x42>
 8009e64:	9b00      	ldr	r3, [sp, #0]
 8009e66:	58eb      	ldr	r3, [r5, r3]
 8009e68:	b92b      	cbnz	r3, 8009e76 <quorem+0x96>
 8009e6a:	9b01      	ldr	r3, [sp, #4]
 8009e6c:	3b04      	subs	r3, #4
 8009e6e:	429d      	cmp	r5, r3
 8009e70:	461a      	mov	r2, r3
 8009e72:	d32f      	bcc.n	8009ed4 <quorem+0xf4>
 8009e74:	613c      	str	r4, [r7, #16]
 8009e76:	4638      	mov	r0, r7
 8009e78:	f001 f90c 	bl	800b094 <__mcmp>
 8009e7c:	2800      	cmp	r0, #0
 8009e7e:	db25      	blt.n	8009ecc <quorem+0xec>
 8009e80:	4629      	mov	r1, r5
 8009e82:	2000      	movs	r0, #0
 8009e84:	f858 2b04 	ldr.w	r2, [r8], #4
 8009e88:	f8d1 c000 	ldr.w	ip, [r1]
 8009e8c:	fa1f fe82 	uxth.w	lr, r2
 8009e90:	fa1f f38c 	uxth.w	r3, ip
 8009e94:	eba3 030e 	sub.w	r3, r3, lr
 8009e98:	4403      	add	r3, r0
 8009e9a:	0c12      	lsrs	r2, r2, #16
 8009e9c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8009ea0:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8009ea4:	b29b      	uxth	r3, r3
 8009ea6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009eaa:	45c1      	cmp	r9, r8
 8009eac:	f841 3b04 	str.w	r3, [r1], #4
 8009eb0:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009eb4:	d2e6      	bcs.n	8009e84 <quorem+0xa4>
 8009eb6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009eba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009ebe:	b922      	cbnz	r2, 8009eca <quorem+0xea>
 8009ec0:	3b04      	subs	r3, #4
 8009ec2:	429d      	cmp	r5, r3
 8009ec4:	461a      	mov	r2, r3
 8009ec6:	d30b      	bcc.n	8009ee0 <quorem+0x100>
 8009ec8:	613c      	str	r4, [r7, #16]
 8009eca:	3601      	adds	r6, #1
 8009ecc:	4630      	mov	r0, r6
 8009ece:	b003      	add	sp, #12
 8009ed0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ed4:	6812      	ldr	r2, [r2, #0]
 8009ed6:	3b04      	subs	r3, #4
 8009ed8:	2a00      	cmp	r2, #0
 8009eda:	d1cb      	bne.n	8009e74 <quorem+0x94>
 8009edc:	3c01      	subs	r4, #1
 8009ede:	e7c6      	b.n	8009e6e <quorem+0x8e>
 8009ee0:	6812      	ldr	r2, [r2, #0]
 8009ee2:	3b04      	subs	r3, #4
 8009ee4:	2a00      	cmp	r2, #0
 8009ee6:	d1ef      	bne.n	8009ec8 <quorem+0xe8>
 8009ee8:	3c01      	subs	r4, #1
 8009eea:	e7ea      	b.n	8009ec2 <quorem+0xe2>
 8009eec:	2000      	movs	r0, #0
 8009eee:	e7ee      	b.n	8009ece <quorem+0xee>

08009ef0 <_dtoa_r>:
 8009ef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ef4:	69c7      	ldr	r7, [r0, #28]
 8009ef6:	b099      	sub	sp, #100	@ 0x64
 8009ef8:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009efc:	ec55 4b10 	vmov	r4, r5, d0
 8009f00:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8009f02:	9109      	str	r1, [sp, #36]	@ 0x24
 8009f04:	4683      	mov	fp, r0
 8009f06:	920e      	str	r2, [sp, #56]	@ 0x38
 8009f08:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009f0a:	b97f      	cbnz	r7, 8009f2c <_dtoa_r+0x3c>
 8009f0c:	2010      	movs	r0, #16
 8009f0e:	f7fe fd3b 	bl	8008988 <malloc>
 8009f12:	4602      	mov	r2, r0
 8009f14:	f8cb 001c 	str.w	r0, [fp, #28]
 8009f18:	b920      	cbnz	r0, 8009f24 <_dtoa_r+0x34>
 8009f1a:	4ba7      	ldr	r3, [pc, #668]	@ (800a1b8 <_dtoa_r+0x2c8>)
 8009f1c:	21ef      	movs	r1, #239	@ 0xef
 8009f1e:	48a7      	ldr	r0, [pc, #668]	@ (800a1bc <_dtoa_r+0x2cc>)
 8009f20:	f002 ff72 	bl	800ce08 <__assert_func>
 8009f24:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009f28:	6007      	str	r7, [r0, #0]
 8009f2a:	60c7      	str	r7, [r0, #12]
 8009f2c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009f30:	6819      	ldr	r1, [r3, #0]
 8009f32:	b159      	cbz	r1, 8009f4c <_dtoa_r+0x5c>
 8009f34:	685a      	ldr	r2, [r3, #4]
 8009f36:	604a      	str	r2, [r1, #4]
 8009f38:	2301      	movs	r3, #1
 8009f3a:	4093      	lsls	r3, r2
 8009f3c:	608b      	str	r3, [r1, #8]
 8009f3e:	4658      	mov	r0, fp
 8009f40:	f000 fe24 	bl	800ab8c <_Bfree>
 8009f44:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009f48:	2200      	movs	r2, #0
 8009f4a:	601a      	str	r2, [r3, #0]
 8009f4c:	1e2b      	subs	r3, r5, #0
 8009f4e:	bfb9      	ittee	lt
 8009f50:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8009f54:	9303      	strlt	r3, [sp, #12]
 8009f56:	2300      	movge	r3, #0
 8009f58:	6033      	strge	r3, [r6, #0]
 8009f5a:	9f03      	ldr	r7, [sp, #12]
 8009f5c:	4b98      	ldr	r3, [pc, #608]	@ (800a1c0 <_dtoa_r+0x2d0>)
 8009f5e:	bfbc      	itt	lt
 8009f60:	2201      	movlt	r2, #1
 8009f62:	6032      	strlt	r2, [r6, #0]
 8009f64:	43bb      	bics	r3, r7
 8009f66:	d112      	bne.n	8009f8e <_dtoa_r+0x9e>
 8009f68:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009f6a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8009f6e:	6013      	str	r3, [r2, #0]
 8009f70:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009f74:	4323      	orrs	r3, r4
 8009f76:	f000 854d 	beq.w	800aa14 <_dtoa_r+0xb24>
 8009f7a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009f7c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800a1d4 <_dtoa_r+0x2e4>
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	f000 854f 	beq.w	800aa24 <_dtoa_r+0xb34>
 8009f86:	f10a 0303 	add.w	r3, sl, #3
 8009f8a:	f000 bd49 	b.w	800aa20 <_dtoa_r+0xb30>
 8009f8e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009f92:	2200      	movs	r2, #0
 8009f94:	ec51 0b17 	vmov	r0, r1, d7
 8009f98:	2300      	movs	r3, #0
 8009f9a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8009f9e:	f7f6 fd93 	bl	8000ac8 <__aeabi_dcmpeq>
 8009fa2:	4680      	mov	r8, r0
 8009fa4:	b158      	cbz	r0, 8009fbe <_dtoa_r+0xce>
 8009fa6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009fa8:	2301      	movs	r3, #1
 8009faa:	6013      	str	r3, [r2, #0]
 8009fac:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009fae:	b113      	cbz	r3, 8009fb6 <_dtoa_r+0xc6>
 8009fb0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8009fb2:	4b84      	ldr	r3, [pc, #528]	@ (800a1c4 <_dtoa_r+0x2d4>)
 8009fb4:	6013      	str	r3, [r2, #0]
 8009fb6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800a1d8 <_dtoa_r+0x2e8>
 8009fba:	f000 bd33 	b.w	800aa24 <_dtoa_r+0xb34>
 8009fbe:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8009fc2:	aa16      	add	r2, sp, #88	@ 0x58
 8009fc4:	a917      	add	r1, sp, #92	@ 0x5c
 8009fc6:	4658      	mov	r0, fp
 8009fc8:	f001 f984 	bl	800b2d4 <__d2b>
 8009fcc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8009fd0:	4681      	mov	r9, r0
 8009fd2:	2e00      	cmp	r6, #0
 8009fd4:	d077      	beq.n	800a0c6 <_dtoa_r+0x1d6>
 8009fd6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009fd8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8009fdc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009fe0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009fe4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009fe8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8009fec:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009ff0:	4619      	mov	r1, r3
 8009ff2:	2200      	movs	r2, #0
 8009ff4:	4b74      	ldr	r3, [pc, #464]	@ (800a1c8 <_dtoa_r+0x2d8>)
 8009ff6:	f7f6 f947 	bl	8000288 <__aeabi_dsub>
 8009ffa:	a369      	add	r3, pc, #420	@ (adr r3, 800a1a0 <_dtoa_r+0x2b0>)
 8009ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a000:	f7f6 fafa 	bl	80005f8 <__aeabi_dmul>
 800a004:	a368      	add	r3, pc, #416	@ (adr r3, 800a1a8 <_dtoa_r+0x2b8>)
 800a006:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a00a:	f7f6 f93f 	bl	800028c <__adddf3>
 800a00e:	4604      	mov	r4, r0
 800a010:	4630      	mov	r0, r6
 800a012:	460d      	mov	r5, r1
 800a014:	f7f6 fa86 	bl	8000524 <__aeabi_i2d>
 800a018:	a365      	add	r3, pc, #404	@ (adr r3, 800a1b0 <_dtoa_r+0x2c0>)
 800a01a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a01e:	f7f6 faeb 	bl	80005f8 <__aeabi_dmul>
 800a022:	4602      	mov	r2, r0
 800a024:	460b      	mov	r3, r1
 800a026:	4620      	mov	r0, r4
 800a028:	4629      	mov	r1, r5
 800a02a:	f7f6 f92f 	bl	800028c <__adddf3>
 800a02e:	4604      	mov	r4, r0
 800a030:	460d      	mov	r5, r1
 800a032:	f7f6 fd91 	bl	8000b58 <__aeabi_d2iz>
 800a036:	2200      	movs	r2, #0
 800a038:	4607      	mov	r7, r0
 800a03a:	2300      	movs	r3, #0
 800a03c:	4620      	mov	r0, r4
 800a03e:	4629      	mov	r1, r5
 800a040:	f7f6 fd4c 	bl	8000adc <__aeabi_dcmplt>
 800a044:	b140      	cbz	r0, 800a058 <_dtoa_r+0x168>
 800a046:	4638      	mov	r0, r7
 800a048:	f7f6 fa6c 	bl	8000524 <__aeabi_i2d>
 800a04c:	4622      	mov	r2, r4
 800a04e:	462b      	mov	r3, r5
 800a050:	f7f6 fd3a 	bl	8000ac8 <__aeabi_dcmpeq>
 800a054:	b900      	cbnz	r0, 800a058 <_dtoa_r+0x168>
 800a056:	3f01      	subs	r7, #1
 800a058:	2f16      	cmp	r7, #22
 800a05a:	d851      	bhi.n	800a100 <_dtoa_r+0x210>
 800a05c:	4b5b      	ldr	r3, [pc, #364]	@ (800a1cc <_dtoa_r+0x2dc>)
 800a05e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a062:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a066:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a06a:	f7f6 fd37 	bl	8000adc <__aeabi_dcmplt>
 800a06e:	2800      	cmp	r0, #0
 800a070:	d048      	beq.n	800a104 <_dtoa_r+0x214>
 800a072:	3f01      	subs	r7, #1
 800a074:	2300      	movs	r3, #0
 800a076:	9312      	str	r3, [sp, #72]	@ 0x48
 800a078:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800a07a:	1b9b      	subs	r3, r3, r6
 800a07c:	1e5a      	subs	r2, r3, #1
 800a07e:	bf44      	itt	mi
 800a080:	f1c3 0801 	rsbmi	r8, r3, #1
 800a084:	2300      	movmi	r3, #0
 800a086:	9208      	str	r2, [sp, #32]
 800a088:	bf54      	ite	pl
 800a08a:	f04f 0800 	movpl.w	r8, #0
 800a08e:	9308      	strmi	r3, [sp, #32]
 800a090:	2f00      	cmp	r7, #0
 800a092:	db39      	blt.n	800a108 <_dtoa_r+0x218>
 800a094:	9b08      	ldr	r3, [sp, #32]
 800a096:	970f      	str	r7, [sp, #60]	@ 0x3c
 800a098:	443b      	add	r3, r7
 800a09a:	9308      	str	r3, [sp, #32]
 800a09c:	2300      	movs	r3, #0
 800a09e:	930a      	str	r3, [sp, #40]	@ 0x28
 800a0a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a0a2:	2b09      	cmp	r3, #9
 800a0a4:	d864      	bhi.n	800a170 <_dtoa_r+0x280>
 800a0a6:	2b05      	cmp	r3, #5
 800a0a8:	bfc4      	itt	gt
 800a0aa:	3b04      	subgt	r3, #4
 800a0ac:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800a0ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a0b0:	f1a3 0302 	sub.w	r3, r3, #2
 800a0b4:	bfcc      	ite	gt
 800a0b6:	2400      	movgt	r4, #0
 800a0b8:	2401      	movle	r4, #1
 800a0ba:	2b03      	cmp	r3, #3
 800a0bc:	d863      	bhi.n	800a186 <_dtoa_r+0x296>
 800a0be:	e8df f003 	tbb	[pc, r3]
 800a0c2:	372a      	.short	0x372a
 800a0c4:	5535      	.short	0x5535
 800a0c6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800a0ca:	441e      	add	r6, r3
 800a0cc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800a0d0:	2b20      	cmp	r3, #32
 800a0d2:	bfc1      	itttt	gt
 800a0d4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800a0d8:	409f      	lslgt	r7, r3
 800a0da:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800a0de:	fa24 f303 	lsrgt.w	r3, r4, r3
 800a0e2:	bfd6      	itet	le
 800a0e4:	f1c3 0320 	rsble	r3, r3, #32
 800a0e8:	ea47 0003 	orrgt.w	r0, r7, r3
 800a0ec:	fa04 f003 	lslle.w	r0, r4, r3
 800a0f0:	f7f6 fa08 	bl	8000504 <__aeabi_ui2d>
 800a0f4:	2201      	movs	r2, #1
 800a0f6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800a0fa:	3e01      	subs	r6, #1
 800a0fc:	9214      	str	r2, [sp, #80]	@ 0x50
 800a0fe:	e777      	b.n	8009ff0 <_dtoa_r+0x100>
 800a100:	2301      	movs	r3, #1
 800a102:	e7b8      	b.n	800a076 <_dtoa_r+0x186>
 800a104:	9012      	str	r0, [sp, #72]	@ 0x48
 800a106:	e7b7      	b.n	800a078 <_dtoa_r+0x188>
 800a108:	427b      	negs	r3, r7
 800a10a:	930a      	str	r3, [sp, #40]	@ 0x28
 800a10c:	2300      	movs	r3, #0
 800a10e:	eba8 0807 	sub.w	r8, r8, r7
 800a112:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a114:	e7c4      	b.n	800a0a0 <_dtoa_r+0x1b0>
 800a116:	2300      	movs	r3, #0
 800a118:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a11a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	dc35      	bgt.n	800a18c <_dtoa_r+0x29c>
 800a120:	2301      	movs	r3, #1
 800a122:	9300      	str	r3, [sp, #0]
 800a124:	9307      	str	r3, [sp, #28]
 800a126:	461a      	mov	r2, r3
 800a128:	920e      	str	r2, [sp, #56]	@ 0x38
 800a12a:	e00b      	b.n	800a144 <_dtoa_r+0x254>
 800a12c:	2301      	movs	r3, #1
 800a12e:	e7f3      	b.n	800a118 <_dtoa_r+0x228>
 800a130:	2300      	movs	r3, #0
 800a132:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a134:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a136:	18fb      	adds	r3, r7, r3
 800a138:	9300      	str	r3, [sp, #0]
 800a13a:	3301      	adds	r3, #1
 800a13c:	2b01      	cmp	r3, #1
 800a13e:	9307      	str	r3, [sp, #28]
 800a140:	bfb8      	it	lt
 800a142:	2301      	movlt	r3, #1
 800a144:	f8db 001c 	ldr.w	r0, [fp, #28]
 800a148:	2100      	movs	r1, #0
 800a14a:	2204      	movs	r2, #4
 800a14c:	f102 0514 	add.w	r5, r2, #20
 800a150:	429d      	cmp	r5, r3
 800a152:	d91f      	bls.n	800a194 <_dtoa_r+0x2a4>
 800a154:	6041      	str	r1, [r0, #4]
 800a156:	4658      	mov	r0, fp
 800a158:	f000 fcd8 	bl	800ab0c <_Balloc>
 800a15c:	4682      	mov	sl, r0
 800a15e:	2800      	cmp	r0, #0
 800a160:	d13c      	bne.n	800a1dc <_dtoa_r+0x2ec>
 800a162:	4b1b      	ldr	r3, [pc, #108]	@ (800a1d0 <_dtoa_r+0x2e0>)
 800a164:	4602      	mov	r2, r0
 800a166:	f240 11af 	movw	r1, #431	@ 0x1af
 800a16a:	e6d8      	b.n	8009f1e <_dtoa_r+0x2e>
 800a16c:	2301      	movs	r3, #1
 800a16e:	e7e0      	b.n	800a132 <_dtoa_r+0x242>
 800a170:	2401      	movs	r4, #1
 800a172:	2300      	movs	r3, #0
 800a174:	9309      	str	r3, [sp, #36]	@ 0x24
 800a176:	940b      	str	r4, [sp, #44]	@ 0x2c
 800a178:	f04f 33ff 	mov.w	r3, #4294967295
 800a17c:	9300      	str	r3, [sp, #0]
 800a17e:	9307      	str	r3, [sp, #28]
 800a180:	2200      	movs	r2, #0
 800a182:	2312      	movs	r3, #18
 800a184:	e7d0      	b.n	800a128 <_dtoa_r+0x238>
 800a186:	2301      	movs	r3, #1
 800a188:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a18a:	e7f5      	b.n	800a178 <_dtoa_r+0x288>
 800a18c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a18e:	9300      	str	r3, [sp, #0]
 800a190:	9307      	str	r3, [sp, #28]
 800a192:	e7d7      	b.n	800a144 <_dtoa_r+0x254>
 800a194:	3101      	adds	r1, #1
 800a196:	0052      	lsls	r2, r2, #1
 800a198:	e7d8      	b.n	800a14c <_dtoa_r+0x25c>
 800a19a:	bf00      	nop
 800a19c:	f3af 8000 	nop.w
 800a1a0:	636f4361 	.word	0x636f4361
 800a1a4:	3fd287a7 	.word	0x3fd287a7
 800a1a8:	8b60c8b3 	.word	0x8b60c8b3
 800a1ac:	3fc68a28 	.word	0x3fc68a28
 800a1b0:	509f79fb 	.word	0x509f79fb
 800a1b4:	3fd34413 	.word	0x3fd34413
 800a1b8:	0800de34 	.word	0x0800de34
 800a1bc:	0800de4b 	.word	0x0800de4b
 800a1c0:	7ff00000 	.word	0x7ff00000
 800a1c4:	0800e191 	.word	0x0800e191
 800a1c8:	3ff80000 	.word	0x3ff80000
 800a1cc:	0800df48 	.word	0x0800df48
 800a1d0:	0800dea3 	.word	0x0800dea3
 800a1d4:	0800de30 	.word	0x0800de30
 800a1d8:	0800e190 	.word	0x0800e190
 800a1dc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a1e0:	6018      	str	r0, [r3, #0]
 800a1e2:	9b07      	ldr	r3, [sp, #28]
 800a1e4:	2b0e      	cmp	r3, #14
 800a1e6:	f200 80a4 	bhi.w	800a332 <_dtoa_r+0x442>
 800a1ea:	2c00      	cmp	r4, #0
 800a1ec:	f000 80a1 	beq.w	800a332 <_dtoa_r+0x442>
 800a1f0:	2f00      	cmp	r7, #0
 800a1f2:	dd33      	ble.n	800a25c <_dtoa_r+0x36c>
 800a1f4:	4bad      	ldr	r3, [pc, #692]	@ (800a4ac <_dtoa_r+0x5bc>)
 800a1f6:	f007 020f 	and.w	r2, r7, #15
 800a1fa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a1fe:	ed93 7b00 	vldr	d7, [r3]
 800a202:	05f8      	lsls	r0, r7, #23
 800a204:	ed8d 7b04 	vstr	d7, [sp, #16]
 800a208:	ea4f 1427 	mov.w	r4, r7, asr #4
 800a20c:	d516      	bpl.n	800a23c <_dtoa_r+0x34c>
 800a20e:	4ba8      	ldr	r3, [pc, #672]	@ (800a4b0 <_dtoa_r+0x5c0>)
 800a210:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a214:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a218:	f7f6 fb18 	bl	800084c <__aeabi_ddiv>
 800a21c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a220:	f004 040f 	and.w	r4, r4, #15
 800a224:	2603      	movs	r6, #3
 800a226:	4da2      	ldr	r5, [pc, #648]	@ (800a4b0 <_dtoa_r+0x5c0>)
 800a228:	b954      	cbnz	r4, 800a240 <_dtoa_r+0x350>
 800a22a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a22e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a232:	f7f6 fb0b 	bl	800084c <__aeabi_ddiv>
 800a236:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a23a:	e028      	b.n	800a28e <_dtoa_r+0x39e>
 800a23c:	2602      	movs	r6, #2
 800a23e:	e7f2      	b.n	800a226 <_dtoa_r+0x336>
 800a240:	07e1      	lsls	r1, r4, #31
 800a242:	d508      	bpl.n	800a256 <_dtoa_r+0x366>
 800a244:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a248:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a24c:	f7f6 f9d4 	bl	80005f8 <__aeabi_dmul>
 800a250:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a254:	3601      	adds	r6, #1
 800a256:	1064      	asrs	r4, r4, #1
 800a258:	3508      	adds	r5, #8
 800a25a:	e7e5      	b.n	800a228 <_dtoa_r+0x338>
 800a25c:	f000 80d2 	beq.w	800a404 <_dtoa_r+0x514>
 800a260:	427c      	negs	r4, r7
 800a262:	4b92      	ldr	r3, [pc, #584]	@ (800a4ac <_dtoa_r+0x5bc>)
 800a264:	4d92      	ldr	r5, [pc, #584]	@ (800a4b0 <_dtoa_r+0x5c0>)
 800a266:	f004 020f 	and.w	r2, r4, #15
 800a26a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a26e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a272:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a276:	f7f6 f9bf 	bl	80005f8 <__aeabi_dmul>
 800a27a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a27e:	1124      	asrs	r4, r4, #4
 800a280:	2300      	movs	r3, #0
 800a282:	2602      	movs	r6, #2
 800a284:	2c00      	cmp	r4, #0
 800a286:	f040 80b2 	bne.w	800a3ee <_dtoa_r+0x4fe>
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d1d3      	bne.n	800a236 <_dtoa_r+0x346>
 800a28e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a290:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800a294:	2b00      	cmp	r3, #0
 800a296:	f000 80b7 	beq.w	800a408 <_dtoa_r+0x518>
 800a29a:	4b86      	ldr	r3, [pc, #536]	@ (800a4b4 <_dtoa_r+0x5c4>)
 800a29c:	2200      	movs	r2, #0
 800a29e:	4620      	mov	r0, r4
 800a2a0:	4629      	mov	r1, r5
 800a2a2:	f7f6 fc1b 	bl	8000adc <__aeabi_dcmplt>
 800a2a6:	2800      	cmp	r0, #0
 800a2a8:	f000 80ae 	beq.w	800a408 <_dtoa_r+0x518>
 800a2ac:	9b07      	ldr	r3, [sp, #28]
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	f000 80aa 	beq.w	800a408 <_dtoa_r+0x518>
 800a2b4:	9b00      	ldr	r3, [sp, #0]
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	dd37      	ble.n	800a32a <_dtoa_r+0x43a>
 800a2ba:	1e7b      	subs	r3, r7, #1
 800a2bc:	9304      	str	r3, [sp, #16]
 800a2be:	4620      	mov	r0, r4
 800a2c0:	4b7d      	ldr	r3, [pc, #500]	@ (800a4b8 <_dtoa_r+0x5c8>)
 800a2c2:	2200      	movs	r2, #0
 800a2c4:	4629      	mov	r1, r5
 800a2c6:	f7f6 f997 	bl	80005f8 <__aeabi_dmul>
 800a2ca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a2ce:	9c00      	ldr	r4, [sp, #0]
 800a2d0:	3601      	adds	r6, #1
 800a2d2:	4630      	mov	r0, r6
 800a2d4:	f7f6 f926 	bl	8000524 <__aeabi_i2d>
 800a2d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a2dc:	f7f6 f98c 	bl	80005f8 <__aeabi_dmul>
 800a2e0:	4b76      	ldr	r3, [pc, #472]	@ (800a4bc <_dtoa_r+0x5cc>)
 800a2e2:	2200      	movs	r2, #0
 800a2e4:	f7f5 ffd2 	bl	800028c <__adddf3>
 800a2e8:	4605      	mov	r5, r0
 800a2ea:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800a2ee:	2c00      	cmp	r4, #0
 800a2f0:	f040 808d 	bne.w	800a40e <_dtoa_r+0x51e>
 800a2f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a2f8:	4b71      	ldr	r3, [pc, #452]	@ (800a4c0 <_dtoa_r+0x5d0>)
 800a2fa:	2200      	movs	r2, #0
 800a2fc:	f7f5 ffc4 	bl	8000288 <__aeabi_dsub>
 800a300:	4602      	mov	r2, r0
 800a302:	460b      	mov	r3, r1
 800a304:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a308:	462a      	mov	r2, r5
 800a30a:	4633      	mov	r3, r6
 800a30c:	f7f6 fc04 	bl	8000b18 <__aeabi_dcmpgt>
 800a310:	2800      	cmp	r0, #0
 800a312:	f040 828b 	bne.w	800a82c <_dtoa_r+0x93c>
 800a316:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a31a:	462a      	mov	r2, r5
 800a31c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800a320:	f7f6 fbdc 	bl	8000adc <__aeabi_dcmplt>
 800a324:	2800      	cmp	r0, #0
 800a326:	f040 8128 	bne.w	800a57a <_dtoa_r+0x68a>
 800a32a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800a32e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800a332:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a334:	2b00      	cmp	r3, #0
 800a336:	f2c0 815a 	blt.w	800a5ee <_dtoa_r+0x6fe>
 800a33a:	2f0e      	cmp	r7, #14
 800a33c:	f300 8157 	bgt.w	800a5ee <_dtoa_r+0x6fe>
 800a340:	4b5a      	ldr	r3, [pc, #360]	@ (800a4ac <_dtoa_r+0x5bc>)
 800a342:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a346:	ed93 7b00 	vldr	d7, [r3]
 800a34a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	ed8d 7b00 	vstr	d7, [sp]
 800a352:	da03      	bge.n	800a35c <_dtoa_r+0x46c>
 800a354:	9b07      	ldr	r3, [sp, #28]
 800a356:	2b00      	cmp	r3, #0
 800a358:	f340 8101 	ble.w	800a55e <_dtoa_r+0x66e>
 800a35c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800a360:	4656      	mov	r6, sl
 800a362:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a366:	4620      	mov	r0, r4
 800a368:	4629      	mov	r1, r5
 800a36a:	f7f6 fa6f 	bl	800084c <__aeabi_ddiv>
 800a36e:	f7f6 fbf3 	bl	8000b58 <__aeabi_d2iz>
 800a372:	4680      	mov	r8, r0
 800a374:	f7f6 f8d6 	bl	8000524 <__aeabi_i2d>
 800a378:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a37c:	f7f6 f93c 	bl	80005f8 <__aeabi_dmul>
 800a380:	4602      	mov	r2, r0
 800a382:	460b      	mov	r3, r1
 800a384:	4620      	mov	r0, r4
 800a386:	4629      	mov	r1, r5
 800a388:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800a38c:	f7f5 ff7c 	bl	8000288 <__aeabi_dsub>
 800a390:	f806 4b01 	strb.w	r4, [r6], #1
 800a394:	9d07      	ldr	r5, [sp, #28]
 800a396:	eba6 040a 	sub.w	r4, r6, sl
 800a39a:	42a5      	cmp	r5, r4
 800a39c:	4602      	mov	r2, r0
 800a39e:	460b      	mov	r3, r1
 800a3a0:	f040 8117 	bne.w	800a5d2 <_dtoa_r+0x6e2>
 800a3a4:	f7f5 ff72 	bl	800028c <__adddf3>
 800a3a8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a3ac:	4604      	mov	r4, r0
 800a3ae:	460d      	mov	r5, r1
 800a3b0:	f7f6 fbb2 	bl	8000b18 <__aeabi_dcmpgt>
 800a3b4:	2800      	cmp	r0, #0
 800a3b6:	f040 80f9 	bne.w	800a5ac <_dtoa_r+0x6bc>
 800a3ba:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a3be:	4620      	mov	r0, r4
 800a3c0:	4629      	mov	r1, r5
 800a3c2:	f7f6 fb81 	bl	8000ac8 <__aeabi_dcmpeq>
 800a3c6:	b118      	cbz	r0, 800a3d0 <_dtoa_r+0x4e0>
 800a3c8:	f018 0f01 	tst.w	r8, #1
 800a3cc:	f040 80ee 	bne.w	800a5ac <_dtoa_r+0x6bc>
 800a3d0:	4649      	mov	r1, r9
 800a3d2:	4658      	mov	r0, fp
 800a3d4:	f000 fbda 	bl	800ab8c <_Bfree>
 800a3d8:	2300      	movs	r3, #0
 800a3da:	7033      	strb	r3, [r6, #0]
 800a3dc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a3de:	3701      	adds	r7, #1
 800a3e0:	601f      	str	r7, [r3, #0]
 800a3e2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	f000 831d 	beq.w	800aa24 <_dtoa_r+0xb34>
 800a3ea:	601e      	str	r6, [r3, #0]
 800a3ec:	e31a      	b.n	800aa24 <_dtoa_r+0xb34>
 800a3ee:	07e2      	lsls	r2, r4, #31
 800a3f0:	d505      	bpl.n	800a3fe <_dtoa_r+0x50e>
 800a3f2:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a3f6:	f7f6 f8ff 	bl	80005f8 <__aeabi_dmul>
 800a3fa:	3601      	adds	r6, #1
 800a3fc:	2301      	movs	r3, #1
 800a3fe:	1064      	asrs	r4, r4, #1
 800a400:	3508      	adds	r5, #8
 800a402:	e73f      	b.n	800a284 <_dtoa_r+0x394>
 800a404:	2602      	movs	r6, #2
 800a406:	e742      	b.n	800a28e <_dtoa_r+0x39e>
 800a408:	9c07      	ldr	r4, [sp, #28]
 800a40a:	9704      	str	r7, [sp, #16]
 800a40c:	e761      	b.n	800a2d2 <_dtoa_r+0x3e2>
 800a40e:	4b27      	ldr	r3, [pc, #156]	@ (800a4ac <_dtoa_r+0x5bc>)
 800a410:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a412:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a416:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a41a:	4454      	add	r4, sl
 800a41c:	2900      	cmp	r1, #0
 800a41e:	d053      	beq.n	800a4c8 <_dtoa_r+0x5d8>
 800a420:	4928      	ldr	r1, [pc, #160]	@ (800a4c4 <_dtoa_r+0x5d4>)
 800a422:	2000      	movs	r0, #0
 800a424:	f7f6 fa12 	bl	800084c <__aeabi_ddiv>
 800a428:	4633      	mov	r3, r6
 800a42a:	462a      	mov	r2, r5
 800a42c:	f7f5 ff2c 	bl	8000288 <__aeabi_dsub>
 800a430:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a434:	4656      	mov	r6, sl
 800a436:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a43a:	f7f6 fb8d 	bl	8000b58 <__aeabi_d2iz>
 800a43e:	4605      	mov	r5, r0
 800a440:	f7f6 f870 	bl	8000524 <__aeabi_i2d>
 800a444:	4602      	mov	r2, r0
 800a446:	460b      	mov	r3, r1
 800a448:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a44c:	f7f5 ff1c 	bl	8000288 <__aeabi_dsub>
 800a450:	3530      	adds	r5, #48	@ 0x30
 800a452:	4602      	mov	r2, r0
 800a454:	460b      	mov	r3, r1
 800a456:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a45a:	f806 5b01 	strb.w	r5, [r6], #1
 800a45e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a462:	f7f6 fb3b 	bl	8000adc <__aeabi_dcmplt>
 800a466:	2800      	cmp	r0, #0
 800a468:	d171      	bne.n	800a54e <_dtoa_r+0x65e>
 800a46a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a46e:	4911      	ldr	r1, [pc, #68]	@ (800a4b4 <_dtoa_r+0x5c4>)
 800a470:	2000      	movs	r0, #0
 800a472:	f7f5 ff09 	bl	8000288 <__aeabi_dsub>
 800a476:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a47a:	f7f6 fb2f 	bl	8000adc <__aeabi_dcmplt>
 800a47e:	2800      	cmp	r0, #0
 800a480:	f040 8095 	bne.w	800a5ae <_dtoa_r+0x6be>
 800a484:	42a6      	cmp	r6, r4
 800a486:	f43f af50 	beq.w	800a32a <_dtoa_r+0x43a>
 800a48a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a48e:	4b0a      	ldr	r3, [pc, #40]	@ (800a4b8 <_dtoa_r+0x5c8>)
 800a490:	2200      	movs	r2, #0
 800a492:	f7f6 f8b1 	bl	80005f8 <__aeabi_dmul>
 800a496:	4b08      	ldr	r3, [pc, #32]	@ (800a4b8 <_dtoa_r+0x5c8>)
 800a498:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a49c:	2200      	movs	r2, #0
 800a49e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a4a2:	f7f6 f8a9 	bl	80005f8 <__aeabi_dmul>
 800a4a6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a4aa:	e7c4      	b.n	800a436 <_dtoa_r+0x546>
 800a4ac:	0800df48 	.word	0x0800df48
 800a4b0:	0800df20 	.word	0x0800df20
 800a4b4:	3ff00000 	.word	0x3ff00000
 800a4b8:	40240000 	.word	0x40240000
 800a4bc:	401c0000 	.word	0x401c0000
 800a4c0:	40140000 	.word	0x40140000
 800a4c4:	3fe00000 	.word	0x3fe00000
 800a4c8:	4631      	mov	r1, r6
 800a4ca:	4628      	mov	r0, r5
 800a4cc:	f7f6 f894 	bl	80005f8 <__aeabi_dmul>
 800a4d0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a4d4:	9415      	str	r4, [sp, #84]	@ 0x54
 800a4d6:	4656      	mov	r6, sl
 800a4d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a4dc:	f7f6 fb3c 	bl	8000b58 <__aeabi_d2iz>
 800a4e0:	4605      	mov	r5, r0
 800a4e2:	f7f6 f81f 	bl	8000524 <__aeabi_i2d>
 800a4e6:	4602      	mov	r2, r0
 800a4e8:	460b      	mov	r3, r1
 800a4ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a4ee:	f7f5 fecb 	bl	8000288 <__aeabi_dsub>
 800a4f2:	3530      	adds	r5, #48	@ 0x30
 800a4f4:	f806 5b01 	strb.w	r5, [r6], #1
 800a4f8:	4602      	mov	r2, r0
 800a4fa:	460b      	mov	r3, r1
 800a4fc:	42a6      	cmp	r6, r4
 800a4fe:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a502:	f04f 0200 	mov.w	r2, #0
 800a506:	d124      	bne.n	800a552 <_dtoa_r+0x662>
 800a508:	4bac      	ldr	r3, [pc, #688]	@ (800a7bc <_dtoa_r+0x8cc>)
 800a50a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a50e:	f7f5 febd 	bl	800028c <__adddf3>
 800a512:	4602      	mov	r2, r0
 800a514:	460b      	mov	r3, r1
 800a516:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a51a:	f7f6 fafd 	bl	8000b18 <__aeabi_dcmpgt>
 800a51e:	2800      	cmp	r0, #0
 800a520:	d145      	bne.n	800a5ae <_dtoa_r+0x6be>
 800a522:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a526:	49a5      	ldr	r1, [pc, #660]	@ (800a7bc <_dtoa_r+0x8cc>)
 800a528:	2000      	movs	r0, #0
 800a52a:	f7f5 fead 	bl	8000288 <__aeabi_dsub>
 800a52e:	4602      	mov	r2, r0
 800a530:	460b      	mov	r3, r1
 800a532:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a536:	f7f6 fad1 	bl	8000adc <__aeabi_dcmplt>
 800a53a:	2800      	cmp	r0, #0
 800a53c:	f43f aef5 	beq.w	800a32a <_dtoa_r+0x43a>
 800a540:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800a542:	1e73      	subs	r3, r6, #1
 800a544:	9315      	str	r3, [sp, #84]	@ 0x54
 800a546:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a54a:	2b30      	cmp	r3, #48	@ 0x30
 800a54c:	d0f8      	beq.n	800a540 <_dtoa_r+0x650>
 800a54e:	9f04      	ldr	r7, [sp, #16]
 800a550:	e73e      	b.n	800a3d0 <_dtoa_r+0x4e0>
 800a552:	4b9b      	ldr	r3, [pc, #620]	@ (800a7c0 <_dtoa_r+0x8d0>)
 800a554:	f7f6 f850 	bl	80005f8 <__aeabi_dmul>
 800a558:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a55c:	e7bc      	b.n	800a4d8 <_dtoa_r+0x5e8>
 800a55e:	d10c      	bne.n	800a57a <_dtoa_r+0x68a>
 800a560:	4b98      	ldr	r3, [pc, #608]	@ (800a7c4 <_dtoa_r+0x8d4>)
 800a562:	2200      	movs	r2, #0
 800a564:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a568:	f7f6 f846 	bl	80005f8 <__aeabi_dmul>
 800a56c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a570:	f7f6 fac8 	bl	8000b04 <__aeabi_dcmpge>
 800a574:	2800      	cmp	r0, #0
 800a576:	f000 8157 	beq.w	800a828 <_dtoa_r+0x938>
 800a57a:	2400      	movs	r4, #0
 800a57c:	4625      	mov	r5, r4
 800a57e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a580:	43db      	mvns	r3, r3
 800a582:	9304      	str	r3, [sp, #16]
 800a584:	4656      	mov	r6, sl
 800a586:	2700      	movs	r7, #0
 800a588:	4621      	mov	r1, r4
 800a58a:	4658      	mov	r0, fp
 800a58c:	f000 fafe 	bl	800ab8c <_Bfree>
 800a590:	2d00      	cmp	r5, #0
 800a592:	d0dc      	beq.n	800a54e <_dtoa_r+0x65e>
 800a594:	b12f      	cbz	r7, 800a5a2 <_dtoa_r+0x6b2>
 800a596:	42af      	cmp	r7, r5
 800a598:	d003      	beq.n	800a5a2 <_dtoa_r+0x6b2>
 800a59a:	4639      	mov	r1, r7
 800a59c:	4658      	mov	r0, fp
 800a59e:	f000 faf5 	bl	800ab8c <_Bfree>
 800a5a2:	4629      	mov	r1, r5
 800a5a4:	4658      	mov	r0, fp
 800a5a6:	f000 faf1 	bl	800ab8c <_Bfree>
 800a5aa:	e7d0      	b.n	800a54e <_dtoa_r+0x65e>
 800a5ac:	9704      	str	r7, [sp, #16]
 800a5ae:	4633      	mov	r3, r6
 800a5b0:	461e      	mov	r6, r3
 800a5b2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a5b6:	2a39      	cmp	r2, #57	@ 0x39
 800a5b8:	d107      	bne.n	800a5ca <_dtoa_r+0x6da>
 800a5ba:	459a      	cmp	sl, r3
 800a5bc:	d1f8      	bne.n	800a5b0 <_dtoa_r+0x6c0>
 800a5be:	9a04      	ldr	r2, [sp, #16]
 800a5c0:	3201      	adds	r2, #1
 800a5c2:	9204      	str	r2, [sp, #16]
 800a5c4:	2230      	movs	r2, #48	@ 0x30
 800a5c6:	f88a 2000 	strb.w	r2, [sl]
 800a5ca:	781a      	ldrb	r2, [r3, #0]
 800a5cc:	3201      	adds	r2, #1
 800a5ce:	701a      	strb	r2, [r3, #0]
 800a5d0:	e7bd      	b.n	800a54e <_dtoa_r+0x65e>
 800a5d2:	4b7b      	ldr	r3, [pc, #492]	@ (800a7c0 <_dtoa_r+0x8d0>)
 800a5d4:	2200      	movs	r2, #0
 800a5d6:	f7f6 f80f 	bl	80005f8 <__aeabi_dmul>
 800a5da:	2200      	movs	r2, #0
 800a5dc:	2300      	movs	r3, #0
 800a5de:	4604      	mov	r4, r0
 800a5e0:	460d      	mov	r5, r1
 800a5e2:	f7f6 fa71 	bl	8000ac8 <__aeabi_dcmpeq>
 800a5e6:	2800      	cmp	r0, #0
 800a5e8:	f43f aebb 	beq.w	800a362 <_dtoa_r+0x472>
 800a5ec:	e6f0      	b.n	800a3d0 <_dtoa_r+0x4e0>
 800a5ee:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a5f0:	2a00      	cmp	r2, #0
 800a5f2:	f000 80db 	beq.w	800a7ac <_dtoa_r+0x8bc>
 800a5f6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a5f8:	2a01      	cmp	r2, #1
 800a5fa:	f300 80bf 	bgt.w	800a77c <_dtoa_r+0x88c>
 800a5fe:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800a600:	2a00      	cmp	r2, #0
 800a602:	f000 80b7 	beq.w	800a774 <_dtoa_r+0x884>
 800a606:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800a60a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a60c:	4646      	mov	r6, r8
 800a60e:	9a08      	ldr	r2, [sp, #32]
 800a610:	2101      	movs	r1, #1
 800a612:	441a      	add	r2, r3
 800a614:	4658      	mov	r0, fp
 800a616:	4498      	add	r8, r3
 800a618:	9208      	str	r2, [sp, #32]
 800a61a:	f000 fbb5 	bl	800ad88 <__i2b>
 800a61e:	4605      	mov	r5, r0
 800a620:	b15e      	cbz	r6, 800a63a <_dtoa_r+0x74a>
 800a622:	9b08      	ldr	r3, [sp, #32]
 800a624:	2b00      	cmp	r3, #0
 800a626:	dd08      	ble.n	800a63a <_dtoa_r+0x74a>
 800a628:	42b3      	cmp	r3, r6
 800a62a:	9a08      	ldr	r2, [sp, #32]
 800a62c:	bfa8      	it	ge
 800a62e:	4633      	movge	r3, r6
 800a630:	eba8 0803 	sub.w	r8, r8, r3
 800a634:	1af6      	subs	r6, r6, r3
 800a636:	1ad3      	subs	r3, r2, r3
 800a638:	9308      	str	r3, [sp, #32]
 800a63a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a63c:	b1f3      	cbz	r3, 800a67c <_dtoa_r+0x78c>
 800a63e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a640:	2b00      	cmp	r3, #0
 800a642:	f000 80b7 	beq.w	800a7b4 <_dtoa_r+0x8c4>
 800a646:	b18c      	cbz	r4, 800a66c <_dtoa_r+0x77c>
 800a648:	4629      	mov	r1, r5
 800a64a:	4622      	mov	r2, r4
 800a64c:	4658      	mov	r0, fp
 800a64e:	f000 fc5b 	bl	800af08 <__pow5mult>
 800a652:	464a      	mov	r2, r9
 800a654:	4601      	mov	r1, r0
 800a656:	4605      	mov	r5, r0
 800a658:	4658      	mov	r0, fp
 800a65a:	f000 fbab 	bl	800adb4 <__multiply>
 800a65e:	4649      	mov	r1, r9
 800a660:	9004      	str	r0, [sp, #16]
 800a662:	4658      	mov	r0, fp
 800a664:	f000 fa92 	bl	800ab8c <_Bfree>
 800a668:	9b04      	ldr	r3, [sp, #16]
 800a66a:	4699      	mov	r9, r3
 800a66c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a66e:	1b1a      	subs	r2, r3, r4
 800a670:	d004      	beq.n	800a67c <_dtoa_r+0x78c>
 800a672:	4649      	mov	r1, r9
 800a674:	4658      	mov	r0, fp
 800a676:	f000 fc47 	bl	800af08 <__pow5mult>
 800a67a:	4681      	mov	r9, r0
 800a67c:	2101      	movs	r1, #1
 800a67e:	4658      	mov	r0, fp
 800a680:	f000 fb82 	bl	800ad88 <__i2b>
 800a684:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a686:	4604      	mov	r4, r0
 800a688:	2b00      	cmp	r3, #0
 800a68a:	f000 81cf 	beq.w	800aa2c <_dtoa_r+0xb3c>
 800a68e:	461a      	mov	r2, r3
 800a690:	4601      	mov	r1, r0
 800a692:	4658      	mov	r0, fp
 800a694:	f000 fc38 	bl	800af08 <__pow5mult>
 800a698:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a69a:	2b01      	cmp	r3, #1
 800a69c:	4604      	mov	r4, r0
 800a69e:	f300 8095 	bgt.w	800a7cc <_dtoa_r+0x8dc>
 800a6a2:	9b02      	ldr	r3, [sp, #8]
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	f040 8087 	bne.w	800a7b8 <_dtoa_r+0x8c8>
 800a6aa:	9b03      	ldr	r3, [sp, #12]
 800a6ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	f040 8089 	bne.w	800a7c8 <_dtoa_r+0x8d8>
 800a6b6:	9b03      	ldr	r3, [sp, #12]
 800a6b8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a6bc:	0d1b      	lsrs	r3, r3, #20
 800a6be:	051b      	lsls	r3, r3, #20
 800a6c0:	b12b      	cbz	r3, 800a6ce <_dtoa_r+0x7de>
 800a6c2:	9b08      	ldr	r3, [sp, #32]
 800a6c4:	3301      	adds	r3, #1
 800a6c6:	9308      	str	r3, [sp, #32]
 800a6c8:	f108 0801 	add.w	r8, r8, #1
 800a6cc:	2301      	movs	r3, #1
 800a6ce:	930a      	str	r3, [sp, #40]	@ 0x28
 800a6d0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	f000 81b0 	beq.w	800aa38 <_dtoa_r+0xb48>
 800a6d8:	6923      	ldr	r3, [r4, #16]
 800a6da:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a6de:	6918      	ldr	r0, [r3, #16]
 800a6e0:	f000 fb06 	bl	800acf0 <__hi0bits>
 800a6e4:	f1c0 0020 	rsb	r0, r0, #32
 800a6e8:	9b08      	ldr	r3, [sp, #32]
 800a6ea:	4418      	add	r0, r3
 800a6ec:	f010 001f 	ands.w	r0, r0, #31
 800a6f0:	d077      	beq.n	800a7e2 <_dtoa_r+0x8f2>
 800a6f2:	f1c0 0320 	rsb	r3, r0, #32
 800a6f6:	2b04      	cmp	r3, #4
 800a6f8:	dd6b      	ble.n	800a7d2 <_dtoa_r+0x8e2>
 800a6fa:	9b08      	ldr	r3, [sp, #32]
 800a6fc:	f1c0 001c 	rsb	r0, r0, #28
 800a700:	4403      	add	r3, r0
 800a702:	4480      	add	r8, r0
 800a704:	4406      	add	r6, r0
 800a706:	9308      	str	r3, [sp, #32]
 800a708:	f1b8 0f00 	cmp.w	r8, #0
 800a70c:	dd05      	ble.n	800a71a <_dtoa_r+0x82a>
 800a70e:	4649      	mov	r1, r9
 800a710:	4642      	mov	r2, r8
 800a712:	4658      	mov	r0, fp
 800a714:	f000 fc52 	bl	800afbc <__lshift>
 800a718:	4681      	mov	r9, r0
 800a71a:	9b08      	ldr	r3, [sp, #32]
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	dd05      	ble.n	800a72c <_dtoa_r+0x83c>
 800a720:	4621      	mov	r1, r4
 800a722:	461a      	mov	r2, r3
 800a724:	4658      	mov	r0, fp
 800a726:	f000 fc49 	bl	800afbc <__lshift>
 800a72a:	4604      	mov	r4, r0
 800a72c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d059      	beq.n	800a7e6 <_dtoa_r+0x8f6>
 800a732:	4621      	mov	r1, r4
 800a734:	4648      	mov	r0, r9
 800a736:	f000 fcad 	bl	800b094 <__mcmp>
 800a73a:	2800      	cmp	r0, #0
 800a73c:	da53      	bge.n	800a7e6 <_dtoa_r+0x8f6>
 800a73e:	1e7b      	subs	r3, r7, #1
 800a740:	9304      	str	r3, [sp, #16]
 800a742:	4649      	mov	r1, r9
 800a744:	2300      	movs	r3, #0
 800a746:	220a      	movs	r2, #10
 800a748:	4658      	mov	r0, fp
 800a74a:	f000 fa41 	bl	800abd0 <__multadd>
 800a74e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a750:	4681      	mov	r9, r0
 800a752:	2b00      	cmp	r3, #0
 800a754:	f000 8172 	beq.w	800aa3c <_dtoa_r+0xb4c>
 800a758:	2300      	movs	r3, #0
 800a75a:	4629      	mov	r1, r5
 800a75c:	220a      	movs	r2, #10
 800a75e:	4658      	mov	r0, fp
 800a760:	f000 fa36 	bl	800abd0 <__multadd>
 800a764:	9b00      	ldr	r3, [sp, #0]
 800a766:	2b00      	cmp	r3, #0
 800a768:	4605      	mov	r5, r0
 800a76a:	dc67      	bgt.n	800a83c <_dtoa_r+0x94c>
 800a76c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a76e:	2b02      	cmp	r3, #2
 800a770:	dc41      	bgt.n	800a7f6 <_dtoa_r+0x906>
 800a772:	e063      	b.n	800a83c <_dtoa_r+0x94c>
 800a774:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800a776:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800a77a:	e746      	b.n	800a60a <_dtoa_r+0x71a>
 800a77c:	9b07      	ldr	r3, [sp, #28]
 800a77e:	1e5c      	subs	r4, r3, #1
 800a780:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a782:	42a3      	cmp	r3, r4
 800a784:	bfbf      	itttt	lt
 800a786:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800a788:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800a78a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800a78c:	1ae3      	sublt	r3, r4, r3
 800a78e:	bfb4      	ite	lt
 800a790:	18d2      	addlt	r2, r2, r3
 800a792:	1b1c      	subge	r4, r3, r4
 800a794:	9b07      	ldr	r3, [sp, #28]
 800a796:	bfbc      	itt	lt
 800a798:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800a79a:	2400      	movlt	r4, #0
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	bfb5      	itete	lt
 800a7a0:	eba8 0603 	sublt.w	r6, r8, r3
 800a7a4:	9b07      	ldrge	r3, [sp, #28]
 800a7a6:	2300      	movlt	r3, #0
 800a7a8:	4646      	movge	r6, r8
 800a7aa:	e730      	b.n	800a60e <_dtoa_r+0x71e>
 800a7ac:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a7ae:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800a7b0:	4646      	mov	r6, r8
 800a7b2:	e735      	b.n	800a620 <_dtoa_r+0x730>
 800a7b4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a7b6:	e75c      	b.n	800a672 <_dtoa_r+0x782>
 800a7b8:	2300      	movs	r3, #0
 800a7ba:	e788      	b.n	800a6ce <_dtoa_r+0x7de>
 800a7bc:	3fe00000 	.word	0x3fe00000
 800a7c0:	40240000 	.word	0x40240000
 800a7c4:	40140000 	.word	0x40140000
 800a7c8:	9b02      	ldr	r3, [sp, #8]
 800a7ca:	e780      	b.n	800a6ce <_dtoa_r+0x7de>
 800a7cc:	2300      	movs	r3, #0
 800a7ce:	930a      	str	r3, [sp, #40]	@ 0x28
 800a7d0:	e782      	b.n	800a6d8 <_dtoa_r+0x7e8>
 800a7d2:	d099      	beq.n	800a708 <_dtoa_r+0x818>
 800a7d4:	9a08      	ldr	r2, [sp, #32]
 800a7d6:	331c      	adds	r3, #28
 800a7d8:	441a      	add	r2, r3
 800a7da:	4498      	add	r8, r3
 800a7dc:	441e      	add	r6, r3
 800a7de:	9208      	str	r2, [sp, #32]
 800a7e0:	e792      	b.n	800a708 <_dtoa_r+0x818>
 800a7e2:	4603      	mov	r3, r0
 800a7e4:	e7f6      	b.n	800a7d4 <_dtoa_r+0x8e4>
 800a7e6:	9b07      	ldr	r3, [sp, #28]
 800a7e8:	9704      	str	r7, [sp, #16]
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	dc20      	bgt.n	800a830 <_dtoa_r+0x940>
 800a7ee:	9300      	str	r3, [sp, #0]
 800a7f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a7f2:	2b02      	cmp	r3, #2
 800a7f4:	dd1e      	ble.n	800a834 <_dtoa_r+0x944>
 800a7f6:	9b00      	ldr	r3, [sp, #0]
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	f47f aec0 	bne.w	800a57e <_dtoa_r+0x68e>
 800a7fe:	4621      	mov	r1, r4
 800a800:	2205      	movs	r2, #5
 800a802:	4658      	mov	r0, fp
 800a804:	f000 f9e4 	bl	800abd0 <__multadd>
 800a808:	4601      	mov	r1, r0
 800a80a:	4604      	mov	r4, r0
 800a80c:	4648      	mov	r0, r9
 800a80e:	f000 fc41 	bl	800b094 <__mcmp>
 800a812:	2800      	cmp	r0, #0
 800a814:	f77f aeb3 	ble.w	800a57e <_dtoa_r+0x68e>
 800a818:	4656      	mov	r6, sl
 800a81a:	2331      	movs	r3, #49	@ 0x31
 800a81c:	f806 3b01 	strb.w	r3, [r6], #1
 800a820:	9b04      	ldr	r3, [sp, #16]
 800a822:	3301      	adds	r3, #1
 800a824:	9304      	str	r3, [sp, #16]
 800a826:	e6ae      	b.n	800a586 <_dtoa_r+0x696>
 800a828:	9c07      	ldr	r4, [sp, #28]
 800a82a:	9704      	str	r7, [sp, #16]
 800a82c:	4625      	mov	r5, r4
 800a82e:	e7f3      	b.n	800a818 <_dtoa_r+0x928>
 800a830:	9b07      	ldr	r3, [sp, #28]
 800a832:	9300      	str	r3, [sp, #0]
 800a834:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a836:	2b00      	cmp	r3, #0
 800a838:	f000 8104 	beq.w	800aa44 <_dtoa_r+0xb54>
 800a83c:	2e00      	cmp	r6, #0
 800a83e:	dd05      	ble.n	800a84c <_dtoa_r+0x95c>
 800a840:	4629      	mov	r1, r5
 800a842:	4632      	mov	r2, r6
 800a844:	4658      	mov	r0, fp
 800a846:	f000 fbb9 	bl	800afbc <__lshift>
 800a84a:	4605      	mov	r5, r0
 800a84c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d05a      	beq.n	800a908 <_dtoa_r+0xa18>
 800a852:	6869      	ldr	r1, [r5, #4]
 800a854:	4658      	mov	r0, fp
 800a856:	f000 f959 	bl	800ab0c <_Balloc>
 800a85a:	4606      	mov	r6, r0
 800a85c:	b928      	cbnz	r0, 800a86a <_dtoa_r+0x97a>
 800a85e:	4b84      	ldr	r3, [pc, #528]	@ (800aa70 <_dtoa_r+0xb80>)
 800a860:	4602      	mov	r2, r0
 800a862:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800a866:	f7ff bb5a 	b.w	8009f1e <_dtoa_r+0x2e>
 800a86a:	692a      	ldr	r2, [r5, #16]
 800a86c:	3202      	adds	r2, #2
 800a86e:	0092      	lsls	r2, r2, #2
 800a870:	f105 010c 	add.w	r1, r5, #12
 800a874:	300c      	adds	r0, #12
 800a876:	f002 fab1 	bl	800cddc <memcpy>
 800a87a:	2201      	movs	r2, #1
 800a87c:	4631      	mov	r1, r6
 800a87e:	4658      	mov	r0, fp
 800a880:	f000 fb9c 	bl	800afbc <__lshift>
 800a884:	f10a 0301 	add.w	r3, sl, #1
 800a888:	9307      	str	r3, [sp, #28]
 800a88a:	9b00      	ldr	r3, [sp, #0]
 800a88c:	4453      	add	r3, sl
 800a88e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a890:	9b02      	ldr	r3, [sp, #8]
 800a892:	f003 0301 	and.w	r3, r3, #1
 800a896:	462f      	mov	r7, r5
 800a898:	930a      	str	r3, [sp, #40]	@ 0x28
 800a89a:	4605      	mov	r5, r0
 800a89c:	9b07      	ldr	r3, [sp, #28]
 800a89e:	4621      	mov	r1, r4
 800a8a0:	3b01      	subs	r3, #1
 800a8a2:	4648      	mov	r0, r9
 800a8a4:	9300      	str	r3, [sp, #0]
 800a8a6:	f7ff fa9b 	bl	8009de0 <quorem>
 800a8aa:	4639      	mov	r1, r7
 800a8ac:	9002      	str	r0, [sp, #8]
 800a8ae:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a8b2:	4648      	mov	r0, r9
 800a8b4:	f000 fbee 	bl	800b094 <__mcmp>
 800a8b8:	462a      	mov	r2, r5
 800a8ba:	9008      	str	r0, [sp, #32]
 800a8bc:	4621      	mov	r1, r4
 800a8be:	4658      	mov	r0, fp
 800a8c0:	f000 fc04 	bl	800b0cc <__mdiff>
 800a8c4:	68c2      	ldr	r2, [r0, #12]
 800a8c6:	4606      	mov	r6, r0
 800a8c8:	bb02      	cbnz	r2, 800a90c <_dtoa_r+0xa1c>
 800a8ca:	4601      	mov	r1, r0
 800a8cc:	4648      	mov	r0, r9
 800a8ce:	f000 fbe1 	bl	800b094 <__mcmp>
 800a8d2:	4602      	mov	r2, r0
 800a8d4:	4631      	mov	r1, r6
 800a8d6:	4658      	mov	r0, fp
 800a8d8:	920e      	str	r2, [sp, #56]	@ 0x38
 800a8da:	f000 f957 	bl	800ab8c <_Bfree>
 800a8de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a8e0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a8e2:	9e07      	ldr	r6, [sp, #28]
 800a8e4:	ea43 0102 	orr.w	r1, r3, r2
 800a8e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a8ea:	4319      	orrs	r1, r3
 800a8ec:	d110      	bne.n	800a910 <_dtoa_r+0xa20>
 800a8ee:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a8f2:	d029      	beq.n	800a948 <_dtoa_r+0xa58>
 800a8f4:	9b08      	ldr	r3, [sp, #32]
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	dd02      	ble.n	800a900 <_dtoa_r+0xa10>
 800a8fa:	9b02      	ldr	r3, [sp, #8]
 800a8fc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800a900:	9b00      	ldr	r3, [sp, #0]
 800a902:	f883 8000 	strb.w	r8, [r3]
 800a906:	e63f      	b.n	800a588 <_dtoa_r+0x698>
 800a908:	4628      	mov	r0, r5
 800a90a:	e7bb      	b.n	800a884 <_dtoa_r+0x994>
 800a90c:	2201      	movs	r2, #1
 800a90e:	e7e1      	b.n	800a8d4 <_dtoa_r+0x9e4>
 800a910:	9b08      	ldr	r3, [sp, #32]
 800a912:	2b00      	cmp	r3, #0
 800a914:	db04      	blt.n	800a920 <_dtoa_r+0xa30>
 800a916:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a918:	430b      	orrs	r3, r1
 800a91a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a91c:	430b      	orrs	r3, r1
 800a91e:	d120      	bne.n	800a962 <_dtoa_r+0xa72>
 800a920:	2a00      	cmp	r2, #0
 800a922:	dded      	ble.n	800a900 <_dtoa_r+0xa10>
 800a924:	4649      	mov	r1, r9
 800a926:	2201      	movs	r2, #1
 800a928:	4658      	mov	r0, fp
 800a92a:	f000 fb47 	bl	800afbc <__lshift>
 800a92e:	4621      	mov	r1, r4
 800a930:	4681      	mov	r9, r0
 800a932:	f000 fbaf 	bl	800b094 <__mcmp>
 800a936:	2800      	cmp	r0, #0
 800a938:	dc03      	bgt.n	800a942 <_dtoa_r+0xa52>
 800a93a:	d1e1      	bne.n	800a900 <_dtoa_r+0xa10>
 800a93c:	f018 0f01 	tst.w	r8, #1
 800a940:	d0de      	beq.n	800a900 <_dtoa_r+0xa10>
 800a942:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a946:	d1d8      	bne.n	800a8fa <_dtoa_r+0xa0a>
 800a948:	9a00      	ldr	r2, [sp, #0]
 800a94a:	2339      	movs	r3, #57	@ 0x39
 800a94c:	7013      	strb	r3, [r2, #0]
 800a94e:	4633      	mov	r3, r6
 800a950:	461e      	mov	r6, r3
 800a952:	3b01      	subs	r3, #1
 800a954:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800a958:	2a39      	cmp	r2, #57	@ 0x39
 800a95a:	d052      	beq.n	800aa02 <_dtoa_r+0xb12>
 800a95c:	3201      	adds	r2, #1
 800a95e:	701a      	strb	r2, [r3, #0]
 800a960:	e612      	b.n	800a588 <_dtoa_r+0x698>
 800a962:	2a00      	cmp	r2, #0
 800a964:	dd07      	ble.n	800a976 <_dtoa_r+0xa86>
 800a966:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a96a:	d0ed      	beq.n	800a948 <_dtoa_r+0xa58>
 800a96c:	9a00      	ldr	r2, [sp, #0]
 800a96e:	f108 0301 	add.w	r3, r8, #1
 800a972:	7013      	strb	r3, [r2, #0]
 800a974:	e608      	b.n	800a588 <_dtoa_r+0x698>
 800a976:	9b07      	ldr	r3, [sp, #28]
 800a978:	9a07      	ldr	r2, [sp, #28]
 800a97a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800a97e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a980:	4293      	cmp	r3, r2
 800a982:	d028      	beq.n	800a9d6 <_dtoa_r+0xae6>
 800a984:	4649      	mov	r1, r9
 800a986:	2300      	movs	r3, #0
 800a988:	220a      	movs	r2, #10
 800a98a:	4658      	mov	r0, fp
 800a98c:	f000 f920 	bl	800abd0 <__multadd>
 800a990:	42af      	cmp	r7, r5
 800a992:	4681      	mov	r9, r0
 800a994:	f04f 0300 	mov.w	r3, #0
 800a998:	f04f 020a 	mov.w	r2, #10
 800a99c:	4639      	mov	r1, r7
 800a99e:	4658      	mov	r0, fp
 800a9a0:	d107      	bne.n	800a9b2 <_dtoa_r+0xac2>
 800a9a2:	f000 f915 	bl	800abd0 <__multadd>
 800a9a6:	4607      	mov	r7, r0
 800a9a8:	4605      	mov	r5, r0
 800a9aa:	9b07      	ldr	r3, [sp, #28]
 800a9ac:	3301      	adds	r3, #1
 800a9ae:	9307      	str	r3, [sp, #28]
 800a9b0:	e774      	b.n	800a89c <_dtoa_r+0x9ac>
 800a9b2:	f000 f90d 	bl	800abd0 <__multadd>
 800a9b6:	4629      	mov	r1, r5
 800a9b8:	4607      	mov	r7, r0
 800a9ba:	2300      	movs	r3, #0
 800a9bc:	220a      	movs	r2, #10
 800a9be:	4658      	mov	r0, fp
 800a9c0:	f000 f906 	bl	800abd0 <__multadd>
 800a9c4:	4605      	mov	r5, r0
 800a9c6:	e7f0      	b.n	800a9aa <_dtoa_r+0xaba>
 800a9c8:	9b00      	ldr	r3, [sp, #0]
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	bfcc      	ite	gt
 800a9ce:	461e      	movgt	r6, r3
 800a9d0:	2601      	movle	r6, #1
 800a9d2:	4456      	add	r6, sl
 800a9d4:	2700      	movs	r7, #0
 800a9d6:	4649      	mov	r1, r9
 800a9d8:	2201      	movs	r2, #1
 800a9da:	4658      	mov	r0, fp
 800a9dc:	f000 faee 	bl	800afbc <__lshift>
 800a9e0:	4621      	mov	r1, r4
 800a9e2:	4681      	mov	r9, r0
 800a9e4:	f000 fb56 	bl	800b094 <__mcmp>
 800a9e8:	2800      	cmp	r0, #0
 800a9ea:	dcb0      	bgt.n	800a94e <_dtoa_r+0xa5e>
 800a9ec:	d102      	bne.n	800a9f4 <_dtoa_r+0xb04>
 800a9ee:	f018 0f01 	tst.w	r8, #1
 800a9f2:	d1ac      	bne.n	800a94e <_dtoa_r+0xa5e>
 800a9f4:	4633      	mov	r3, r6
 800a9f6:	461e      	mov	r6, r3
 800a9f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a9fc:	2a30      	cmp	r2, #48	@ 0x30
 800a9fe:	d0fa      	beq.n	800a9f6 <_dtoa_r+0xb06>
 800aa00:	e5c2      	b.n	800a588 <_dtoa_r+0x698>
 800aa02:	459a      	cmp	sl, r3
 800aa04:	d1a4      	bne.n	800a950 <_dtoa_r+0xa60>
 800aa06:	9b04      	ldr	r3, [sp, #16]
 800aa08:	3301      	adds	r3, #1
 800aa0a:	9304      	str	r3, [sp, #16]
 800aa0c:	2331      	movs	r3, #49	@ 0x31
 800aa0e:	f88a 3000 	strb.w	r3, [sl]
 800aa12:	e5b9      	b.n	800a588 <_dtoa_r+0x698>
 800aa14:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800aa16:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800aa74 <_dtoa_r+0xb84>
 800aa1a:	b11b      	cbz	r3, 800aa24 <_dtoa_r+0xb34>
 800aa1c:	f10a 0308 	add.w	r3, sl, #8
 800aa20:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800aa22:	6013      	str	r3, [r2, #0]
 800aa24:	4650      	mov	r0, sl
 800aa26:	b019      	add	sp, #100	@ 0x64
 800aa28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa2c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa2e:	2b01      	cmp	r3, #1
 800aa30:	f77f ae37 	ble.w	800a6a2 <_dtoa_r+0x7b2>
 800aa34:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aa36:	930a      	str	r3, [sp, #40]	@ 0x28
 800aa38:	2001      	movs	r0, #1
 800aa3a:	e655      	b.n	800a6e8 <_dtoa_r+0x7f8>
 800aa3c:	9b00      	ldr	r3, [sp, #0]
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	f77f aed6 	ble.w	800a7f0 <_dtoa_r+0x900>
 800aa44:	4656      	mov	r6, sl
 800aa46:	4621      	mov	r1, r4
 800aa48:	4648      	mov	r0, r9
 800aa4a:	f7ff f9c9 	bl	8009de0 <quorem>
 800aa4e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800aa52:	f806 8b01 	strb.w	r8, [r6], #1
 800aa56:	9b00      	ldr	r3, [sp, #0]
 800aa58:	eba6 020a 	sub.w	r2, r6, sl
 800aa5c:	4293      	cmp	r3, r2
 800aa5e:	ddb3      	ble.n	800a9c8 <_dtoa_r+0xad8>
 800aa60:	4649      	mov	r1, r9
 800aa62:	2300      	movs	r3, #0
 800aa64:	220a      	movs	r2, #10
 800aa66:	4658      	mov	r0, fp
 800aa68:	f000 f8b2 	bl	800abd0 <__multadd>
 800aa6c:	4681      	mov	r9, r0
 800aa6e:	e7ea      	b.n	800aa46 <_dtoa_r+0xb56>
 800aa70:	0800dea3 	.word	0x0800dea3
 800aa74:	0800de27 	.word	0x0800de27

0800aa78 <_free_r>:
 800aa78:	b538      	push	{r3, r4, r5, lr}
 800aa7a:	4605      	mov	r5, r0
 800aa7c:	2900      	cmp	r1, #0
 800aa7e:	d041      	beq.n	800ab04 <_free_r+0x8c>
 800aa80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aa84:	1f0c      	subs	r4, r1, #4
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	bfb8      	it	lt
 800aa8a:	18e4      	addlt	r4, r4, r3
 800aa8c:	f7fe f826 	bl	8008adc <__malloc_lock>
 800aa90:	4a1d      	ldr	r2, [pc, #116]	@ (800ab08 <_free_r+0x90>)
 800aa92:	6813      	ldr	r3, [r2, #0]
 800aa94:	b933      	cbnz	r3, 800aaa4 <_free_r+0x2c>
 800aa96:	6063      	str	r3, [r4, #4]
 800aa98:	6014      	str	r4, [r2, #0]
 800aa9a:	4628      	mov	r0, r5
 800aa9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aaa0:	f7fe b822 	b.w	8008ae8 <__malloc_unlock>
 800aaa4:	42a3      	cmp	r3, r4
 800aaa6:	d908      	bls.n	800aaba <_free_r+0x42>
 800aaa8:	6820      	ldr	r0, [r4, #0]
 800aaaa:	1821      	adds	r1, r4, r0
 800aaac:	428b      	cmp	r3, r1
 800aaae:	bf01      	itttt	eq
 800aab0:	6819      	ldreq	r1, [r3, #0]
 800aab2:	685b      	ldreq	r3, [r3, #4]
 800aab4:	1809      	addeq	r1, r1, r0
 800aab6:	6021      	streq	r1, [r4, #0]
 800aab8:	e7ed      	b.n	800aa96 <_free_r+0x1e>
 800aaba:	461a      	mov	r2, r3
 800aabc:	685b      	ldr	r3, [r3, #4]
 800aabe:	b10b      	cbz	r3, 800aac4 <_free_r+0x4c>
 800aac0:	42a3      	cmp	r3, r4
 800aac2:	d9fa      	bls.n	800aaba <_free_r+0x42>
 800aac4:	6811      	ldr	r1, [r2, #0]
 800aac6:	1850      	adds	r0, r2, r1
 800aac8:	42a0      	cmp	r0, r4
 800aaca:	d10b      	bne.n	800aae4 <_free_r+0x6c>
 800aacc:	6820      	ldr	r0, [r4, #0]
 800aace:	4401      	add	r1, r0
 800aad0:	1850      	adds	r0, r2, r1
 800aad2:	4283      	cmp	r3, r0
 800aad4:	6011      	str	r1, [r2, #0]
 800aad6:	d1e0      	bne.n	800aa9a <_free_r+0x22>
 800aad8:	6818      	ldr	r0, [r3, #0]
 800aada:	685b      	ldr	r3, [r3, #4]
 800aadc:	6053      	str	r3, [r2, #4]
 800aade:	4408      	add	r0, r1
 800aae0:	6010      	str	r0, [r2, #0]
 800aae2:	e7da      	b.n	800aa9a <_free_r+0x22>
 800aae4:	d902      	bls.n	800aaec <_free_r+0x74>
 800aae6:	230c      	movs	r3, #12
 800aae8:	602b      	str	r3, [r5, #0]
 800aaea:	e7d6      	b.n	800aa9a <_free_r+0x22>
 800aaec:	6820      	ldr	r0, [r4, #0]
 800aaee:	1821      	adds	r1, r4, r0
 800aaf0:	428b      	cmp	r3, r1
 800aaf2:	bf04      	itt	eq
 800aaf4:	6819      	ldreq	r1, [r3, #0]
 800aaf6:	685b      	ldreq	r3, [r3, #4]
 800aaf8:	6063      	str	r3, [r4, #4]
 800aafa:	bf04      	itt	eq
 800aafc:	1809      	addeq	r1, r1, r0
 800aafe:	6021      	streq	r1, [r4, #0]
 800ab00:	6054      	str	r4, [r2, #4]
 800ab02:	e7ca      	b.n	800aa9a <_free_r+0x22>
 800ab04:	bd38      	pop	{r3, r4, r5, pc}
 800ab06:	bf00      	nop
 800ab08:	2000076c 	.word	0x2000076c

0800ab0c <_Balloc>:
 800ab0c:	b570      	push	{r4, r5, r6, lr}
 800ab0e:	69c6      	ldr	r6, [r0, #28]
 800ab10:	4604      	mov	r4, r0
 800ab12:	460d      	mov	r5, r1
 800ab14:	b976      	cbnz	r6, 800ab34 <_Balloc+0x28>
 800ab16:	2010      	movs	r0, #16
 800ab18:	f7fd ff36 	bl	8008988 <malloc>
 800ab1c:	4602      	mov	r2, r0
 800ab1e:	61e0      	str	r0, [r4, #28]
 800ab20:	b920      	cbnz	r0, 800ab2c <_Balloc+0x20>
 800ab22:	4b18      	ldr	r3, [pc, #96]	@ (800ab84 <_Balloc+0x78>)
 800ab24:	4818      	ldr	r0, [pc, #96]	@ (800ab88 <_Balloc+0x7c>)
 800ab26:	216b      	movs	r1, #107	@ 0x6b
 800ab28:	f002 f96e 	bl	800ce08 <__assert_func>
 800ab2c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ab30:	6006      	str	r6, [r0, #0]
 800ab32:	60c6      	str	r6, [r0, #12]
 800ab34:	69e6      	ldr	r6, [r4, #28]
 800ab36:	68f3      	ldr	r3, [r6, #12]
 800ab38:	b183      	cbz	r3, 800ab5c <_Balloc+0x50>
 800ab3a:	69e3      	ldr	r3, [r4, #28]
 800ab3c:	68db      	ldr	r3, [r3, #12]
 800ab3e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ab42:	b9b8      	cbnz	r0, 800ab74 <_Balloc+0x68>
 800ab44:	2101      	movs	r1, #1
 800ab46:	fa01 f605 	lsl.w	r6, r1, r5
 800ab4a:	1d72      	adds	r2, r6, #5
 800ab4c:	0092      	lsls	r2, r2, #2
 800ab4e:	4620      	mov	r0, r4
 800ab50:	f7fd ff06 	bl	8008960 <_calloc_r>
 800ab54:	b160      	cbz	r0, 800ab70 <_Balloc+0x64>
 800ab56:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ab5a:	e00e      	b.n	800ab7a <_Balloc+0x6e>
 800ab5c:	2221      	movs	r2, #33	@ 0x21
 800ab5e:	2104      	movs	r1, #4
 800ab60:	4620      	mov	r0, r4
 800ab62:	f7fd fefd 	bl	8008960 <_calloc_r>
 800ab66:	69e3      	ldr	r3, [r4, #28]
 800ab68:	60f0      	str	r0, [r6, #12]
 800ab6a:	68db      	ldr	r3, [r3, #12]
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d1e4      	bne.n	800ab3a <_Balloc+0x2e>
 800ab70:	2000      	movs	r0, #0
 800ab72:	bd70      	pop	{r4, r5, r6, pc}
 800ab74:	6802      	ldr	r2, [r0, #0]
 800ab76:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ab7a:	2300      	movs	r3, #0
 800ab7c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ab80:	e7f7      	b.n	800ab72 <_Balloc+0x66>
 800ab82:	bf00      	nop
 800ab84:	0800de34 	.word	0x0800de34
 800ab88:	0800deb4 	.word	0x0800deb4

0800ab8c <_Bfree>:
 800ab8c:	b570      	push	{r4, r5, r6, lr}
 800ab8e:	69c6      	ldr	r6, [r0, #28]
 800ab90:	4605      	mov	r5, r0
 800ab92:	460c      	mov	r4, r1
 800ab94:	b976      	cbnz	r6, 800abb4 <_Bfree+0x28>
 800ab96:	2010      	movs	r0, #16
 800ab98:	f7fd fef6 	bl	8008988 <malloc>
 800ab9c:	4602      	mov	r2, r0
 800ab9e:	61e8      	str	r0, [r5, #28]
 800aba0:	b920      	cbnz	r0, 800abac <_Bfree+0x20>
 800aba2:	4b09      	ldr	r3, [pc, #36]	@ (800abc8 <_Bfree+0x3c>)
 800aba4:	4809      	ldr	r0, [pc, #36]	@ (800abcc <_Bfree+0x40>)
 800aba6:	218f      	movs	r1, #143	@ 0x8f
 800aba8:	f002 f92e 	bl	800ce08 <__assert_func>
 800abac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800abb0:	6006      	str	r6, [r0, #0]
 800abb2:	60c6      	str	r6, [r0, #12]
 800abb4:	b13c      	cbz	r4, 800abc6 <_Bfree+0x3a>
 800abb6:	69eb      	ldr	r3, [r5, #28]
 800abb8:	6862      	ldr	r2, [r4, #4]
 800abba:	68db      	ldr	r3, [r3, #12]
 800abbc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800abc0:	6021      	str	r1, [r4, #0]
 800abc2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800abc6:	bd70      	pop	{r4, r5, r6, pc}
 800abc8:	0800de34 	.word	0x0800de34
 800abcc:	0800deb4 	.word	0x0800deb4

0800abd0 <__multadd>:
 800abd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800abd4:	690d      	ldr	r5, [r1, #16]
 800abd6:	4607      	mov	r7, r0
 800abd8:	460c      	mov	r4, r1
 800abda:	461e      	mov	r6, r3
 800abdc:	f101 0c14 	add.w	ip, r1, #20
 800abe0:	2000      	movs	r0, #0
 800abe2:	f8dc 3000 	ldr.w	r3, [ip]
 800abe6:	b299      	uxth	r1, r3
 800abe8:	fb02 6101 	mla	r1, r2, r1, r6
 800abec:	0c1e      	lsrs	r6, r3, #16
 800abee:	0c0b      	lsrs	r3, r1, #16
 800abf0:	fb02 3306 	mla	r3, r2, r6, r3
 800abf4:	b289      	uxth	r1, r1
 800abf6:	3001      	adds	r0, #1
 800abf8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800abfc:	4285      	cmp	r5, r0
 800abfe:	f84c 1b04 	str.w	r1, [ip], #4
 800ac02:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ac06:	dcec      	bgt.n	800abe2 <__multadd+0x12>
 800ac08:	b30e      	cbz	r6, 800ac4e <__multadd+0x7e>
 800ac0a:	68a3      	ldr	r3, [r4, #8]
 800ac0c:	42ab      	cmp	r3, r5
 800ac0e:	dc19      	bgt.n	800ac44 <__multadd+0x74>
 800ac10:	6861      	ldr	r1, [r4, #4]
 800ac12:	4638      	mov	r0, r7
 800ac14:	3101      	adds	r1, #1
 800ac16:	f7ff ff79 	bl	800ab0c <_Balloc>
 800ac1a:	4680      	mov	r8, r0
 800ac1c:	b928      	cbnz	r0, 800ac2a <__multadd+0x5a>
 800ac1e:	4602      	mov	r2, r0
 800ac20:	4b0c      	ldr	r3, [pc, #48]	@ (800ac54 <__multadd+0x84>)
 800ac22:	480d      	ldr	r0, [pc, #52]	@ (800ac58 <__multadd+0x88>)
 800ac24:	21ba      	movs	r1, #186	@ 0xba
 800ac26:	f002 f8ef 	bl	800ce08 <__assert_func>
 800ac2a:	6922      	ldr	r2, [r4, #16]
 800ac2c:	3202      	adds	r2, #2
 800ac2e:	f104 010c 	add.w	r1, r4, #12
 800ac32:	0092      	lsls	r2, r2, #2
 800ac34:	300c      	adds	r0, #12
 800ac36:	f002 f8d1 	bl	800cddc <memcpy>
 800ac3a:	4621      	mov	r1, r4
 800ac3c:	4638      	mov	r0, r7
 800ac3e:	f7ff ffa5 	bl	800ab8c <_Bfree>
 800ac42:	4644      	mov	r4, r8
 800ac44:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ac48:	3501      	adds	r5, #1
 800ac4a:	615e      	str	r6, [r3, #20]
 800ac4c:	6125      	str	r5, [r4, #16]
 800ac4e:	4620      	mov	r0, r4
 800ac50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac54:	0800dea3 	.word	0x0800dea3
 800ac58:	0800deb4 	.word	0x0800deb4

0800ac5c <__s2b>:
 800ac5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ac60:	460c      	mov	r4, r1
 800ac62:	4615      	mov	r5, r2
 800ac64:	461f      	mov	r7, r3
 800ac66:	2209      	movs	r2, #9
 800ac68:	3308      	adds	r3, #8
 800ac6a:	4606      	mov	r6, r0
 800ac6c:	fb93 f3f2 	sdiv	r3, r3, r2
 800ac70:	2100      	movs	r1, #0
 800ac72:	2201      	movs	r2, #1
 800ac74:	429a      	cmp	r2, r3
 800ac76:	db09      	blt.n	800ac8c <__s2b+0x30>
 800ac78:	4630      	mov	r0, r6
 800ac7a:	f7ff ff47 	bl	800ab0c <_Balloc>
 800ac7e:	b940      	cbnz	r0, 800ac92 <__s2b+0x36>
 800ac80:	4602      	mov	r2, r0
 800ac82:	4b19      	ldr	r3, [pc, #100]	@ (800ace8 <__s2b+0x8c>)
 800ac84:	4819      	ldr	r0, [pc, #100]	@ (800acec <__s2b+0x90>)
 800ac86:	21d3      	movs	r1, #211	@ 0xd3
 800ac88:	f002 f8be 	bl	800ce08 <__assert_func>
 800ac8c:	0052      	lsls	r2, r2, #1
 800ac8e:	3101      	adds	r1, #1
 800ac90:	e7f0      	b.n	800ac74 <__s2b+0x18>
 800ac92:	9b08      	ldr	r3, [sp, #32]
 800ac94:	6143      	str	r3, [r0, #20]
 800ac96:	2d09      	cmp	r5, #9
 800ac98:	f04f 0301 	mov.w	r3, #1
 800ac9c:	6103      	str	r3, [r0, #16]
 800ac9e:	dd16      	ble.n	800acce <__s2b+0x72>
 800aca0:	f104 0909 	add.w	r9, r4, #9
 800aca4:	46c8      	mov	r8, r9
 800aca6:	442c      	add	r4, r5
 800aca8:	f818 3b01 	ldrb.w	r3, [r8], #1
 800acac:	4601      	mov	r1, r0
 800acae:	3b30      	subs	r3, #48	@ 0x30
 800acb0:	220a      	movs	r2, #10
 800acb2:	4630      	mov	r0, r6
 800acb4:	f7ff ff8c 	bl	800abd0 <__multadd>
 800acb8:	45a0      	cmp	r8, r4
 800acba:	d1f5      	bne.n	800aca8 <__s2b+0x4c>
 800acbc:	f1a5 0408 	sub.w	r4, r5, #8
 800acc0:	444c      	add	r4, r9
 800acc2:	1b2d      	subs	r5, r5, r4
 800acc4:	1963      	adds	r3, r4, r5
 800acc6:	42bb      	cmp	r3, r7
 800acc8:	db04      	blt.n	800acd4 <__s2b+0x78>
 800acca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800acce:	340a      	adds	r4, #10
 800acd0:	2509      	movs	r5, #9
 800acd2:	e7f6      	b.n	800acc2 <__s2b+0x66>
 800acd4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800acd8:	4601      	mov	r1, r0
 800acda:	3b30      	subs	r3, #48	@ 0x30
 800acdc:	220a      	movs	r2, #10
 800acde:	4630      	mov	r0, r6
 800ace0:	f7ff ff76 	bl	800abd0 <__multadd>
 800ace4:	e7ee      	b.n	800acc4 <__s2b+0x68>
 800ace6:	bf00      	nop
 800ace8:	0800dea3 	.word	0x0800dea3
 800acec:	0800deb4 	.word	0x0800deb4

0800acf0 <__hi0bits>:
 800acf0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800acf4:	4603      	mov	r3, r0
 800acf6:	bf36      	itet	cc
 800acf8:	0403      	lslcc	r3, r0, #16
 800acfa:	2000      	movcs	r0, #0
 800acfc:	2010      	movcc	r0, #16
 800acfe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ad02:	bf3c      	itt	cc
 800ad04:	021b      	lslcc	r3, r3, #8
 800ad06:	3008      	addcc	r0, #8
 800ad08:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ad0c:	bf3c      	itt	cc
 800ad0e:	011b      	lslcc	r3, r3, #4
 800ad10:	3004      	addcc	r0, #4
 800ad12:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ad16:	bf3c      	itt	cc
 800ad18:	009b      	lslcc	r3, r3, #2
 800ad1a:	3002      	addcc	r0, #2
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	db05      	blt.n	800ad2c <__hi0bits+0x3c>
 800ad20:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800ad24:	f100 0001 	add.w	r0, r0, #1
 800ad28:	bf08      	it	eq
 800ad2a:	2020      	moveq	r0, #32
 800ad2c:	4770      	bx	lr

0800ad2e <__lo0bits>:
 800ad2e:	6803      	ldr	r3, [r0, #0]
 800ad30:	4602      	mov	r2, r0
 800ad32:	f013 0007 	ands.w	r0, r3, #7
 800ad36:	d00b      	beq.n	800ad50 <__lo0bits+0x22>
 800ad38:	07d9      	lsls	r1, r3, #31
 800ad3a:	d421      	bmi.n	800ad80 <__lo0bits+0x52>
 800ad3c:	0798      	lsls	r0, r3, #30
 800ad3e:	bf49      	itett	mi
 800ad40:	085b      	lsrmi	r3, r3, #1
 800ad42:	089b      	lsrpl	r3, r3, #2
 800ad44:	2001      	movmi	r0, #1
 800ad46:	6013      	strmi	r3, [r2, #0]
 800ad48:	bf5c      	itt	pl
 800ad4a:	6013      	strpl	r3, [r2, #0]
 800ad4c:	2002      	movpl	r0, #2
 800ad4e:	4770      	bx	lr
 800ad50:	b299      	uxth	r1, r3
 800ad52:	b909      	cbnz	r1, 800ad58 <__lo0bits+0x2a>
 800ad54:	0c1b      	lsrs	r3, r3, #16
 800ad56:	2010      	movs	r0, #16
 800ad58:	b2d9      	uxtb	r1, r3
 800ad5a:	b909      	cbnz	r1, 800ad60 <__lo0bits+0x32>
 800ad5c:	3008      	adds	r0, #8
 800ad5e:	0a1b      	lsrs	r3, r3, #8
 800ad60:	0719      	lsls	r1, r3, #28
 800ad62:	bf04      	itt	eq
 800ad64:	091b      	lsreq	r3, r3, #4
 800ad66:	3004      	addeq	r0, #4
 800ad68:	0799      	lsls	r1, r3, #30
 800ad6a:	bf04      	itt	eq
 800ad6c:	089b      	lsreq	r3, r3, #2
 800ad6e:	3002      	addeq	r0, #2
 800ad70:	07d9      	lsls	r1, r3, #31
 800ad72:	d403      	bmi.n	800ad7c <__lo0bits+0x4e>
 800ad74:	085b      	lsrs	r3, r3, #1
 800ad76:	f100 0001 	add.w	r0, r0, #1
 800ad7a:	d003      	beq.n	800ad84 <__lo0bits+0x56>
 800ad7c:	6013      	str	r3, [r2, #0]
 800ad7e:	4770      	bx	lr
 800ad80:	2000      	movs	r0, #0
 800ad82:	4770      	bx	lr
 800ad84:	2020      	movs	r0, #32
 800ad86:	4770      	bx	lr

0800ad88 <__i2b>:
 800ad88:	b510      	push	{r4, lr}
 800ad8a:	460c      	mov	r4, r1
 800ad8c:	2101      	movs	r1, #1
 800ad8e:	f7ff febd 	bl	800ab0c <_Balloc>
 800ad92:	4602      	mov	r2, r0
 800ad94:	b928      	cbnz	r0, 800ada2 <__i2b+0x1a>
 800ad96:	4b05      	ldr	r3, [pc, #20]	@ (800adac <__i2b+0x24>)
 800ad98:	4805      	ldr	r0, [pc, #20]	@ (800adb0 <__i2b+0x28>)
 800ad9a:	f240 1145 	movw	r1, #325	@ 0x145
 800ad9e:	f002 f833 	bl	800ce08 <__assert_func>
 800ada2:	2301      	movs	r3, #1
 800ada4:	6144      	str	r4, [r0, #20]
 800ada6:	6103      	str	r3, [r0, #16]
 800ada8:	bd10      	pop	{r4, pc}
 800adaa:	bf00      	nop
 800adac:	0800dea3 	.word	0x0800dea3
 800adb0:	0800deb4 	.word	0x0800deb4

0800adb4 <__multiply>:
 800adb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adb8:	4614      	mov	r4, r2
 800adba:	690a      	ldr	r2, [r1, #16]
 800adbc:	6923      	ldr	r3, [r4, #16]
 800adbe:	429a      	cmp	r2, r3
 800adc0:	bfa8      	it	ge
 800adc2:	4623      	movge	r3, r4
 800adc4:	460f      	mov	r7, r1
 800adc6:	bfa4      	itt	ge
 800adc8:	460c      	movge	r4, r1
 800adca:	461f      	movge	r7, r3
 800adcc:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800add0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800add4:	68a3      	ldr	r3, [r4, #8]
 800add6:	6861      	ldr	r1, [r4, #4]
 800add8:	eb0a 0609 	add.w	r6, sl, r9
 800addc:	42b3      	cmp	r3, r6
 800adde:	b085      	sub	sp, #20
 800ade0:	bfb8      	it	lt
 800ade2:	3101      	addlt	r1, #1
 800ade4:	f7ff fe92 	bl	800ab0c <_Balloc>
 800ade8:	b930      	cbnz	r0, 800adf8 <__multiply+0x44>
 800adea:	4602      	mov	r2, r0
 800adec:	4b44      	ldr	r3, [pc, #272]	@ (800af00 <__multiply+0x14c>)
 800adee:	4845      	ldr	r0, [pc, #276]	@ (800af04 <__multiply+0x150>)
 800adf0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800adf4:	f002 f808 	bl	800ce08 <__assert_func>
 800adf8:	f100 0514 	add.w	r5, r0, #20
 800adfc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ae00:	462b      	mov	r3, r5
 800ae02:	2200      	movs	r2, #0
 800ae04:	4543      	cmp	r3, r8
 800ae06:	d321      	bcc.n	800ae4c <__multiply+0x98>
 800ae08:	f107 0114 	add.w	r1, r7, #20
 800ae0c:	f104 0214 	add.w	r2, r4, #20
 800ae10:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800ae14:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800ae18:	9302      	str	r3, [sp, #8]
 800ae1a:	1b13      	subs	r3, r2, r4
 800ae1c:	3b15      	subs	r3, #21
 800ae1e:	f023 0303 	bic.w	r3, r3, #3
 800ae22:	3304      	adds	r3, #4
 800ae24:	f104 0715 	add.w	r7, r4, #21
 800ae28:	42ba      	cmp	r2, r7
 800ae2a:	bf38      	it	cc
 800ae2c:	2304      	movcc	r3, #4
 800ae2e:	9301      	str	r3, [sp, #4]
 800ae30:	9b02      	ldr	r3, [sp, #8]
 800ae32:	9103      	str	r1, [sp, #12]
 800ae34:	428b      	cmp	r3, r1
 800ae36:	d80c      	bhi.n	800ae52 <__multiply+0x9e>
 800ae38:	2e00      	cmp	r6, #0
 800ae3a:	dd03      	ble.n	800ae44 <__multiply+0x90>
 800ae3c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d05b      	beq.n	800aefc <__multiply+0x148>
 800ae44:	6106      	str	r6, [r0, #16]
 800ae46:	b005      	add	sp, #20
 800ae48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae4c:	f843 2b04 	str.w	r2, [r3], #4
 800ae50:	e7d8      	b.n	800ae04 <__multiply+0x50>
 800ae52:	f8b1 a000 	ldrh.w	sl, [r1]
 800ae56:	f1ba 0f00 	cmp.w	sl, #0
 800ae5a:	d024      	beq.n	800aea6 <__multiply+0xf2>
 800ae5c:	f104 0e14 	add.w	lr, r4, #20
 800ae60:	46a9      	mov	r9, r5
 800ae62:	f04f 0c00 	mov.w	ip, #0
 800ae66:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ae6a:	f8d9 3000 	ldr.w	r3, [r9]
 800ae6e:	fa1f fb87 	uxth.w	fp, r7
 800ae72:	b29b      	uxth	r3, r3
 800ae74:	fb0a 330b 	mla	r3, sl, fp, r3
 800ae78:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800ae7c:	f8d9 7000 	ldr.w	r7, [r9]
 800ae80:	4463      	add	r3, ip
 800ae82:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800ae86:	fb0a c70b 	mla	r7, sl, fp, ip
 800ae8a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800ae8e:	b29b      	uxth	r3, r3
 800ae90:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ae94:	4572      	cmp	r2, lr
 800ae96:	f849 3b04 	str.w	r3, [r9], #4
 800ae9a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800ae9e:	d8e2      	bhi.n	800ae66 <__multiply+0xb2>
 800aea0:	9b01      	ldr	r3, [sp, #4]
 800aea2:	f845 c003 	str.w	ip, [r5, r3]
 800aea6:	9b03      	ldr	r3, [sp, #12]
 800aea8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800aeac:	3104      	adds	r1, #4
 800aeae:	f1b9 0f00 	cmp.w	r9, #0
 800aeb2:	d021      	beq.n	800aef8 <__multiply+0x144>
 800aeb4:	682b      	ldr	r3, [r5, #0]
 800aeb6:	f104 0c14 	add.w	ip, r4, #20
 800aeba:	46ae      	mov	lr, r5
 800aebc:	f04f 0a00 	mov.w	sl, #0
 800aec0:	f8bc b000 	ldrh.w	fp, [ip]
 800aec4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800aec8:	fb09 770b 	mla	r7, r9, fp, r7
 800aecc:	4457      	add	r7, sl
 800aece:	b29b      	uxth	r3, r3
 800aed0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800aed4:	f84e 3b04 	str.w	r3, [lr], #4
 800aed8:	f85c 3b04 	ldr.w	r3, [ip], #4
 800aedc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800aee0:	f8be 3000 	ldrh.w	r3, [lr]
 800aee4:	fb09 330a 	mla	r3, r9, sl, r3
 800aee8:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800aeec:	4562      	cmp	r2, ip
 800aeee:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800aef2:	d8e5      	bhi.n	800aec0 <__multiply+0x10c>
 800aef4:	9f01      	ldr	r7, [sp, #4]
 800aef6:	51eb      	str	r3, [r5, r7]
 800aef8:	3504      	adds	r5, #4
 800aefa:	e799      	b.n	800ae30 <__multiply+0x7c>
 800aefc:	3e01      	subs	r6, #1
 800aefe:	e79b      	b.n	800ae38 <__multiply+0x84>
 800af00:	0800dea3 	.word	0x0800dea3
 800af04:	0800deb4 	.word	0x0800deb4

0800af08 <__pow5mult>:
 800af08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800af0c:	4615      	mov	r5, r2
 800af0e:	f012 0203 	ands.w	r2, r2, #3
 800af12:	4607      	mov	r7, r0
 800af14:	460e      	mov	r6, r1
 800af16:	d007      	beq.n	800af28 <__pow5mult+0x20>
 800af18:	4c25      	ldr	r4, [pc, #148]	@ (800afb0 <__pow5mult+0xa8>)
 800af1a:	3a01      	subs	r2, #1
 800af1c:	2300      	movs	r3, #0
 800af1e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800af22:	f7ff fe55 	bl	800abd0 <__multadd>
 800af26:	4606      	mov	r6, r0
 800af28:	10ad      	asrs	r5, r5, #2
 800af2a:	d03d      	beq.n	800afa8 <__pow5mult+0xa0>
 800af2c:	69fc      	ldr	r4, [r7, #28]
 800af2e:	b97c      	cbnz	r4, 800af50 <__pow5mult+0x48>
 800af30:	2010      	movs	r0, #16
 800af32:	f7fd fd29 	bl	8008988 <malloc>
 800af36:	4602      	mov	r2, r0
 800af38:	61f8      	str	r0, [r7, #28]
 800af3a:	b928      	cbnz	r0, 800af48 <__pow5mult+0x40>
 800af3c:	4b1d      	ldr	r3, [pc, #116]	@ (800afb4 <__pow5mult+0xac>)
 800af3e:	481e      	ldr	r0, [pc, #120]	@ (800afb8 <__pow5mult+0xb0>)
 800af40:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800af44:	f001 ff60 	bl	800ce08 <__assert_func>
 800af48:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800af4c:	6004      	str	r4, [r0, #0]
 800af4e:	60c4      	str	r4, [r0, #12]
 800af50:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800af54:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800af58:	b94c      	cbnz	r4, 800af6e <__pow5mult+0x66>
 800af5a:	f240 2171 	movw	r1, #625	@ 0x271
 800af5e:	4638      	mov	r0, r7
 800af60:	f7ff ff12 	bl	800ad88 <__i2b>
 800af64:	2300      	movs	r3, #0
 800af66:	f8c8 0008 	str.w	r0, [r8, #8]
 800af6a:	4604      	mov	r4, r0
 800af6c:	6003      	str	r3, [r0, #0]
 800af6e:	f04f 0900 	mov.w	r9, #0
 800af72:	07eb      	lsls	r3, r5, #31
 800af74:	d50a      	bpl.n	800af8c <__pow5mult+0x84>
 800af76:	4631      	mov	r1, r6
 800af78:	4622      	mov	r2, r4
 800af7a:	4638      	mov	r0, r7
 800af7c:	f7ff ff1a 	bl	800adb4 <__multiply>
 800af80:	4631      	mov	r1, r6
 800af82:	4680      	mov	r8, r0
 800af84:	4638      	mov	r0, r7
 800af86:	f7ff fe01 	bl	800ab8c <_Bfree>
 800af8a:	4646      	mov	r6, r8
 800af8c:	106d      	asrs	r5, r5, #1
 800af8e:	d00b      	beq.n	800afa8 <__pow5mult+0xa0>
 800af90:	6820      	ldr	r0, [r4, #0]
 800af92:	b938      	cbnz	r0, 800afa4 <__pow5mult+0x9c>
 800af94:	4622      	mov	r2, r4
 800af96:	4621      	mov	r1, r4
 800af98:	4638      	mov	r0, r7
 800af9a:	f7ff ff0b 	bl	800adb4 <__multiply>
 800af9e:	6020      	str	r0, [r4, #0]
 800afa0:	f8c0 9000 	str.w	r9, [r0]
 800afa4:	4604      	mov	r4, r0
 800afa6:	e7e4      	b.n	800af72 <__pow5mult+0x6a>
 800afa8:	4630      	mov	r0, r6
 800afaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800afae:	bf00      	nop
 800afb0:	0800df10 	.word	0x0800df10
 800afb4:	0800de34 	.word	0x0800de34
 800afb8:	0800deb4 	.word	0x0800deb4

0800afbc <__lshift>:
 800afbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800afc0:	460c      	mov	r4, r1
 800afc2:	6849      	ldr	r1, [r1, #4]
 800afc4:	6923      	ldr	r3, [r4, #16]
 800afc6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800afca:	68a3      	ldr	r3, [r4, #8]
 800afcc:	4607      	mov	r7, r0
 800afce:	4691      	mov	r9, r2
 800afd0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800afd4:	f108 0601 	add.w	r6, r8, #1
 800afd8:	42b3      	cmp	r3, r6
 800afda:	db0b      	blt.n	800aff4 <__lshift+0x38>
 800afdc:	4638      	mov	r0, r7
 800afde:	f7ff fd95 	bl	800ab0c <_Balloc>
 800afe2:	4605      	mov	r5, r0
 800afe4:	b948      	cbnz	r0, 800affa <__lshift+0x3e>
 800afe6:	4602      	mov	r2, r0
 800afe8:	4b28      	ldr	r3, [pc, #160]	@ (800b08c <__lshift+0xd0>)
 800afea:	4829      	ldr	r0, [pc, #164]	@ (800b090 <__lshift+0xd4>)
 800afec:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800aff0:	f001 ff0a 	bl	800ce08 <__assert_func>
 800aff4:	3101      	adds	r1, #1
 800aff6:	005b      	lsls	r3, r3, #1
 800aff8:	e7ee      	b.n	800afd8 <__lshift+0x1c>
 800affa:	2300      	movs	r3, #0
 800affc:	f100 0114 	add.w	r1, r0, #20
 800b000:	f100 0210 	add.w	r2, r0, #16
 800b004:	4618      	mov	r0, r3
 800b006:	4553      	cmp	r3, sl
 800b008:	db33      	blt.n	800b072 <__lshift+0xb6>
 800b00a:	6920      	ldr	r0, [r4, #16]
 800b00c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b010:	f104 0314 	add.w	r3, r4, #20
 800b014:	f019 091f 	ands.w	r9, r9, #31
 800b018:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b01c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b020:	d02b      	beq.n	800b07a <__lshift+0xbe>
 800b022:	f1c9 0e20 	rsb	lr, r9, #32
 800b026:	468a      	mov	sl, r1
 800b028:	2200      	movs	r2, #0
 800b02a:	6818      	ldr	r0, [r3, #0]
 800b02c:	fa00 f009 	lsl.w	r0, r0, r9
 800b030:	4310      	orrs	r0, r2
 800b032:	f84a 0b04 	str.w	r0, [sl], #4
 800b036:	f853 2b04 	ldr.w	r2, [r3], #4
 800b03a:	459c      	cmp	ip, r3
 800b03c:	fa22 f20e 	lsr.w	r2, r2, lr
 800b040:	d8f3      	bhi.n	800b02a <__lshift+0x6e>
 800b042:	ebac 0304 	sub.w	r3, ip, r4
 800b046:	3b15      	subs	r3, #21
 800b048:	f023 0303 	bic.w	r3, r3, #3
 800b04c:	3304      	adds	r3, #4
 800b04e:	f104 0015 	add.w	r0, r4, #21
 800b052:	4584      	cmp	ip, r0
 800b054:	bf38      	it	cc
 800b056:	2304      	movcc	r3, #4
 800b058:	50ca      	str	r2, [r1, r3]
 800b05a:	b10a      	cbz	r2, 800b060 <__lshift+0xa4>
 800b05c:	f108 0602 	add.w	r6, r8, #2
 800b060:	3e01      	subs	r6, #1
 800b062:	4638      	mov	r0, r7
 800b064:	612e      	str	r6, [r5, #16]
 800b066:	4621      	mov	r1, r4
 800b068:	f7ff fd90 	bl	800ab8c <_Bfree>
 800b06c:	4628      	mov	r0, r5
 800b06e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b072:	f842 0f04 	str.w	r0, [r2, #4]!
 800b076:	3301      	adds	r3, #1
 800b078:	e7c5      	b.n	800b006 <__lshift+0x4a>
 800b07a:	3904      	subs	r1, #4
 800b07c:	f853 2b04 	ldr.w	r2, [r3], #4
 800b080:	f841 2f04 	str.w	r2, [r1, #4]!
 800b084:	459c      	cmp	ip, r3
 800b086:	d8f9      	bhi.n	800b07c <__lshift+0xc0>
 800b088:	e7ea      	b.n	800b060 <__lshift+0xa4>
 800b08a:	bf00      	nop
 800b08c:	0800dea3 	.word	0x0800dea3
 800b090:	0800deb4 	.word	0x0800deb4

0800b094 <__mcmp>:
 800b094:	690a      	ldr	r2, [r1, #16]
 800b096:	4603      	mov	r3, r0
 800b098:	6900      	ldr	r0, [r0, #16]
 800b09a:	1a80      	subs	r0, r0, r2
 800b09c:	b530      	push	{r4, r5, lr}
 800b09e:	d10e      	bne.n	800b0be <__mcmp+0x2a>
 800b0a0:	3314      	adds	r3, #20
 800b0a2:	3114      	adds	r1, #20
 800b0a4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b0a8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b0ac:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b0b0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b0b4:	4295      	cmp	r5, r2
 800b0b6:	d003      	beq.n	800b0c0 <__mcmp+0x2c>
 800b0b8:	d205      	bcs.n	800b0c6 <__mcmp+0x32>
 800b0ba:	f04f 30ff 	mov.w	r0, #4294967295
 800b0be:	bd30      	pop	{r4, r5, pc}
 800b0c0:	42a3      	cmp	r3, r4
 800b0c2:	d3f3      	bcc.n	800b0ac <__mcmp+0x18>
 800b0c4:	e7fb      	b.n	800b0be <__mcmp+0x2a>
 800b0c6:	2001      	movs	r0, #1
 800b0c8:	e7f9      	b.n	800b0be <__mcmp+0x2a>
	...

0800b0cc <__mdiff>:
 800b0cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0d0:	4689      	mov	r9, r1
 800b0d2:	4606      	mov	r6, r0
 800b0d4:	4611      	mov	r1, r2
 800b0d6:	4648      	mov	r0, r9
 800b0d8:	4614      	mov	r4, r2
 800b0da:	f7ff ffdb 	bl	800b094 <__mcmp>
 800b0de:	1e05      	subs	r5, r0, #0
 800b0e0:	d112      	bne.n	800b108 <__mdiff+0x3c>
 800b0e2:	4629      	mov	r1, r5
 800b0e4:	4630      	mov	r0, r6
 800b0e6:	f7ff fd11 	bl	800ab0c <_Balloc>
 800b0ea:	4602      	mov	r2, r0
 800b0ec:	b928      	cbnz	r0, 800b0fa <__mdiff+0x2e>
 800b0ee:	4b3f      	ldr	r3, [pc, #252]	@ (800b1ec <__mdiff+0x120>)
 800b0f0:	f240 2137 	movw	r1, #567	@ 0x237
 800b0f4:	483e      	ldr	r0, [pc, #248]	@ (800b1f0 <__mdiff+0x124>)
 800b0f6:	f001 fe87 	bl	800ce08 <__assert_func>
 800b0fa:	2301      	movs	r3, #1
 800b0fc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b100:	4610      	mov	r0, r2
 800b102:	b003      	add	sp, #12
 800b104:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b108:	bfbc      	itt	lt
 800b10a:	464b      	movlt	r3, r9
 800b10c:	46a1      	movlt	r9, r4
 800b10e:	4630      	mov	r0, r6
 800b110:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800b114:	bfba      	itte	lt
 800b116:	461c      	movlt	r4, r3
 800b118:	2501      	movlt	r5, #1
 800b11a:	2500      	movge	r5, #0
 800b11c:	f7ff fcf6 	bl	800ab0c <_Balloc>
 800b120:	4602      	mov	r2, r0
 800b122:	b918      	cbnz	r0, 800b12c <__mdiff+0x60>
 800b124:	4b31      	ldr	r3, [pc, #196]	@ (800b1ec <__mdiff+0x120>)
 800b126:	f240 2145 	movw	r1, #581	@ 0x245
 800b12a:	e7e3      	b.n	800b0f4 <__mdiff+0x28>
 800b12c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800b130:	6926      	ldr	r6, [r4, #16]
 800b132:	60c5      	str	r5, [r0, #12]
 800b134:	f109 0310 	add.w	r3, r9, #16
 800b138:	f109 0514 	add.w	r5, r9, #20
 800b13c:	f104 0e14 	add.w	lr, r4, #20
 800b140:	f100 0b14 	add.w	fp, r0, #20
 800b144:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800b148:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800b14c:	9301      	str	r3, [sp, #4]
 800b14e:	46d9      	mov	r9, fp
 800b150:	f04f 0c00 	mov.w	ip, #0
 800b154:	9b01      	ldr	r3, [sp, #4]
 800b156:	f85e 0b04 	ldr.w	r0, [lr], #4
 800b15a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800b15e:	9301      	str	r3, [sp, #4]
 800b160:	fa1f f38a 	uxth.w	r3, sl
 800b164:	4619      	mov	r1, r3
 800b166:	b283      	uxth	r3, r0
 800b168:	1acb      	subs	r3, r1, r3
 800b16a:	0c00      	lsrs	r0, r0, #16
 800b16c:	4463      	add	r3, ip
 800b16e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800b172:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800b176:	b29b      	uxth	r3, r3
 800b178:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800b17c:	4576      	cmp	r6, lr
 800b17e:	f849 3b04 	str.w	r3, [r9], #4
 800b182:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b186:	d8e5      	bhi.n	800b154 <__mdiff+0x88>
 800b188:	1b33      	subs	r3, r6, r4
 800b18a:	3b15      	subs	r3, #21
 800b18c:	f023 0303 	bic.w	r3, r3, #3
 800b190:	3415      	adds	r4, #21
 800b192:	3304      	adds	r3, #4
 800b194:	42a6      	cmp	r6, r4
 800b196:	bf38      	it	cc
 800b198:	2304      	movcc	r3, #4
 800b19a:	441d      	add	r5, r3
 800b19c:	445b      	add	r3, fp
 800b19e:	461e      	mov	r6, r3
 800b1a0:	462c      	mov	r4, r5
 800b1a2:	4544      	cmp	r4, r8
 800b1a4:	d30e      	bcc.n	800b1c4 <__mdiff+0xf8>
 800b1a6:	f108 0103 	add.w	r1, r8, #3
 800b1aa:	1b49      	subs	r1, r1, r5
 800b1ac:	f021 0103 	bic.w	r1, r1, #3
 800b1b0:	3d03      	subs	r5, #3
 800b1b2:	45a8      	cmp	r8, r5
 800b1b4:	bf38      	it	cc
 800b1b6:	2100      	movcc	r1, #0
 800b1b8:	440b      	add	r3, r1
 800b1ba:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b1be:	b191      	cbz	r1, 800b1e6 <__mdiff+0x11a>
 800b1c0:	6117      	str	r7, [r2, #16]
 800b1c2:	e79d      	b.n	800b100 <__mdiff+0x34>
 800b1c4:	f854 1b04 	ldr.w	r1, [r4], #4
 800b1c8:	46e6      	mov	lr, ip
 800b1ca:	0c08      	lsrs	r0, r1, #16
 800b1cc:	fa1c fc81 	uxtah	ip, ip, r1
 800b1d0:	4471      	add	r1, lr
 800b1d2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800b1d6:	b289      	uxth	r1, r1
 800b1d8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800b1dc:	f846 1b04 	str.w	r1, [r6], #4
 800b1e0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b1e4:	e7dd      	b.n	800b1a2 <__mdiff+0xd6>
 800b1e6:	3f01      	subs	r7, #1
 800b1e8:	e7e7      	b.n	800b1ba <__mdiff+0xee>
 800b1ea:	bf00      	nop
 800b1ec:	0800dea3 	.word	0x0800dea3
 800b1f0:	0800deb4 	.word	0x0800deb4

0800b1f4 <__ulp>:
 800b1f4:	b082      	sub	sp, #8
 800b1f6:	ed8d 0b00 	vstr	d0, [sp]
 800b1fa:	9a01      	ldr	r2, [sp, #4]
 800b1fc:	4b0f      	ldr	r3, [pc, #60]	@ (800b23c <__ulp+0x48>)
 800b1fe:	4013      	ands	r3, r2
 800b200:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800b204:	2b00      	cmp	r3, #0
 800b206:	dc08      	bgt.n	800b21a <__ulp+0x26>
 800b208:	425b      	negs	r3, r3
 800b20a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800b20e:	ea4f 5223 	mov.w	r2, r3, asr #20
 800b212:	da04      	bge.n	800b21e <__ulp+0x2a>
 800b214:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800b218:	4113      	asrs	r3, r2
 800b21a:	2200      	movs	r2, #0
 800b21c:	e008      	b.n	800b230 <__ulp+0x3c>
 800b21e:	f1a2 0314 	sub.w	r3, r2, #20
 800b222:	2b1e      	cmp	r3, #30
 800b224:	bfda      	itte	le
 800b226:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800b22a:	40da      	lsrle	r2, r3
 800b22c:	2201      	movgt	r2, #1
 800b22e:	2300      	movs	r3, #0
 800b230:	4619      	mov	r1, r3
 800b232:	4610      	mov	r0, r2
 800b234:	ec41 0b10 	vmov	d0, r0, r1
 800b238:	b002      	add	sp, #8
 800b23a:	4770      	bx	lr
 800b23c:	7ff00000 	.word	0x7ff00000

0800b240 <__b2d>:
 800b240:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b244:	6906      	ldr	r6, [r0, #16]
 800b246:	f100 0814 	add.w	r8, r0, #20
 800b24a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800b24e:	1f37      	subs	r7, r6, #4
 800b250:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b254:	4610      	mov	r0, r2
 800b256:	f7ff fd4b 	bl	800acf0 <__hi0bits>
 800b25a:	f1c0 0320 	rsb	r3, r0, #32
 800b25e:	280a      	cmp	r0, #10
 800b260:	600b      	str	r3, [r1, #0]
 800b262:	491b      	ldr	r1, [pc, #108]	@ (800b2d0 <__b2d+0x90>)
 800b264:	dc15      	bgt.n	800b292 <__b2d+0x52>
 800b266:	f1c0 0c0b 	rsb	ip, r0, #11
 800b26a:	fa22 f30c 	lsr.w	r3, r2, ip
 800b26e:	45b8      	cmp	r8, r7
 800b270:	ea43 0501 	orr.w	r5, r3, r1
 800b274:	bf34      	ite	cc
 800b276:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800b27a:	2300      	movcs	r3, #0
 800b27c:	3015      	adds	r0, #21
 800b27e:	fa02 f000 	lsl.w	r0, r2, r0
 800b282:	fa23 f30c 	lsr.w	r3, r3, ip
 800b286:	4303      	orrs	r3, r0
 800b288:	461c      	mov	r4, r3
 800b28a:	ec45 4b10 	vmov	d0, r4, r5
 800b28e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b292:	45b8      	cmp	r8, r7
 800b294:	bf3a      	itte	cc
 800b296:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800b29a:	f1a6 0708 	subcc.w	r7, r6, #8
 800b29e:	2300      	movcs	r3, #0
 800b2a0:	380b      	subs	r0, #11
 800b2a2:	d012      	beq.n	800b2ca <__b2d+0x8a>
 800b2a4:	f1c0 0120 	rsb	r1, r0, #32
 800b2a8:	fa23 f401 	lsr.w	r4, r3, r1
 800b2ac:	4082      	lsls	r2, r0
 800b2ae:	4322      	orrs	r2, r4
 800b2b0:	4547      	cmp	r7, r8
 800b2b2:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800b2b6:	bf8c      	ite	hi
 800b2b8:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800b2bc:	2200      	movls	r2, #0
 800b2be:	4083      	lsls	r3, r0
 800b2c0:	40ca      	lsrs	r2, r1
 800b2c2:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800b2c6:	4313      	orrs	r3, r2
 800b2c8:	e7de      	b.n	800b288 <__b2d+0x48>
 800b2ca:	ea42 0501 	orr.w	r5, r2, r1
 800b2ce:	e7db      	b.n	800b288 <__b2d+0x48>
 800b2d0:	3ff00000 	.word	0x3ff00000

0800b2d4 <__d2b>:
 800b2d4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b2d8:	460f      	mov	r7, r1
 800b2da:	2101      	movs	r1, #1
 800b2dc:	ec59 8b10 	vmov	r8, r9, d0
 800b2e0:	4616      	mov	r6, r2
 800b2e2:	f7ff fc13 	bl	800ab0c <_Balloc>
 800b2e6:	4604      	mov	r4, r0
 800b2e8:	b930      	cbnz	r0, 800b2f8 <__d2b+0x24>
 800b2ea:	4602      	mov	r2, r0
 800b2ec:	4b23      	ldr	r3, [pc, #140]	@ (800b37c <__d2b+0xa8>)
 800b2ee:	4824      	ldr	r0, [pc, #144]	@ (800b380 <__d2b+0xac>)
 800b2f0:	f240 310f 	movw	r1, #783	@ 0x30f
 800b2f4:	f001 fd88 	bl	800ce08 <__assert_func>
 800b2f8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b2fc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b300:	b10d      	cbz	r5, 800b306 <__d2b+0x32>
 800b302:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b306:	9301      	str	r3, [sp, #4]
 800b308:	f1b8 0300 	subs.w	r3, r8, #0
 800b30c:	d023      	beq.n	800b356 <__d2b+0x82>
 800b30e:	4668      	mov	r0, sp
 800b310:	9300      	str	r3, [sp, #0]
 800b312:	f7ff fd0c 	bl	800ad2e <__lo0bits>
 800b316:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b31a:	b1d0      	cbz	r0, 800b352 <__d2b+0x7e>
 800b31c:	f1c0 0320 	rsb	r3, r0, #32
 800b320:	fa02 f303 	lsl.w	r3, r2, r3
 800b324:	430b      	orrs	r3, r1
 800b326:	40c2      	lsrs	r2, r0
 800b328:	6163      	str	r3, [r4, #20]
 800b32a:	9201      	str	r2, [sp, #4]
 800b32c:	9b01      	ldr	r3, [sp, #4]
 800b32e:	61a3      	str	r3, [r4, #24]
 800b330:	2b00      	cmp	r3, #0
 800b332:	bf0c      	ite	eq
 800b334:	2201      	moveq	r2, #1
 800b336:	2202      	movne	r2, #2
 800b338:	6122      	str	r2, [r4, #16]
 800b33a:	b1a5      	cbz	r5, 800b366 <__d2b+0x92>
 800b33c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800b340:	4405      	add	r5, r0
 800b342:	603d      	str	r5, [r7, #0]
 800b344:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800b348:	6030      	str	r0, [r6, #0]
 800b34a:	4620      	mov	r0, r4
 800b34c:	b003      	add	sp, #12
 800b34e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b352:	6161      	str	r1, [r4, #20]
 800b354:	e7ea      	b.n	800b32c <__d2b+0x58>
 800b356:	a801      	add	r0, sp, #4
 800b358:	f7ff fce9 	bl	800ad2e <__lo0bits>
 800b35c:	9b01      	ldr	r3, [sp, #4]
 800b35e:	6163      	str	r3, [r4, #20]
 800b360:	3020      	adds	r0, #32
 800b362:	2201      	movs	r2, #1
 800b364:	e7e8      	b.n	800b338 <__d2b+0x64>
 800b366:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b36a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800b36e:	6038      	str	r0, [r7, #0]
 800b370:	6918      	ldr	r0, [r3, #16]
 800b372:	f7ff fcbd 	bl	800acf0 <__hi0bits>
 800b376:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b37a:	e7e5      	b.n	800b348 <__d2b+0x74>
 800b37c:	0800dea3 	.word	0x0800dea3
 800b380:	0800deb4 	.word	0x0800deb4

0800b384 <__ratio>:
 800b384:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b388:	b085      	sub	sp, #20
 800b38a:	e9cd 1000 	strd	r1, r0, [sp]
 800b38e:	a902      	add	r1, sp, #8
 800b390:	f7ff ff56 	bl	800b240 <__b2d>
 800b394:	9800      	ldr	r0, [sp, #0]
 800b396:	a903      	add	r1, sp, #12
 800b398:	ec55 4b10 	vmov	r4, r5, d0
 800b39c:	f7ff ff50 	bl	800b240 <__b2d>
 800b3a0:	9b01      	ldr	r3, [sp, #4]
 800b3a2:	6919      	ldr	r1, [r3, #16]
 800b3a4:	9b00      	ldr	r3, [sp, #0]
 800b3a6:	691b      	ldr	r3, [r3, #16]
 800b3a8:	1ac9      	subs	r1, r1, r3
 800b3aa:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800b3ae:	1a9b      	subs	r3, r3, r2
 800b3b0:	ec5b ab10 	vmov	sl, fp, d0
 800b3b4:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	bfce      	itee	gt
 800b3bc:	462a      	movgt	r2, r5
 800b3be:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b3c2:	465a      	movle	r2, fp
 800b3c4:	462f      	mov	r7, r5
 800b3c6:	46d9      	mov	r9, fp
 800b3c8:	bfcc      	ite	gt
 800b3ca:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b3ce:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800b3d2:	464b      	mov	r3, r9
 800b3d4:	4652      	mov	r2, sl
 800b3d6:	4620      	mov	r0, r4
 800b3d8:	4639      	mov	r1, r7
 800b3da:	f7f5 fa37 	bl	800084c <__aeabi_ddiv>
 800b3de:	ec41 0b10 	vmov	d0, r0, r1
 800b3e2:	b005      	add	sp, #20
 800b3e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b3e8 <__copybits>:
 800b3e8:	3901      	subs	r1, #1
 800b3ea:	b570      	push	{r4, r5, r6, lr}
 800b3ec:	1149      	asrs	r1, r1, #5
 800b3ee:	6914      	ldr	r4, [r2, #16]
 800b3f0:	3101      	adds	r1, #1
 800b3f2:	f102 0314 	add.w	r3, r2, #20
 800b3f6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b3fa:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b3fe:	1f05      	subs	r5, r0, #4
 800b400:	42a3      	cmp	r3, r4
 800b402:	d30c      	bcc.n	800b41e <__copybits+0x36>
 800b404:	1aa3      	subs	r3, r4, r2
 800b406:	3b11      	subs	r3, #17
 800b408:	f023 0303 	bic.w	r3, r3, #3
 800b40c:	3211      	adds	r2, #17
 800b40e:	42a2      	cmp	r2, r4
 800b410:	bf88      	it	hi
 800b412:	2300      	movhi	r3, #0
 800b414:	4418      	add	r0, r3
 800b416:	2300      	movs	r3, #0
 800b418:	4288      	cmp	r0, r1
 800b41a:	d305      	bcc.n	800b428 <__copybits+0x40>
 800b41c:	bd70      	pop	{r4, r5, r6, pc}
 800b41e:	f853 6b04 	ldr.w	r6, [r3], #4
 800b422:	f845 6f04 	str.w	r6, [r5, #4]!
 800b426:	e7eb      	b.n	800b400 <__copybits+0x18>
 800b428:	f840 3b04 	str.w	r3, [r0], #4
 800b42c:	e7f4      	b.n	800b418 <__copybits+0x30>

0800b42e <__any_on>:
 800b42e:	f100 0214 	add.w	r2, r0, #20
 800b432:	6900      	ldr	r0, [r0, #16]
 800b434:	114b      	asrs	r3, r1, #5
 800b436:	4298      	cmp	r0, r3
 800b438:	b510      	push	{r4, lr}
 800b43a:	db11      	blt.n	800b460 <__any_on+0x32>
 800b43c:	dd0a      	ble.n	800b454 <__any_on+0x26>
 800b43e:	f011 011f 	ands.w	r1, r1, #31
 800b442:	d007      	beq.n	800b454 <__any_on+0x26>
 800b444:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b448:	fa24 f001 	lsr.w	r0, r4, r1
 800b44c:	fa00 f101 	lsl.w	r1, r0, r1
 800b450:	428c      	cmp	r4, r1
 800b452:	d10b      	bne.n	800b46c <__any_on+0x3e>
 800b454:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b458:	4293      	cmp	r3, r2
 800b45a:	d803      	bhi.n	800b464 <__any_on+0x36>
 800b45c:	2000      	movs	r0, #0
 800b45e:	bd10      	pop	{r4, pc}
 800b460:	4603      	mov	r3, r0
 800b462:	e7f7      	b.n	800b454 <__any_on+0x26>
 800b464:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b468:	2900      	cmp	r1, #0
 800b46a:	d0f5      	beq.n	800b458 <__any_on+0x2a>
 800b46c:	2001      	movs	r0, #1
 800b46e:	e7f6      	b.n	800b45e <__any_on+0x30>

0800b470 <sulp>:
 800b470:	b570      	push	{r4, r5, r6, lr}
 800b472:	4604      	mov	r4, r0
 800b474:	460d      	mov	r5, r1
 800b476:	ec45 4b10 	vmov	d0, r4, r5
 800b47a:	4616      	mov	r6, r2
 800b47c:	f7ff feba 	bl	800b1f4 <__ulp>
 800b480:	ec51 0b10 	vmov	r0, r1, d0
 800b484:	b17e      	cbz	r6, 800b4a6 <sulp+0x36>
 800b486:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800b48a:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800b48e:	2b00      	cmp	r3, #0
 800b490:	dd09      	ble.n	800b4a6 <sulp+0x36>
 800b492:	051b      	lsls	r3, r3, #20
 800b494:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800b498:	2400      	movs	r4, #0
 800b49a:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800b49e:	4622      	mov	r2, r4
 800b4a0:	462b      	mov	r3, r5
 800b4a2:	f7f5 f8a9 	bl	80005f8 <__aeabi_dmul>
 800b4a6:	ec41 0b10 	vmov	d0, r0, r1
 800b4aa:	bd70      	pop	{r4, r5, r6, pc}
 800b4ac:	0000      	movs	r0, r0
	...

0800b4b0 <_strtod_l>:
 800b4b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4b4:	b09f      	sub	sp, #124	@ 0x7c
 800b4b6:	460c      	mov	r4, r1
 800b4b8:	9217      	str	r2, [sp, #92]	@ 0x5c
 800b4ba:	2200      	movs	r2, #0
 800b4bc:	921a      	str	r2, [sp, #104]	@ 0x68
 800b4be:	9005      	str	r0, [sp, #20]
 800b4c0:	f04f 0a00 	mov.w	sl, #0
 800b4c4:	f04f 0b00 	mov.w	fp, #0
 800b4c8:	460a      	mov	r2, r1
 800b4ca:	9219      	str	r2, [sp, #100]	@ 0x64
 800b4cc:	7811      	ldrb	r1, [r2, #0]
 800b4ce:	292b      	cmp	r1, #43	@ 0x2b
 800b4d0:	d04a      	beq.n	800b568 <_strtod_l+0xb8>
 800b4d2:	d838      	bhi.n	800b546 <_strtod_l+0x96>
 800b4d4:	290d      	cmp	r1, #13
 800b4d6:	d832      	bhi.n	800b53e <_strtod_l+0x8e>
 800b4d8:	2908      	cmp	r1, #8
 800b4da:	d832      	bhi.n	800b542 <_strtod_l+0x92>
 800b4dc:	2900      	cmp	r1, #0
 800b4de:	d03b      	beq.n	800b558 <_strtod_l+0xa8>
 800b4e0:	2200      	movs	r2, #0
 800b4e2:	920b      	str	r2, [sp, #44]	@ 0x2c
 800b4e4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800b4e6:	782a      	ldrb	r2, [r5, #0]
 800b4e8:	2a30      	cmp	r2, #48	@ 0x30
 800b4ea:	f040 80b3 	bne.w	800b654 <_strtod_l+0x1a4>
 800b4ee:	786a      	ldrb	r2, [r5, #1]
 800b4f0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b4f4:	2a58      	cmp	r2, #88	@ 0x58
 800b4f6:	d16e      	bne.n	800b5d6 <_strtod_l+0x126>
 800b4f8:	9302      	str	r3, [sp, #8]
 800b4fa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b4fc:	9301      	str	r3, [sp, #4]
 800b4fe:	ab1a      	add	r3, sp, #104	@ 0x68
 800b500:	9300      	str	r3, [sp, #0]
 800b502:	4a8e      	ldr	r2, [pc, #568]	@ (800b73c <_strtod_l+0x28c>)
 800b504:	9805      	ldr	r0, [sp, #20]
 800b506:	ab1b      	add	r3, sp, #108	@ 0x6c
 800b508:	a919      	add	r1, sp, #100	@ 0x64
 800b50a:	f001 fd03 	bl	800cf14 <__gethex>
 800b50e:	f010 060f 	ands.w	r6, r0, #15
 800b512:	4604      	mov	r4, r0
 800b514:	d005      	beq.n	800b522 <_strtod_l+0x72>
 800b516:	2e06      	cmp	r6, #6
 800b518:	d128      	bne.n	800b56c <_strtod_l+0xbc>
 800b51a:	3501      	adds	r5, #1
 800b51c:	2300      	movs	r3, #0
 800b51e:	9519      	str	r5, [sp, #100]	@ 0x64
 800b520:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b522:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b524:	2b00      	cmp	r3, #0
 800b526:	f040 858e 	bne.w	800c046 <_strtod_l+0xb96>
 800b52a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b52c:	b1cb      	cbz	r3, 800b562 <_strtod_l+0xb2>
 800b52e:	4652      	mov	r2, sl
 800b530:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800b534:	ec43 2b10 	vmov	d0, r2, r3
 800b538:	b01f      	add	sp, #124	@ 0x7c
 800b53a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b53e:	2920      	cmp	r1, #32
 800b540:	d1ce      	bne.n	800b4e0 <_strtod_l+0x30>
 800b542:	3201      	adds	r2, #1
 800b544:	e7c1      	b.n	800b4ca <_strtod_l+0x1a>
 800b546:	292d      	cmp	r1, #45	@ 0x2d
 800b548:	d1ca      	bne.n	800b4e0 <_strtod_l+0x30>
 800b54a:	2101      	movs	r1, #1
 800b54c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800b54e:	1c51      	adds	r1, r2, #1
 800b550:	9119      	str	r1, [sp, #100]	@ 0x64
 800b552:	7852      	ldrb	r2, [r2, #1]
 800b554:	2a00      	cmp	r2, #0
 800b556:	d1c5      	bne.n	800b4e4 <_strtod_l+0x34>
 800b558:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b55a:	9419      	str	r4, [sp, #100]	@ 0x64
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	f040 8570 	bne.w	800c042 <_strtod_l+0xb92>
 800b562:	4652      	mov	r2, sl
 800b564:	465b      	mov	r3, fp
 800b566:	e7e5      	b.n	800b534 <_strtod_l+0x84>
 800b568:	2100      	movs	r1, #0
 800b56a:	e7ef      	b.n	800b54c <_strtod_l+0x9c>
 800b56c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800b56e:	b13a      	cbz	r2, 800b580 <_strtod_l+0xd0>
 800b570:	2135      	movs	r1, #53	@ 0x35
 800b572:	a81c      	add	r0, sp, #112	@ 0x70
 800b574:	f7ff ff38 	bl	800b3e8 <__copybits>
 800b578:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b57a:	9805      	ldr	r0, [sp, #20]
 800b57c:	f7ff fb06 	bl	800ab8c <_Bfree>
 800b580:	3e01      	subs	r6, #1
 800b582:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800b584:	2e04      	cmp	r6, #4
 800b586:	d806      	bhi.n	800b596 <_strtod_l+0xe6>
 800b588:	e8df f006 	tbb	[pc, r6]
 800b58c:	201d0314 	.word	0x201d0314
 800b590:	14          	.byte	0x14
 800b591:	00          	.byte	0x00
 800b592:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800b596:	05e1      	lsls	r1, r4, #23
 800b598:	bf48      	it	mi
 800b59a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800b59e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b5a2:	0d1b      	lsrs	r3, r3, #20
 800b5a4:	051b      	lsls	r3, r3, #20
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d1bb      	bne.n	800b522 <_strtod_l+0x72>
 800b5aa:	f7fe fbdd 	bl	8009d68 <__errno>
 800b5ae:	2322      	movs	r3, #34	@ 0x22
 800b5b0:	6003      	str	r3, [r0, #0]
 800b5b2:	e7b6      	b.n	800b522 <_strtod_l+0x72>
 800b5b4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800b5b8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800b5bc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800b5c0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800b5c4:	e7e7      	b.n	800b596 <_strtod_l+0xe6>
 800b5c6:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800b744 <_strtod_l+0x294>
 800b5ca:	e7e4      	b.n	800b596 <_strtod_l+0xe6>
 800b5cc:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800b5d0:	f04f 3aff 	mov.w	sl, #4294967295
 800b5d4:	e7df      	b.n	800b596 <_strtod_l+0xe6>
 800b5d6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b5d8:	1c5a      	adds	r2, r3, #1
 800b5da:	9219      	str	r2, [sp, #100]	@ 0x64
 800b5dc:	785b      	ldrb	r3, [r3, #1]
 800b5de:	2b30      	cmp	r3, #48	@ 0x30
 800b5e0:	d0f9      	beq.n	800b5d6 <_strtod_l+0x126>
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d09d      	beq.n	800b522 <_strtod_l+0x72>
 800b5e6:	2301      	movs	r3, #1
 800b5e8:	9309      	str	r3, [sp, #36]	@ 0x24
 800b5ea:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b5ec:	930c      	str	r3, [sp, #48]	@ 0x30
 800b5ee:	2300      	movs	r3, #0
 800b5f0:	9308      	str	r3, [sp, #32]
 800b5f2:	930a      	str	r3, [sp, #40]	@ 0x28
 800b5f4:	461f      	mov	r7, r3
 800b5f6:	220a      	movs	r2, #10
 800b5f8:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800b5fa:	7805      	ldrb	r5, [r0, #0]
 800b5fc:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800b600:	b2d9      	uxtb	r1, r3
 800b602:	2909      	cmp	r1, #9
 800b604:	d928      	bls.n	800b658 <_strtod_l+0x1a8>
 800b606:	494e      	ldr	r1, [pc, #312]	@ (800b740 <_strtod_l+0x290>)
 800b608:	2201      	movs	r2, #1
 800b60a:	f7fe fb2b 	bl	8009c64 <strncmp>
 800b60e:	2800      	cmp	r0, #0
 800b610:	d032      	beq.n	800b678 <_strtod_l+0x1c8>
 800b612:	2000      	movs	r0, #0
 800b614:	462a      	mov	r2, r5
 800b616:	4681      	mov	r9, r0
 800b618:	463d      	mov	r5, r7
 800b61a:	4603      	mov	r3, r0
 800b61c:	2a65      	cmp	r2, #101	@ 0x65
 800b61e:	d001      	beq.n	800b624 <_strtod_l+0x174>
 800b620:	2a45      	cmp	r2, #69	@ 0x45
 800b622:	d114      	bne.n	800b64e <_strtod_l+0x19e>
 800b624:	b91d      	cbnz	r5, 800b62e <_strtod_l+0x17e>
 800b626:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b628:	4302      	orrs	r2, r0
 800b62a:	d095      	beq.n	800b558 <_strtod_l+0xa8>
 800b62c:	2500      	movs	r5, #0
 800b62e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800b630:	1c62      	adds	r2, r4, #1
 800b632:	9219      	str	r2, [sp, #100]	@ 0x64
 800b634:	7862      	ldrb	r2, [r4, #1]
 800b636:	2a2b      	cmp	r2, #43	@ 0x2b
 800b638:	d077      	beq.n	800b72a <_strtod_l+0x27a>
 800b63a:	2a2d      	cmp	r2, #45	@ 0x2d
 800b63c:	d07b      	beq.n	800b736 <_strtod_l+0x286>
 800b63e:	f04f 0c00 	mov.w	ip, #0
 800b642:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800b646:	2909      	cmp	r1, #9
 800b648:	f240 8082 	bls.w	800b750 <_strtod_l+0x2a0>
 800b64c:	9419      	str	r4, [sp, #100]	@ 0x64
 800b64e:	f04f 0800 	mov.w	r8, #0
 800b652:	e0a2      	b.n	800b79a <_strtod_l+0x2ea>
 800b654:	2300      	movs	r3, #0
 800b656:	e7c7      	b.n	800b5e8 <_strtod_l+0x138>
 800b658:	2f08      	cmp	r7, #8
 800b65a:	bfd5      	itete	le
 800b65c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800b65e:	9908      	ldrgt	r1, [sp, #32]
 800b660:	fb02 3301 	mlale	r3, r2, r1, r3
 800b664:	fb02 3301 	mlagt	r3, r2, r1, r3
 800b668:	f100 0001 	add.w	r0, r0, #1
 800b66c:	bfd4      	ite	le
 800b66e:	930a      	strle	r3, [sp, #40]	@ 0x28
 800b670:	9308      	strgt	r3, [sp, #32]
 800b672:	3701      	adds	r7, #1
 800b674:	9019      	str	r0, [sp, #100]	@ 0x64
 800b676:	e7bf      	b.n	800b5f8 <_strtod_l+0x148>
 800b678:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b67a:	1c5a      	adds	r2, r3, #1
 800b67c:	9219      	str	r2, [sp, #100]	@ 0x64
 800b67e:	785a      	ldrb	r2, [r3, #1]
 800b680:	b37f      	cbz	r7, 800b6e2 <_strtod_l+0x232>
 800b682:	4681      	mov	r9, r0
 800b684:	463d      	mov	r5, r7
 800b686:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800b68a:	2b09      	cmp	r3, #9
 800b68c:	d912      	bls.n	800b6b4 <_strtod_l+0x204>
 800b68e:	2301      	movs	r3, #1
 800b690:	e7c4      	b.n	800b61c <_strtod_l+0x16c>
 800b692:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b694:	1c5a      	adds	r2, r3, #1
 800b696:	9219      	str	r2, [sp, #100]	@ 0x64
 800b698:	785a      	ldrb	r2, [r3, #1]
 800b69a:	3001      	adds	r0, #1
 800b69c:	2a30      	cmp	r2, #48	@ 0x30
 800b69e:	d0f8      	beq.n	800b692 <_strtod_l+0x1e2>
 800b6a0:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800b6a4:	2b08      	cmp	r3, #8
 800b6a6:	f200 84d3 	bhi.w	800c050 <_strtod_l+0xba0>
 800b6aa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b6ac:	930c      	str	r3, [sp, #48]	@ 0x30
 800b6ae:	4681      	mov	r9, r0
 800b6b0:	2000      	movs	r0, #0
 800b6b2:	4605      	mov	r5, r0
 800b6b4:	3a30      	subs	r2, #48	@ 0x30
 800b6b6:	f100 0301 	add.w	r3, r0, #1
 800b6ba:	d02a      	beq.n	800b712 <_strtod_l+0x262>
 800b6bc:	4499      	add	r9, r3
 800b6be:	eb00 0c05 	add.w	ip, r0, r5
 800b6c2:	462b      	mov	r3, r5
 800b6c4:	210a      	movs	r1, #10
 800b6c6:	4563      	cmp	r3, ip
 800b6c8:	d10d      	bne.n	800b6e6 <_strtod_l+0x236>
 800b6ca:	1c69      	adds	r1, r5, #1
 800b6cc:	4401      	add	r1, r0
 800b6ce:	4428      	add	r0, r5
 800b6d0:	2808      	cmp	r0, #8
 800b6d2:	dc16      	bgt.n	800b702 <_strtod_l+0x252>
 800b6d4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800b6d6:	230a      	movs	r3, #10
 800b6d8:	fb03 2300 	mla	r3, r3, r0, r2
 800b6dc:	930a      	str	r3, [sp, #40]	@ 0x28
 800b6de:	2300      	movs	r3, #0
 800b6e0:	e018      	b.n	800b714 <_strtod_l+0x264>
 800b6e2:	4638      	mov	r0, r7
 800b6e4:	e7da      	b.n	800b69c <_strtod_l+0x1ec>
 800b6e6:	2b08      	cmp	r3, #8
 800b6e8:	f103 0301 	add.w	r3, r3, #1
 800b6ec:	dc03      	bgt.n	800b6f6 <_strtod_l+0x246>
 800b6ee:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800b6f0:	434e      	muls	r6, r1
 800b6f2:	960a      	str	r6, [sp, #40]	@ 0x28
 800b6f4:	e7e7      	b.n	800b6c6 <_strtod_l+0x216>
 800b6f6:	2b10      	cmp	r3, #16
 800b6f8:	bfde      	ittt	le
 800b6fa:	9e08      	ldrle	r6, [sp, #32]
 800b6fc:	434e      	mulle	r6, r1
 800b6fe:	9608      	strle	r6, [sp, #32]
 800b700:	e7e1      	b.n	800b6c6 <_strtod_l+0x216>
 800b702:	280f      	cmp	r0, #15
 800b704:	dceb      	bgt.n	800b6de <_strtod_l+0x22e>
 800b706:	9808      	ldr	r0, [sp, #32]
 800b708:	230a      	movs	r3, #10
 800b70a:	fb03 2300 	mla	r3, r3, r0, r2
 800b70e:	9308      	str	r3, [sp, #32]
 800b710:	e7e5      	b.n	800b6de <_strtod_l+0x22e>
 800b712:	4629      	mov	r1, r5
 800b714:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b716:	1c50      	adds	r0, r2, #1
 800b718:	9019      	str	r0, [sp, #100]	@ 0x64
 800b71a:	7852      	ldrb	r2, [r2, #1]
 800b71c:	4618      	mov	r0, r3
 800b71e:	460d      	mov	r5, r1
 800b720:	e7b1      	b.n	800b686 <_strtod_l+0x1d6>
 800b722:	f04f 0900 	mov.w	r9, #0
 800b726:	2301      	movs	r3, #1
 800b728:	e77d      	b.n	800b626 <_strtod_l+0x176>
 800b72a:	f04f 0c00 	mov.w	ip, #0
 800b72e:	1ca2      	adds	r2, r4, #2
 800b730:	9219      	str	r2, [sp, #100]	@ 0x64
 800b732:	78a2      	ldrb	r2, [r4, #2]
 800b734:	e785      	b.n	800b642 <_strtod_l+0x192>
 800b736:	f04f 0c01 	mov.w	ip, #1
 800b73a:	e7f8      	b.n	800b72e <_strtod_l+0x27e>
 800b73c:	0800e028 	.word	0x0800e028
 800b740:	0800e010 	.word	0x0800e010
 800b744:	7ff00000 	.word	0x7ff00000
 800b748:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b74a:	1c51      	adds	r1, r2, #1
 800b74c:	9119      	str	r1, [sp, #100]	@ 0x64
 800b74e:	7852      	ldrb	r2, [r2, #1]
 800b750:	2a30      	cmp	r2, #48	@ 0x30
 800b752:	d0f9      	beq.n	800b748 <_strtod_l+0x298>
 800b754:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800b758:	2908      	cmp	r1, #8
 800b75a:	f63f af78 	bhi.w	800b64e <_strtod_l+0x19e>
 800b75e:	3a30      	subs	r2, #48	@ 0x30
 800b760:	920e      	str	r2, [sp, #56]	@ 0x38
 800b762:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b764:	920f      	str	r2, [sp, #60]	@ 0x3c
 800b766:	f04f 080a 	mov.w	r8, #10
 800b76a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b76c:	1c56      	adds	r6, r2, #1
 800b76e:	9619      	str	r6, [sp, #100]	@ 0x64
 800b770:	7852      	ldrb	r2, [r2, #1]
 800b772:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800b776:	f1be 0f09 	cmp.w	lr, #9
 800b77a:	d939      	bls.n	800b7f0 <_strtod_l+0x340>
 800b77c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800b77e:	1a76      	subs	r6, r6, r1
 800b780:	2e08      	cmp	r6, #8
 800b782:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800b786:	dc03      	bgt.n	800b790 <_strtod_l+0x2e0>
 800b788:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800b78a:	4588      	cmp	r8, r1
 800b78c:	bfa8      	it	ge
 800b78e:	4688      	movge	r8, r1
 800b790:	f1bc 0f00 	cmp.w	ip, #0
 800b794:	d001      	beq.n	800b79a <_strtod_l+0x2ea>
 800b796:	f1c8 0800 	rsb	r8, r8, #0
 800b79a:	2d00      	cmp	r5, #0
 800b79c:	d14e      	bne.n	800b83c <_strtod_l+0x38c>
 800b79e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b7a0:	4308      	orrs	r0, r1
 800b7a2:	f47f aebe 	bne.w	800b522 <_strtod_l+0x72>
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	f47f aed6 	bne.w	800b558 <_strtod_l+0xa8>
 800b7ac:	2a69      	cmp	r2, #105	@ 0x69
 800b7ae:	d028      	beq.n	800b802 <_strtod_l+0x352>
 800b7b0:	dc25      	bgt.n	800b7fe <_strtod_l+0x34e>
 800b7b2:	2a49      	cmp	r2, #73	@ 0x49
 800b7b4:	d025      	beq.n	800b802 <_strtod_l+0x352>
 800b7b6:	2a4e      	cmp	r2, #78	@ 0x4e
 800b7b8:	f47f aece 	bne.w	800b558 <_strtod_l+0xa8>
 800b7bc:	499b      	ldr	r1, [pc, #620]	@ (800ba2c <_strtod_l+0x57c>)
 800b7be:	a819      	add	r0, sp, #100	@ 0x64
 800b7c0:	f001 fdca 	bl	800d358 <__match>
 800b7c4:	2800      	cmp	r0, #0
 800b7c6:	f43f aec7 	beq.w	800b558 <_strtod_l+0xa8>
 800b7ca:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b7cc:	781b      	ldrb	r3, [r3, #0]
 800b7ce:	2b28      	cmp	r3, #40	@ 0x28
 800b7d0:	d12e      	bne.n	800b830 <_strtod_l+0x380>
 800b7d2:	4997      	ldr	r1, [pc, #604]	@ (800ba30 <_strtod_l+0x580>)
 800b7d4:	aa1c      	add	r2, sp, #112	@ 0x70
 800b7d6:	a819      	add	r0, sp, #100	@ 0x64
 800b7d8:	f001 fdd2 	bl	800d380 <__hexnan>
 800b7dc:	2805      	cmp	r0, #5
 800b7de:	d127      	bne.n	800b830 <_strtod_l+0x380>
 800b7e0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b7e2:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800b7e6:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800b7ea:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800b7ee:	e698      	b.n	800b522 <_strtod_l+0x72>
 800b7f0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800b7f2:	fb08 2101 	mla	r1, r8, r1, r2
 800b7f6:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800b7fa:	920e      	str	r2, [sp, #56]	@ 0x38
 800b7fc:	e7b5      	b.n	800b76a <_strtod_l+0x2ba>
 800b7fe:	2a6e      	cmp	r2, #110	@ 0x6e
 800b800:	e7da      	b.n	800b7b8 <_strtod_l+0x308>
 800b802:	498c      	ldr	r1, [pc, #560]	@ (800ba34 <_strtod_l+0x584>)
 800b804:	a819      	add	r0, sp, #100	@ 0x64
 800b806:	f001 fda7 	bl	800d358 <__match>
 800b80a:	2800      	cmp	r0, #0
 800b80c:	f43f aea4 	beq.w	800b558 <_strtod_l+0xa8>
 800b810:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b812:	4989      	ldr	r1, [pc, #548]	@ (800ba38 <_strtod_l+0x588>)
 800b814:	3b01      	subs	r3, #1
 800b816:	a819      	add	r0, sp, #100	@ 0x64
 800b818:	9319      	str	r3, [sp, #100]	@ 0x64
 800b81a:	f001 fd9d 	bl	800d358 <__match>
 800b81e:	b910      	cbnz	r0, 800b826 <_strtod_l+0x376>
 800b820:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b822:	3301      	adds	r3, #1
 800b824:	9319      	str	r3, [sp, #100]	@ 0x64
 800b826:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800ba48 <_strtod_l+0x598>
 800b82a:	f04f 0a00 	mov.w	sl, #0
 800b82e:	e678      	b.n	800b522 <_strtod_l+0x72>
 800b830:	4882      	ldr	r0, [pc, #520]	@ (800ba3c <_strtod_l+0x58c>)
 800b832:	f001 fae1 	bl	800cdf8 <nan>
 800b836:	ec5b ab10 	vmov	sl, fp, d0
 800b83a:	e672      	b.n	800b522 <_strtod_l+0x72>
 800b83c:	eba8 0309 	sub.w	r3, r8, r9
 800b840:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800b842:	9309      	str	r3, [sp, #36]	@ 0x24
 800b844:	2f00      	cmp	r7, #0
 800b846:	bf08      	it	eq
 800b848:	462f      	moveq	r7, r5
 800b84a:	2d10      	cmp	r5, #16
 800b84c:	462c      	mov	r4, r5
 800b84e:	bfa8      	it	ge
 800b850:	2410      	movge	r4, #16
 800b852:	f7f4 fe57 	bl	8000504 <__aeabi_ui2d>
 800b856:	2d09      	cmp	r5, #9
 800b858:	4682      	mov	sl, r0
 800b85a:	468b      	mov	fp, r1
 800b85c:	dc13      	bgt.n	800b886 <_strtod_l+0x3d6>
 800b85e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b860:	2b00      	cmp	r3, #0
 800b862:	f43f ae5e 	beq.w	800b522 <_strtod_l+0x72>
 800b866:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b868:	dd78      	ble.n	800b95c <_strtod_l+0x4ac>
 800b86a:	2b16      	cmp	r3, #22
 800b86c:	dc5f      	bgt.n	800b92e <_strtod_l+0x47e>
 800b86e:	4974      	ldr	r1, [pc, #464]	@ (800ba40 <_strtod_l+0x590>)
 800b870:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b874:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b878:	4652      	mov	r2, sl
 800b87a:	465b      	mov	r3, fp
 800b87c:	f7f4 febc 	bl	80005f8 <__aeabi_dmul>
 800b880:	4682      	mov	sl, r0
 800b882:	468b      	mov	fp, r1
 800b884:	e64d      	b.n	800b522 <_strtod_l+0x72>
 800b886:	4b6e      	ldr	r3, [pc, #440]	@ (800ba40 <_strtod_l+0x590>)
 800b888:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b88c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800b890:	f7f4 feb2 	bl	80005f8 <__aeabi_dmul>
 800b894:	4682      	mov	sl, r0
 800b896:	9808      	ldr	r0, [sp, #32]
 800b898:	468b      	mov	fp, r1
 800b89a:	f7f4 fe33 	bl	8000504 <__aeabi_ui2d>
 800b89e:	4602      	mov	r2, r0
 800b8a0:	460b      	mov	r3, r1
 800b8a2:	4650      	mov	r0, sl
 800b8a4:	4659      	mov	r1, fp
 800b8a6:	f7f4 fcf1 	bl	800028c <__adddf3>
 800b8aa:	2d0f      	cmp	r5, #15
 800b8ac:	4682      	mov	sl, r0
 800b8ae:	468b      	mov	fp, r1
 800b8b0:	ddd5      	ble.n	800b85e <_strtod_l+0x3ae>
 800b8b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b8b4:	1b2c      	subs	r4, r5, r4
 800b8b6:	441c      	add	r4, r3
 800b8b8:	2c00      	cmp	r4, #0
 800b8ba:	f340 8096 	ble.w	800b9ea <_strtod_l+0x53a>
 800b8be:	f014 030f 	ands.w	r3, r4, #15
 800b8c2:	d00a      	beq.n	800b8da <_strtod_l+0x42a>
 800b8c4:	495e      	ldr	r1, [pc, #376]	@ (800ba40 <_strtod_l+0x590>)
 800b8c6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b8ca:	4652      	mov	r2, sl
 800b8cc:	465b      	mov	r3, fp
 800b8ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b8d2:	f7f4 fe91 	bl	80005f8 <__aeabi_dmul>
 800b8d6:	4682      	mov	sl, r0
 800b8d8:	468b      	mov	fp, r1
 800b8da:	f034 040f 	bics.w	r4, r4, #15
 800b8de:	d073      	beq.n	800b9c8 <_strtod_l+0x518>
 800b8e0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800b8e4:	dd48      	ble.n	800b978 <_strtod_l+0x4c8>
 800b8e6:	2400      	movs	r4, #0
 800b8e8:	46a0      	mov	r8, r4
 800b8ea:	940a      	str	r4, [sp, #40]	@ 0x28
 800b8ec:	46a1      	mov	r9, r4
 800b8ee:	9a05      	ldr	r2, [sp, #20]
 800b8f0:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800ba48 <_strtod_l+0x598>
 800b8f4:	2322      	movs	r3, #34	@ 0x22
 800b8f6:	6013      	str	r3, [r2, #0]
 800b8f8:	f04f 0a00 	mov.w	sl, #0
 800b8fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	f43f ae0f 	beq.w	800b522 <_strtod_l+0x72>
 800b904:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b906:	9805      	ldr	r0, [sp, #20]
 800b908:	f7ff f940 	bl	800ab8c <_Bfree>
 800b90c:	9805      	ldr	r0, [sp, #20]
 800b90e:	4649      	mov	r1, r9
 800b910:	f7ff f93c 	bl	800ab8c <_Bfree>
 800b914:	9805      	ldr	r0, [sp, #20]
 800b916:	4641      	mov	r1, r8
 800b918:	f7ff f938 	bl	800ab8c <_Bfree>
 800b91c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b91e:	9805      	ldr	r0, [sp, #20]
 800b920:	f7ff f934 	bl	800ab8c <_Bfree>
 800b924:	9805      	ldr	r0, [sp, #20]
 800b926:	4621      	mov	r1, r4
 800b928:	f7ff f930 	bl	800ab8c <_Bfree>
 800b92c:	e5f9      	b.n	800b522 <_strtod_l+0x72>
 800b92e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b930:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800b934:	4293      	cmp	r3, r2
 800b936:	dbbc      	blt.n	800b8b2 <_strtod_l+0x402>
 800b938:	4c41      	ldr	r4, [pc, #260]	@ (800ba40 <_strtod_l+0x590>)
 800b93a:	f1c5 050f 	rsb	r5, r5, #15
 800b93e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800b942:	4652      	mov	r2, sl
 800b944:	465b      	mov	r3, fp
 800b946:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b94a:	f7f4 fe55 	bl	80005f8 <__aeabi_dmul>
 800b94e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b950:	1b5d      	subs	r5, r3, r5
 800b952:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800b956:	e9d4 2300 	ldrd	r2, r3, [r4]
 800b95a:	e78f      	b.n	800b87c <_strtod_l+0x3cc>
 800b95c:	3316      	adds	r3, #22
 800b95e:	dba8      	blt.n	800b8b2 <_strtod_l+0x402>
 800b960:	4b37      	ldr	r3, [pc, #220]	@ (800ba40 <_strtod_l+0x590>)
 800b962:	eba9 0808 	sub.w	r8, r9, r8
 800b966:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800b96a:	e9d8 2300 	ldrd	r2, r3, [r8]
 800b96e:	4650      	mov	r0, sl
 800b970:	4659      	mov	r1, fp
 800b972:	f7f4 ff6b 	bl	800084c <__aeabi_ddiv>
 800b976:	e783      	b.n	800b880 <_strtod_l+0x3d0>
 800b978:	4b32      	ldr	r3, [pc, #200]	@ (800ba44 <_strtod_l+0x594>)
 800b97a:	9308      	str	r3, [sp, #32]
 800b97c:	2300      	movs	r3, #0
 800b97e:	1124      	asrs	r4, r4, #4
 800b980:	4650      	mov	r0, sl
 800b982:	4659      	mov	r1, fp
 800b984:	461e      	mov	r6, r3
 800b986:	2c01      	cmp	r4, #1
 800b988:	dc21      	bgt.n	800b9ce <_strtod_l+0x51e>
 800b98a:	b10b      	cbz	r3, 800b990 <_strtod_l+0x4e0>
 800b98c:	4682      	mov	sl, r0
 800b98e:	468b      	mov	fp, r1
 800b990:	492c      	ldr	r1, [pc, #176]	@ (800ba44 <_strtod_l+0x594>)
 800b992:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800b996:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800b99a:	4652      	mov	r2, sl
 800b99c:	465b      	mov	r3, fp
 800b99e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b9a2:	f7f4 fe29 	bl	80005f8 <__aeabi_dmul>
 800b9a6:	4b28      	ldr	r3, [pc, #160]	@ (800ba48 <_strtod_l+0x598>)
 800b9a8:	460a      	mov	r2, r1
 800b9aa:	400b      	ands	r3, r1
 800b9ac:	4927      	ldr	r1, [pc, #156]	@ (800ba4c <_strtod_l+0x59c>)
 800b9ae:	428b      	cmp	r3, r1
 800b9b0:	4682      	mov	sl, r0
 800b9b2:	d898      	bhi.n	800b8e6 <_strtod_l+0x436>
 800b9b4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800b9b8:	428b      	cmp	r3, r1
 800b9ba:	bf86      	itte	hi
 800b9bc:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800ba50 <_strtod_l+0x5a0>
 800b9c0:	f04f 3aff 	movhi.w	sl, #4294967295
 800b9c4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800b9c8:	2300      	movs	r3, #0
 800b9ca:	9308      	str	r3, [sp, #32]
 800b9cc:	e07a      	b.n	800bac4 <_strtod_l+0x614>
 800b9ce:	07e2      	lsls	r2, r4, #31
 800b9d0:	d505      	bpl.n	800b9de <_strtod_l+0x52e>
 800b9d2:	9b08      	ldr	r3, [sp, #32]
 800b9d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9d8:	f7f4 fe0e 	bl	80005f8 <__aeabi_dmul>
 800b9dc:	2301      	movs	r3, #1
 800b9de:	9a08      	ldr	r2, [sp, #32]
 800b9e0:	3208      	adds	r2, #8
 800b9e2:	3601      	adds	r6, #1
 800b9e4:	1064      	asrs	r4, r4, #1
 800b9e6:	9208      	str	r2, [sp, #32]
 800b9e8:	e7cd      	b.n	800b986 <_strtod_l+0x4d6>
 800b9ea:	d0ed      	beq.n	800b9c8 <_strtod_l+0x518>
 800b9ec:	4264      	negs	r4, r4
 800b9ee:	f014 020f 	ands.w	r2, r4, #15
 800b9f2:	d00a      	beq.n	800ba0a <_strtod_l+0x55a>
 800b9f4:	4b12      	ldr	r3, [pc, #72]	@ (800ba40 <_strtod_l+0x590>)
 800b9f6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b9fa:	4650      	mov	r0, sl
 800b9fc:	4659      	mov	r1, fp
 800b9fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba02:	f7f4 ff23 	bl	800084c <__aeabi_ddiv>
 800ba06:	4682      	mov	sl, r0
 800ba08:	468b      	mov	fp, r1
 800ba0a:	1124      	asrs	r4, r4, #4
 800ba0c:	d0dc      	beq.n	800b9c8 <_strtod_l+0x518>
 800ba0e:	2c1f      	cmp	r4, #31
 800ba10:	dd20      	ble.n	800ba54 <_strtod_l+0x5a4>
 800ba12:	2400      	movs	r4, #0
 800ba14:	46a0      	mov	r8, r4
 800ba16:	940a      	str	r4, [sp, #40]	@ 0x28
 800ba18:	46a1      	mov	r9, r4
 800ba1a:	9a05      	ldr	r2, [sp, #20]
 800ba1c:	2322      	movs	r3, #34	@ 0x22
 800ba1e:	f04f 0a00 	mov.w	sl, #0
 800ba22:	f04f 0b00 	mov.w	fp, #0
 800ba26:	6013      	str	r3, [r2, #0]
 800ba28:	e768      	b.n	800b8fc <_strtod_l+0x44c>
 800ba2a:	bf00      	nop
 800ba2c:	0800ddfd 	.word	0x0800ddfd
 800ba30:	0800e014 	.word	0x0800e014
 800ba34:	0800ddf5 	.word	0x0800ddf5
 800ba38:	0800de2a 	.word	0x0800de2a
 800ba3c:	0800e1d8 	.word	0x0800e1d8
 800ba40:	0800df48 	.word	0x0800df48
 800ba44:	0800df20 	.word	0x0800df20
 800ba48:	7ff00000 	.word	0x7ff00000
 800ba4c:	7ca00000 	.word	0x7ca00000
 800ba50:	7fefffff 	.word	0x7fefffff
 800ba54:	f014 0310 	ands.w	r3, r4, #16
 800ba58:	bf18      	it	ne
 800ba5a:	236a      	movne	r3, #106	@ 0x6a
 800ba5c:	4ea9      	ldr	r6, [pc, #676]	@ (800bd04 <_strtod_l+0x854>)
 800ba5e:	9308      	str	r3, [sp, #32]
 800ba60:	4650      	mov	r0, sl
 800ba62:	4659      	mov	r1, fp
 800ba64:	2300      	movs	r3, #0
 800ba66:	07e2      	lsls	r2, r4, #31
 800ba68:	d504      	bpl.n	800ba74 <_strtod_l+0x5c4>
 800ba6a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ba6e:	f7f4 fdc3 	bl	80005f8 <__aeabi_dmul>
 800ba72:	2301      	movs	r3, #1
 800ba74:	1064      	asrs	r4, r4, #1
 800ba76:	f106 0608 	add.w	r6, r6, #8
 800ba7a:	d1f4      	bne.n	800ba66 <_strtod_l+0x5b6>
 800ba7c:	b10b      	cbz	r3, 800ba82 <_strtod_l+0x5d2>
 800ba7e:	4682      	mov	sl, r0
 800ba80:	468b      	mov	fp, r1
 800ba82:	9b08      	ldr	r3, [sp, #32]
 800ba84:	b1b3      	cbz	r3, 800bab4 <_strtod_l+0x604>
 800ba86:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800ba8a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	4659      	mov	r1, fp
 800ba92:	dd0f      	ble.n	800bab4 <_strtod_l+0x604>
 800ba94:	2b1f      	cmp	r3, #31
 800ba96:	dd55      	ble.n	800bb44 <_strtod_l+0x694>
 800ba98:	2b34      	cmp	r3, #52	@ 0x34
 800ba9a:	bfde      	ittt	le
 800ba9c:	f04f 33ff 	movle.w	r3, #4294967295
 800baa0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800baa4:	4093      	lslle	r3, r2
 800baa6:	f04f 0a00 	mov.w	sl, #0
 800baaa:	bfcc      	ite	gt
 800baac:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800bab0:	ea03 0b01 	andle.w	fp, r3, r1
 800bab4:	2200      	movs	r2, #0
 800bab6:	2300      	movs	r3, #0
 800bab8:	4650      	mov	r0, sl
 800baba:	4659      	mov	r1, fp
 800babc:	f7f5 f804 	bl	8000ac8 <__aeabi_dcmpeq>
 800bac0:	2800      	cmp	r0, #0
 800bac2:	d1a6      	bne.n	800ba12 <_strtod_l+0x562>
 800bac4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bac6:	9300      	str	r3, [sp, #0]
 800bac8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800baca:	9805      	ldr	r0, [sp, #20]
 800bacc:	462b      	mov	r3, r5
 800bace:	463a      	mov	r2, r7
 800bad0:	f7ff f8c4 	bl	800ac5c <__s2b>
 800bad4:	900a      	str	r0, [sp, #40]	@ 0x28
 800bad6:	2800      	cmp	r0, #0
 800bad8:	f43f af05 	beq.w	800b8e6 <_strtod_l+0x436>
 800badc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bade:	2a00      	cmp	r2, #0
 800bae0:	eba9 0308 	sub.w	r3, r9, r8
 800bae4:	bfa8      	it	ge
 800bae6:	2300      	movge	r3, #0
 800bae8:	9312      	str	r3, [sp, #72]	@ 0x48
 800baea:	2400      	movs	r4, #0
 800baec:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800baf0:	9316      	str	r3, [sp, #88]	@ 0x58
 800baf2:	46a0      	mov	r8, r4
 800baf4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800baf6:	9805      	ldr	r0, [sp, #20]
 800baf8:	6859      	ldr	r1, [r3, #4]
 800bafa:	f7ff f807 	bl	800ab0c <_Balloc>
 800bafe:	4681      	mov	r9, r0
 800bb00:	2800      	cmp	r0, #0
 800bb02:	f43f aef4 	beq.w	800b8ee <_strtod_l+0x43e>
 800bb06:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bb08:	691a      	ldr	r2, [r3, #16]
 800bb0a:	3202      	adds	r2, #2
 800bb0c:	f103 010c 	add.w	r1, r3, #12
 800bb10:	0092      	lsls	r2, r2, #2
 800bb12:	300c      	adds	r0, #12
 800bb14:	f001 f962 	bl	800cddc <memcpy>
 800bb18:	ec4b ab10 	vmov	d0, sl, fp
 800bb1c:	9805      	ldr	r0, [sp, #20]
 800bb1e:	aa1c      	add	r2, sp, #112	@ 0x70
 800bb20:	a91b      	add	r1, sp, #108	@ 0x6c
 800bb22:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800bb26:	f7ff fbd5 	bl	800b2d4 <__d2b>
 800bb2a:	901a      	str	r0, [sp, #104]	@ 0x68
 800bb2c:	2800      	cmp	r0, #0
 800bb2e:	f43f aede 	beq.w	800b8ee <_strtod_l+0x43e>
 800bb32:	9805      	ldr	r0, [sp, #20]
 800bb34:	2101      	movs	r1, #1
 800bb36:	f7ff f927 	bl	800ad88 <__i2b>
 800bb3a:	4680      	mov	r8, r0
 800bb3c:	b948      	cbnz	r0, 800bb52 <_strtod_l+0x6a2>
 800bb3e:	f04f 0800 	mov.w	r8, #0
 800bb42:	e6d4      	b.n	800b8ee <_strtod_l+0x43e>
 800bb44:	f04f 32ff 	mov.w	r2, #4294967295
 800bb48:	fa02 f303 	lsl.w	r3, r2, r3
 800bb4c:	ea03 0a0a 	and.w	sl, r3, sl
 800bb50:	e7b0      	b.n	800bab4 <_strtod_l+0x604>
 800bb52:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800bb54:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800bb56:	2d00      	cmp	r5, #0
 800bb58:	bfab      	itete	ge
 800bb5a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800bb5c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800bb5e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800bb60:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800bb62:	bfac      	ite	ge
 800bb64:	18ef      	addge	r7, r5, r3
 800bb66:	1b5e      	sublt	r6, r3, r5
 800bb68:	9b08      	ldr	r3, [sp, #32]
 800bb6a:	1aed      	subs	r5, r5, r3
 800bb6c:	4415      	add	r5, r2
 800bb6e:	4b66      	ldr	r3, [pc, #408]	@ (800bd08 <_strtod_l+0x858>)
 800bb70:	3d01      	subs	r5, #1
 800bb72:	429d      	cmp	r5, r3
 800bb74:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800bb78:	da50      	bge.n	800bc1c <_strtod_l+0x76c>
 800bb7a:	1b5b      	subs	r3, r3, r5
 800bb7c:	2b1f      	cmp	r3, #31
 800bb7e:	eba2 0203 	sub.w	r2, r2, r3
 800bb82:	f04f 0101 	mov.w	r1, #1
 800bb86:	dc3d      	bgt.n	800bc04 <_strtod_l+0x754>
 800bb88:	fa01 f303 	lsl.w	r3, r1, r3
 800bb8c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800bb8e:	2300      	movs	r3, #0
 800bb90:	9310      	str	r3, [sp, #64]	@ 0x40
 800bb92:	18bd      	adds	r5, r7, r2
 800bb94:	9b08      	ldr	r3, [sp, #32]
 800bb96:	42af      	cmp	r7, r5
 800bb98:	4416      	add	r6, r2
 800bb9a:	441e      	add	r6, r3
 800bb9c:	463b      	mov	r3, r7
 800bb9e:	bfa8      	it	ge
 800bba0:	462b      	movge	r3, r5
 800bba2:	42b3      	cmp	r3, r6
 800bba4:	bfa8      	it	ge
 800bba6:	4633      	movge	r3, r6
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	bfc2      	ittt	gt
 800bbac:	1aed      	subgt	r5, r5, r3
 800bbae:	1af6      	subgt	r6, r6, r3
 800bbb0:	1aff      	subgt	r7, r7, r3
 800bbb2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	dd16      	ble.n	800bbe6 <_strtod_l+0x736>
 800bbb8:	4641      	mov	r1, r8
 800bbba:	9805      	ldr	r0, [sp, #20]
 800bbbc:	461a      	mov	r2, r3
 800bbbe:	f7ff f9a3 	bl	800af08 <__pow5mult>
 800bbc2:	4680      	mov	r8, r0
 800bbc4:	2800      	cmp	r0, #0
 800bbc6:	d0ba      	beq.n	800bb3e <_strtod_l+0x68e>
 800bbc8:	4601      	mov	r1, r0
 800bbca:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800bbcc:	9805      	ldr	r0, [sp, #20]
 800bbce:	f7ff f8f1 	bl	800adb4 <__multiply>
 800bbd2:	900e      	str	r0, [sp, #56]	@ 0x38
 800bbd4:	2800      	cmp	r0, #0
 800bbd6:	f43f ae8a 	beq.w	800b8ee <_strtod_l+0x43e>
 800bbda:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bbdc:	9805      	ldr	r0, [sp, #20]
 800bbde:	f7fe ffd5 	bl	800ab8c <_Bfree>
 800bbe2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bbe4:	931a      	str	r3, [sp, #104]	@ 0x68
 800bbe6:	2d00      	cmp	r5, #0
 800bbe8:	dc1d      	bgt.n	800bc26 <_strtod_l+0x776>
 800bbea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	dd23      	ble.n	800bc38 <_strtod_l+0x788>
 800bbf0:	4649      	mov	r1, r9
 800bbf2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800bbf4:	9805      	ldr	r0, [sp, #20]
 800bbf6:	f7ff f987 	bl	800af08 <__pow5mult>
 800bbfa:	4681      	mov	r9, r0
 800bbfc:	b9e0      	cbnz	r0, 800bc38 <_strtod_l+0x788>
 800bbfe:	f04f 0900 	mov.w	r9, #0
 800bc02:	e674      	b.n	800b8ee <_strtod_l+0x43e>
 800bc04:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800bc08:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800bc0c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800bc10:	35e2      	adds	r5, #226	@ 0xe2
 800bc12:	fa01 f305 	lsl.w	r3, r1, r5
 800bc16:	9310      	str	r3, [sp, #64]	@ 0x40
 800bc18:	9113      	str	r1, [sp, #76]	@ 0x4c
 800bc1a:	e7ba      	b.n	800bb92 <_strtod_l+0x6e2>
 800bc1c:	2300      	movs	r3, #0
 800bc1e:	9310      	str	r3, [sp, #64]	@ 0x40
 800bc20:	2301      	movs	r3, #1
 800bc22:	9313      	str	r3, [sp, #76]	@ 0x4c
 800bc24:	e7b5      	b.n	800bb92 <_strtod_l+0x6e2>
 800bc26:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bc28:	9805      	ldr	r0, [sp, #20]
 800bc2a:	462a      	mov	r2, r5
 800bc2c:	f7ff f9c6 	bl	800afbc <__lshift>
 800bc30:	901a      	str	r0, [sp, #104]	@ 0x68
 800bc32:	2800      	cmp	r0, #0
 800bc34:	d1d9      	bne.n	800bbea <_strtod_l+0x73a>
 800bc36:	e65a      	b.n	800b8ee <_strtod_l+0x43e>
 800bc38:	2e00      	cmp	r6, #0
 800bc3a:	dd07      	ble.n	800bc4c <_strtod_l+0x79c>
 800bc3c:	4649      	mov	r1, r9
 800bc3e:	9805      	ldr	r0, [sp, #20]
 800bc40:	4632      	mov	r2, r6
 800bc42:	f7ff f9bb 	bl	800afbc <__lshift>
 800bc46:	4681      	mov	r9, r0
 800bc48:	2800      	cmp	r0, #0
 800bc4a:	d0d8      	beq.n	800bbfe <_strtod_l+0x74e>
 800bc4c:	2f00      	cmp	r7, #0
 800bc4e:	dd08      	ble.n	800bc62 <_strtod_l+0x7b2>
 800bc50:	4641      	mov	r1, r8
 800bc52:	9805      	ldr	r0, [sp, #20]
 800bc54:	463a      	mov	r2, r7
 800bc56:	f7ff f9b1 	bl	800afbc <__lshift>
 800bc5a:	4680      	mov	r8, r0
 800bc5c:	2800      	cmp	r0, #0
 800bc5e:	f43f ae46 	beq.w	800b8ee <_strtod_l+0x43e>
 800bc62:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bc64:	9805      	ldr	r0, [sp, #20]
 800bc66:	464a      	mov	r2, r9
 800bc68:	f7ff fa30 	bl	800b0cc <__mdiff>
 800bc6c:	4604      	mov	r4, r0
 800bc6e:	2800      	cmp	r0, #0
 800bc70:	f43f ae3d 	beq.w	800b8ee <_strtod_l+0x43e>
 800bc74:	68c3      	ldr	r3, [r0, #12]
 800bc76:	930f      	str	r3, [sp, #60]	@ 0x3c
 800bc78:	2300      	movs	r3, #0
 800bc7a:	60c3      	str	r3, [r0, #12]
 800bc7c:	4641      	mov	r1, r8
 800bc7e:	f7ff fa09 	bl	800b094 <__mcmp>
 800bc82:	2800      	cmp	r0, #0
 800bc84:	da46      	bge.n	800bd14 <_strtod_l+0x864>
 800bc86:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bc88:	ea53 030a 	orrs.w	r3, r3, sl
 800bc8c:	d16c      	bne.n	800bd68 <_strtod_l+0x8b8>
 800bc8e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d168      	bne.n	800bd68 <_strtod_l+0x8b8>
 800bc96:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800bc9a:	0d1b      	lsrs	r3, r3, #20
 800bc9c:	051b      	lsls	r3, r3, #20
 800bc9e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800bca2:	d961      	bls.n	800bd68 <_strtod_l+0x8b8>
 800bca4:	6963      	ldr	r3, [r4, #20]
 800bca6:	b913      	cbnz	r3, 800bcae <_strtod_l+0x7fe>
 800bca8:	6923      	ldr	r3, [r4, #16]
 800bcaa:	2b01      	cmp	r3, #1
 800bcac:	dd5c      	ble.n	800bd68 <_strtod_l+0x8b8>
 800bcae:	4621      	mov	r1, r4
 800bcb0:	2201      	movs	r2, #1
 800bcb2:	9805      	ldr	r0, [sp, #20]
 800bcb4:	f7ff f982 	bl	800afbc <__lshift>
 800bcb8:	4641      	mov	r1, r8
 800bcba:	4604      	mov	r4, r0
 800bcbc:	f7ff f9ea 	bl	800b094 <__mcmp>
 800bcc0:	2800      	cmp	r0, #0
 800bcc2:	dd51      	ble.n	800bd68 <_strtod_l+0x8b8>
 800bcc4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800bcc8:	9a08      	ldr	r2, [sp, #32]
 800bcca:	0d1b      	lsrs	r3, r3, #20
 800bccc:	051b      	lsls	r3, r3, #20
 800bcce:	2a00      	cmp	r2, #0
 800bcd0:	d06b      	beq.n	800bdaa <_strtod_l+0x8fa>
 800bcd2:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800bcd6:	d868      	bhi.n	800bdaa <_strtod_l+0x8fa>
 800bcd8:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800bcdc:	f67f ae9d 	bls.w	800ba1a <_strtod_l+0x56a>
 800bce0:	4b0a      	ldr	r3, [pc, #40]	@ (800bd0c <_strtod_l+0x85c>)
 800bce2:	4650      	mov	r0, sl
 800bce4:	4659      	mov	r1, fp
 800bce6:	2200      	movs	r2, #0
 800bce8:	f7f4 fc86 	bl	80005f8 <__aeabi_dmul>
 800bcec:	4b08      	ldr	r3, [pc, #32]	@ (800bd10 <_strtod_l+0x860>)
 800bcee:	400b      	ands	r3, r1
 800bcf0:	4682      	mov	sl, r0
 800bcf2:	468b      	mov	fp, r1
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	f47f ae05 	bne.w	800b904 <_strtod_l+0x454>
 800bcfa:	9a05      	ldr	r2, [sp, #20]
 800bcfc:	2322      	movs	r3, #34	@ 0x22
 800bcfe:	6013      	str	r3, [r2, #0]
 800bd00:	e600      	b.n	800b904 <_strtod_l+0x454>
 800bd02:	bf00      	nop
 800bd04:	0800e040 	.word	0x0800e040
 800bd08:	fffffc02 	.word	0xfffffc02
 800bd0c:	39500000 	.word	0x39500000
 800bd10:	7ff00000 	.word	0x7ff00000
 800bd14:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800bd18:	d165      	bne.n	800bde6 <_strtod_l+0x936>
 800bd1a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800bd1c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bd20:	b35a      	cbz	r2, 800bd7a <_strtod_l+0x8ca>
 800bd22:	4a9f      	ldr	r2, [pc, #636]	@ (800bfa0 <_strtod_l+0xaf0>)
 800bd24:	4293      	cmp	r3, r2
 800bd26:	d12b      	bne.n	800bd80 <_strtod_l+0x8d0>
 800bd28:	9b08      	ldr	r3, [sp, #32]
 800bd2a:	4651      	mov	r1, sl
 800bd2c:	b303      	cbz	r3, 800bd70 <_strtod_l+0x8c0>
 800bd2e:	4b9d      	ldr	r3, [pc, #628]	@ (800bfa4 <_strtod_l+0xaf4>)
 800bd30:	465a      	mov	r2, fp
 800bd32:	4013      	ands	r3, r2
 800bd34:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800bd38:	f04f 32ff 	mov.w	r2, #4294967295
 800bd3c:	d81b      	bhi.n	800bd76 <_strtod_l+0x8c6>
 800bd3e:	0d1b      	lsrs	r3, r3, #20
 800bd40:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800bd44:	fa02 f303 	lsl.w	r3, r2, r3
 800bd48:	4299      	cmp	r1, r3
 800bd4a:	d119      	bne.n	800bd80 <_strtod_l+0x8d0>
 800bd4c:	4b96      	ldr	r3, [pc, #600]	@ (800bfa8 <_strtod_l+0xaf8>)
 800bd4e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bd50:	429a      	cmp	r2, r3
 800bd52:	d102      	bne.n	800bd5a <_strtod_l+0x8aa>
 800bd54:	3101      	adds	r1, #1
 800bd56:	f43f adca 	beq.w	800b8ee <_strtod_l+0x43e>
 800bd5a:	4b92      	ldr	r3, [pc, #584]	@ (800bfa4 <_strtod_l+0xaf4>)
 800bd5c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bd5e:	401a      	ands	r2, r3
 800bd60:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800bd64:	f04f 0a00 	mov.w	sl, #0
 800bd68:	9b08      	ldr	r3, [sp, #32]
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d1b8      	bne.n	800bce0 <_strtod_l+0x830>
 800bd6e:	e5c9      	b.n	800b904 <_strtod_l+0x454>
 800bd70:	f04f 33ff 	mov.w	r3, #4294967295
 800bd74:	e7e8      	b.n	800bd48 <_strtod_l+0x898>
 800bd76:	4613      	mov	r3, r2
 800bd78:	e7e6      	b.n	800bd48 <_strtod_l+0x898>
 800bd7a:	ea53 030a 	orrs.w	r3, r3, sl
 800bd7e:	d0a1      	beq.n	800bcc4 <_strtod_l+0x814>
 800bd80:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800bd82:	b1db      	cbz	r3, 800bdbc <_strtod_l+0x90c>
 800bd84:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bd86:	4213      	tst	r3, r2
 800bd88:	d0ee      	beq.n	800bd68 <_strtod_l+0x8b8>
 800bd8a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bd8c:	9a08      	ldr	r2, [sp, #32]
 800bd8e:	4650      	mov	r0, sl
 800bd90:	4659      	mov	r1, fp
 800bd92:	b1bb      	cbz	r3, 800bdc4 <_strtod_l+0x914>
 800bd94:	f7ff fb6c 	bl	800b470 <sulp>
 800bd98:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bd9c:	ec53 2b10 	vmov	r2, r3, d0
 800bda0:	f7f4 fa74 	bl	800028c <__adddf3>
 800bda4:	4682      	mov	sl, r0
 800bda6:	468b      	mov	fp, r1
 800bda8:	e7de      	b.n	800bd68 <_strtod_l+0x8b8>
 800bdaa:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800bdae:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800bdb2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800bdb6:	f04f 3aff 	mov.w	sl, #4294967295
 800bdba:	e7d5      	b.n	800bd68 <_strtod_l+0x8b8>
 800bdbc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800bdbe:	ea13 0f0a 	tst.w	r3, sl
 800bdc2:	e7e1      	b.n	800bd88 <_strtod_l+0x8d8>
 800bdc4:	f7ff fb54 	bl	800b470 <sulp>
 800bdc8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bdcc:	ec53 2b10 	vmov	r2, r3, d0
 800bdd0:	f7f4 fa5a 	bl	8000288 <__aeabi_dsub>
 800bdd4:	2200      	movs	r2, #0
 800bdd6:	2300      	movs	r3, #0
 800bdd8:	4682      	mov	sl, r0
 800bdda:	468b      	mov	fp, r1
 800bddc:	f7f4 fe74 	bl	8000ac8 <__aeabi_dcmpeq>
 800bde0:	2800      	cmp	r0, #0
 800bde2:	d0c1      	beq.n	800bd68 <_strtod_l+0x8b8>
 800bde4:	e619      	b.n	800ba1a <_strtod_l+0x56a>
 800bde6:	4641      	mov	r1, r8
 800bde8:	4620      	mov	r0, r4
 800bdea:	f7ff facb 	bl	800b384 <__ratio>
 800bdee:	ec57 6b10 	vmov	r6, r7, d0
 800bdf2:	2200      	movs	r2, #0
 800bdf4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800bdf8:	4630      	mov	r0, r6
 800bdfa:	4639      	mov	r1, r7
 800bdfc:	f7f4 fe78 	bl	8000af0 <__aeabi_dcmple>
 800be00:	2800      	cmp	r0, #0
 800be02:	d06f      	beq.n	800bee4 <_strtod_l+0xa34>
 800be04:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800be06:	2b00      	cmp	r3, #0
 800be08:	d17a      	bne.n	800bf00 <_strtod_l+0xa50>
 800be0a:	f1ba 0f00 	cmp.w	sl, #0
 800be0e:	d158      	bne.n	800bec2 <_strtod_l+0xa12>
 800be10:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800be12:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800be16:	2b00      	cmp	r3, #0
 800be18:	d15a      	bne.n	800bed0 <_strtod_l+0xa20>
 800be1a:	4b64      	ldr	r3, [pc, #400]	@ (800bfac <_strtod_l+0xafc>)
 800be1c:	2200      	movs	r2, #0
 800be1e:	4630      	mov	r0, r6
 800be20:	4639      	mov	r1, r7
 800be22:	f7f4 fe5b 	bl	8000adc <__aeabi_dcmplt>
 800be26:	2800      	cmp	r0, #0
 800be28:	d159      	bne.n	800bede <_strtod_l+0xa2e>
 800be2a:	4630      	mov	r0, r6
 800be2c:	4639      	mov	r1, r7
 800be2e:	4b60      	ldr	r3, [pc, #384]	@ (800bfb0 <_strtod_l+0xb00>)
 800be30:	2200      	movs	r2, #0
 800be32:	f7f4 fbe1 	bl	80005f8 <__aeabi_dmul>
 800be36:	4606      	mov	r6, r0
 800be38:	460f      	mov	r7, r1
 800be3a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800be3e:	9606      	str	r6, [sp, #24]
 800be40:	9307      	str	r3, [sp, #28]
 800be42:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800be46:	4d57      	ldr	r5, [pc, #348]	@ (800bfa4 <_strtod_l+0xaf4>)
 800be48:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800be4c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800be4e:	401d      	ands	r5, r3
 800be50:	4b58      	ldr	r3, [pc, #352]	@ (800bfb4 <_strtod_l+0xb04>)
 800be52:	429d      	cmp	r5, r3
 800be54:	f040 80b2 	bne.w	800bfbc <_strtod_l+0xb0c>
 800be58:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800be5a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800be5e:	ec4b ab10 	vmov	d0, sl, fp
 800be62:	f7ff f9c7 	bl	800b1f4 <__ulp>
 800be66:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800be6a:	ec51 0b10 	vmov	r0, r1, d0
 800be6e:	f7f4 fbc3 	bl	80005f8 <__aeabi_dmul>
 800be72:	4652      	mov	r2, sl
 800be74:	465b      	mov	r3, fp
 800be76:	f7f4 fa09 	bl	800028c <__adddf3>
 800be7a:	460b      	mov	r3, r1
 800be7c:	4949      	ldr	r1, [pc, #292]	@ (800bfa4 <_strtod_l+0xaf4>)
 800be7e:	4a4e      	ldr	r2, [pc, #312]	@ (800bfb8 <_strtod_l+0xb08>)
 800be80:	4019      	ands	r1, r3
 800be82:	4291      	cmp	r1, r2
 800be84:	4682      	mov	sl, r0
 800be86:	d942      	bls.n	800bf0e <_strtod_l+0xa5e>
 800be88:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800be8a:	4b47      	ldr	r3, [pc, #284]	@ (800bfa8 <_strtod_l+0xaf8>)
 800be8c:	429a      	cmp	r2, r3
 800be8e:	d103      	bne.n	800be98 <_strtod_l+0x9e8>
 800be90:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800be92:	3301      	adds	r3, #1
 800be94:	f43f ad2b 	beq.w	800b8ee <_strtod_l+0x43e>
 800be98:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800bfa8 <_strtod_l+0xaf8>
 800be9c:	f04f 3aff 	mov.w	sl, #4294967295
 800bea0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bea2:	9805      	ldr	r0, [sp, #20]
 800bea4:	f7fe fe72 	bl	800ab8c <_Bfree>
 800bea8:	9805      	ldr	r0, [sp, #20]
 800beaa:	4649      	mov	r1, r9
 800beac:	f7fe fe6e 	bl	800ab8c <_Bfree>
 800beb0:	9805      	ldr	r0, [sp, #20]
 800beb2:	4641      	mov	r1, r8
 800beb4:	f7fe fe6a 	bl	800ab8c <_Bfree>
 800beb8:	9805      	ldr	r0, [sp, #20]
 800beba:	4621      	mov	r1, r4
 800bebc:	f7fe fe66 	bl	800ab8c <_Bfree>
 800bec0:	e618      	b.n	800baf4 <_strtod_l+0x644>
 800bec2:	f1ba 0f01 	cmp.w	sl, #1
 800bec6:	d103      	bne.n	800bed0 <_strtod_l+0xa20>
 800bec8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800beca:	2b00      	cmp	r3, #0
 800becc:	f43f ada5 	beq.w	800ba1a <_strtod_l+0x56a>
 800bed0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800bf80 <_strtod_l+0xad0>
 800bed4:	4f35      	ldr	r7, [pc, #212]	@ (800bfac <_strtod_l+0xafc>)
 800bed6:	ed8d 7b06 	vstr	d7, [sp, #24]
 800beda:	2600      	movs	r6, #0
 800bedc:	e7b1      	b.n	800be42 <_strtod_l+0x992>
 800bede:	4f34      	ldr	r7, [pc, #208]	@ (800bfb0 <_strtod_l+0xb00>)
 800bee0:	2600      	movs	r6, #0
 800bee2:	e7aa      	b.n	800be3a <_strtod_l+0x98a>
 800bee4:	4b32      	ldr	r3, [pc, #200]	@ (800bfb0 <_strtod_l+0xb00>)
 800bee6:	4630      	mov	r0, r6
 800bee8:	4639      	mov	r1, r7
 800beea:	2200      	movs	r2, #0
 800beec:	f7f4 fb84 	bl	80005f8 <__aeabi_dmul>
 800bef0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bef2:	4606      	mov	r6, r0
 800bef4:	460f      	mov	r7, r1
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d09f      	beq.n	800be3a <_strtod_l+0x98a>
 800befa:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800befe:	e7a0      	b.n	800be42 <_strtod_l+0x992>
 800bf00:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800bf88 <_strtod_l+0xad8>
 800bf04:	ed8d 7b06 	vstr	d7, [sp, #24]
 800bf08:	ec57 6b17 	vmov	r6, r7, d7
 800bf0c:	e799      	b.n	800be42 <_strtod_l+0x992>
 800bf0e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800bf12:	9b08      	ldr	r3, [sp, #32]
 800bf14:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d1c1      	bne.n	800bea0 <_strtod_l+0x9f0>
 800bf1c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800bf20:	0d1b      	lsrs	r3, r3, #20
 800bf22:	051b      	lsls	r3, r3, #20
 800bf24:	429d      	cmp	r5, r3
 800bf26:	d1bb      	bne.n	800bea0 <_strtod_l+0x9f0>
 800bf28:	4630      	mov	r0, r6
 800bf2a:	4639      	mov	r1, r7
 800bf2c:	f7f4 fec4 	bl	8000cb8 <__aeabi_d2lz>
 800bf30:	f7f4 fb34 	bl	800059c <__aeabi_l2d>
 800bf34:	4602      	mov	r2, r0
 800bf36:	460b      	mov	r3, r1
 800bf38:	4630      	mov	r0, r6
 800bf3a:	4639      	mov	r1, r7
 800bf3c:	f7f4 f9a4 	bl	8000288 <__aeabi_dsub>
 800bf40:	460b      	mov	r3, r1
 800bf42:	4602      	mov	r2, r0
 800bf44:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800bf48:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800bf4c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bf4e:	ea46 060a 	orr.w	r6, r6, sl
 800bf52:	431e      	orrs	r6, r3
 800bf54:	d06f      	beq.n	800c036 <_strtod_l+0xb86>
 800bf56:	a30e      	add	r3, pc, #56	@ (adr r3, 800bf90 <_strtod_l+0xae0>)
 800bf58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf5c:	f7f4 fdbe 	bl	8000adc <__aeabi_dcmplt>
 800bf60:	2800      	cmp	r0, #0
 800bf62:	f47f accf 	bne.w	800b904 <_strtod_l+0x454>
 800bf66:	a30c      	add	r3, pc, #48	@ (adr r3, 800bf98 <_strtod_l+0xae8>)
 800bf68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf6c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bf70:	f7f4 fdd2 	bl	8000b18 <__aeabi_dcmpgt>
 800bf74:	2800      	cmp	r0, #0
 800bf76:	d093      	beq.n	800bea0 <_strtod_l+0x9f0>
 800bf78:	e4c4      	b.n	800b904 <_strtod_l+0x454>
 800bf7a:	bf00      	nop
 800bf7c:	f3af 8000 	nop.w
 800bf80:	00000000 	.word	0x00000000
 800bf84:	bff00000 	.word	0xbff00000
 800bf88:	00000000 	.word	0x00000000
 800bf8c:	3ff00000 	.word	0x3ff00000
 800bf90:	94a03595 	.word	0x94a03595
 800bf94:	3fdfffff 	.word	0x3fdfffff
 800bf98:	35afe535 	.word	0x35afe535
 800bf9c:	3fe00000 	.word	0x3fe00000
 800bfa0:	000fffff 	.word	0x000fffff
 800bfa4:	7ff00000 	.word	0x7ff00000
 800bfa8:	7fefffff 	.word	0x7fefffff
 800bfac:	3ff00000 	.word	0x3ff00000
 800bfb0:	3fe00000 	.word	0x3fe00000
 800bfb4:	7fe00000 	.word	0x7fe00000
 800bfb8:	7c9fffff 	.word	0x7c9fffff
 800bfbc:	9b08      	ldr	r3, [sp, #32]
 800bfbe:	b323      	cbz	r3, 800c00a <_strtod_l+0xb5a>
 800bfc0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800bfc4:	d821      	bhi.n	800c00a <_strtod_l+0xb5a>
 800bfc6:	a328      	add	r3, pc, #160	@ (adr r3, 800c068 <_strtod_l+0xbb8>)
 800bfc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfcc:	4630      	mov	r0, r6
 800bfce:	4639      	mov	r1, r7
 800bfd0:	f7f4 fd8e 	bl	8000af0 <__aeabi_dcmple>
 800bfd4:	b1a0      	cbz	r0, 800c000 <_strtod_l+0xb50>
 800bfd6:	4639      	mov	r1, r7
 800bfd8:	4630      	mov	r0, r6
 800bfda:	f7f4 fde5 	bl	8000ba8 <__aeabi_d2uiz>
 800bfde:	2801      	cmp	r0, #1
 800bfe0:	bf38      	it	cc
 800bfe2:	2001      	movcc	r0, #1
 800bfe4:	f7f4 fa8e 	bl	8000504 <__aeabi_ui2d>
 800bfe8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bfea:	4606      	mov	r6, r0
 800bfec:	460f      	mov	r7, r1
 800bfee:	b9fb      	cbnz	r3, 800c030 <_strtod_l+0xb80>
 800bff0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800bff4:	9014      	str	r0, [sp, #80]	@ 0x50
 800bff6:	9315      	str	r3, [sp, #84]	@ 0x54
 800bff8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800bffc:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800c000:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c002:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800c006:	1b5b      	subs	r3, r3, r5
 800c008:	9311      	str	r3, [sp, #68]	@ 0x44
 800c00a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800c00e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800c012:	f7ff f8ef 	bl	800b1f4 <__ulp>
 800c016:	4650      	mov	r0, sl
 800c018:	ec53 2b10 	vmov	r2, r3, d0
 800c01c:	4659      	mov	r1, fp
 800c01e:	f7f4 faeb 	bl	80005f8 <__aeabi_dmul>
 800c022:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800c026:	f7f4 f931 	bl	800028c <__adddf3>
 800c02a:	4682      	mov	sl, r0
 800c02c:	468b      	mov	fp, r1
 800c02e:	e770      	b.n	800bf12 <_strtod_l+0xa62>
 800c030:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800c034:	e7e0      	b.n	800bff8 <_strtod_l+0xb48>
 800c036:	a30e      	add	r3, pc, #56	@ (adr r3, 800c070 <_strtod_l+0xbc0>)
 800c038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c03c:	f7f4 fd4e 	bl	8000adc <__aeabi_dcmplt>
 800c040:	e798      	b.n	800bf74 <_strtod_l+0xac4>
 800c042:	2300      	movs	r3, #0
 800c044:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c046:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800c048:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c04a:	6013      	str	r3, [r2, #0]
 800c04c:	f7ff ba6d 	b.w	800b52a <_strtod_l+0x7a>
 800c050:	2a65      	cmp	r2, #101	@ 0x65
 800c052:	f43f ab66 	beq.w	800b722 <_strtod_l+0x272>
 800c056:	2a45      	cmp	r2, #69	@ 0x45
 800c058:	f43f ab63 	beq.w	800b722 <_strtod_l+0x272>
 800c05c:	2301      	movs	r3, #1
 800c05e:	f7ff bb9e 	b.w	800b79e <_strtod_l+0x2ee>
 800c062:	bf00      	nop
 800c064:	f3af 8000 	nop.w
 800c068:	ffc00000 	.word	0xffc00000
 800c06c:	41dfffff 	.word	0x41dfffff
 800c070:	94a03595 	.word	0x94a03595
 800c074:	3fcfffff 	.word	0x3fcfffff

0800c078 <_strtod_r>:
 800c078:	4b01      	ldr	r3, [pc, #4]	@ (800c080 <_strtod_r+0x8>)
 800c07a:	f7ff ba19 	b.w	800b4b0 <_strtod_l>
 800c07e:	bf00      	nop
 800c080:	200000e0 	.word	0x200000e0

0800c084 <_strtol_l.constprop.0>:
 800c084:	2b24      	cmp	r3, #36	@ 0x24
 800c086:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c08a:	4686      	mov	lr, r0
 800c08c:	4690      	mov	r8, r2
 800c08e:	d801      	bhi.n	800c094 <_strtol_l.constprop.0+0x10>
 800c090:	2b01      	cmp	r3, #1
 800c092:	d106      	bne.n	800c0a2 <_strtol_l.constprop.0+0x1e>
 800c094:	f7fd fe68 	bl	8009d68 <__errno>
 800c098:	2316      	movs	r3, #22
 800c09a:	6003      	str	r3, [r0, #0]
 800c09c:	2000      	movs	r0, #0
 800c09e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c0a2:	4834      	ldr	r0, [pc, #208]	@ (800c174 <_strtol_l.constprop.0+0xf0>)
 800c0a4:	460d      	mov	r5, r1
 800c0a6:	462a      	mov	r2, r5
 800c0a8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c0ac:	5d06      	ldrb	r6, [r0, r4]
 800c0ae:	f016 0608 	ands.w	r6, r6, #8
 800c0b2:	d1f8      	bne.n	800c0a6 <_strtol_l.constprop.0+0x22>
 800c0b4:	2c2d      	cmp	r4, #45	@ 0x2d
 800c0b6:	d12d      	bne.n	800c114 <_strtol_l.constprop.0+0x90>
 800c0b8:	782c      	ldrb	r4, [r5, #0]
 800c0ba:	2601      	movs	r6, #1
 800c0bc:	1c95      	adds	r5, r2, #2
 800c0be:	f033 0210 	bics.w	r2, r3, #16
 800c0c2:	d109      	bne.n	800c0d8 <_strtol_l.constprop.0+0x54>
 800c0c4:	2c30      	cmp	r4, #48	@ 0x30
 800c0c6:	d12a      	bne.n	800c11e <_strtol_l.constprop.0+0x9a>
 800c0c8:	782a      	ldrb	r2, [r5, #0]
 800c0ca:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800c0ce:	2a58      	cmp	r2, #88	@ 0x58
 800c0d0:	d125      	bne.n	800c11e <_strtol_l.constprop.0+0x9a>
 800c0d2:	786c      	ldrb	r4, [r5, #1]
 800c0d4:	2310      	movs	r3, #16
 800c0d6:	3502      	adds	r5, #2
 800c0d8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800c0dc:	f10c 3cff 	add.w	ip, ip, #4294967295
 800c0e0:	2200      	movs	r2, #0
 800c0e2:	fbbc f9f3 	udiv	r9, ip, r3
 800c0e6:	4610      	mov	r0, r2
 800c0e8:	fb03 ca19 	mls	sl, r3, r9, ip
 800c0ec:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800c0f0:	2f09      	cmp	r7, #9
 800c0f2:	d81b      	bhi.n	800c12c <_strtol_l.constprop.0+0xa8>
 800c0f4:	463c      	mov	r4, r7
 800c0f6:	42a3      	cmp	r3, r4
 800c0f8:	dd27      	ble.n	800c14a <_strtol_l.constprop.0+0xc6>
 800c0fa:	1c57      	adds	r7, r2, #1
 800c0fc:	d007      	beq.n	800c10e <_strtol_l.constprop.0+0x8a>
 800c0fe:	4581      	cmp	r9, r0
 800c100:	d320      	bcc.n	800c144 <_strtol_l.constprop.0+0xc0>
 800c102:	d101      	bne.n	800c108 <_strtol_l.constprop.0+0x84>
 800c104:	45a2      	cmp	sl, r4
 800c106:	db1d      	blt.n	800c144 <_strtol_l.constprop.0+0xc0>
 800c108:	fb00 4003 	mla	r0, r0, r3, r4
 800c10c:	2201      	movs	r2, #1
 800c10e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c112:	e7eb      	b.n	800c0ec <_strtol_l.constprop.0+0x68>
 800c114:	2c2b      	cmp	r4, #43	@ 0x2b
 800c116:	bf04      	itt	eq
 800c118:	782c      	ldrbeq	r4, [r5, #0]
 800c11a:	1c95      	addeq	r5, r2, #2
 800c11c:	e7cf      	b.n	800c0be <_strtol_l.constprop.0+0x3a>
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d1da      	bne.n	800c0d8 <_strtol_l.constprop.0+0x54>
 800c122:	2c30      	cmp	r4, #48	@ 0x30
 800c124:	bf0c      	ite	eq
 800c126:	2308      	moveq	r3, #8
 800c128:	230a      	movne	r3, #10
 800c12a:	e7d5      	b.n	800c0d8 <_strtol_l.constprop.0+0x54>
 800c12c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800c130:	2f19      	cmp	r7, #25
 800c132:	d801      	bhi.n	800c138 <_strtol_l.constprop.0+0xb4>
 800c134:	3c37      	subs	r4, #55	@ 0x37
 800c136:	e7de      	b.n	800c0f6 <_strtol_l.constprop.0+0x72>
 800c138:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800c13c:	2f19      	cmp	r7, #25
 800c13e:	d804      	bhi.n	800c14a <_strtol_l.constprop.0+0xc6>
 800c140:	3c57      	subs	r4, #87	@ 0x57
 800c142:	e7d8      	b.n	800c0f6 <_strtol_l.constprop.0+0x72>
 800c144:	f04f 32ff 	mov.w	r2, #4294967295
 800c148:	e7e1      	b.n	800c10e <_strtol_l.constprop.0+0x8a>
 800c14a:	1c53      	adds	r3, r2, #1
 800c14c:	d108      	bne.n	800c160 <_strtol_l.constprop.0+0xdc>
 800c14e:	2322      	movs	r3, #34	@ 0x22
 800c150:	f8ce 3000 	str.w	r3, [lr]
 800c154:	4660      	mov	r0, ip
 800c156:	f1b8 0f00 	cmp.w	r8, #0
 800c15a:	d0a0      	beq.n	800c09e <_strtol_l.constprop.0+0x1a>
 800c15c:	1e69      	subs	r1, r5, #1
 800c15e:	e006      	b.n	800c16e <_strtol_l.constprop.0+0xea>
 800c160:	b106      	cbz	r6, 800c164 <_strtol_l.constprop.0+0xe0>
 800c162:	4240      	negs	r0, r0
 800c164:	f1b8 0f00 	cmp.w	r8, #0
 800c168:	d099      	beq.n	800c09e <_strtol_l.constprop.0+0x1a>
 800c16a:	2a00      	cmp	r2, #0
 800c16c:	d1f6      	bne.n	800c15c <_strtol_l.constprop.0+0xd8>
 800c16e:	f8c8 1000 	str.w	r1, [r8]
 800c172:	e794      	b.n	800c09e <_strtol_l.constprop.0+0x1a>
 800c174:	0800e069 	.word	0x0800e069

0800c178 <_strtol_r>:
 800c178:	f7ff bf84 	b.w	800c084 <_strtol_l.constprop.0>

0800c17c <__ssputs_r>:
 800c17c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c180:	688e      	ldr	r6, [r1, #8]
 800c182:	461f      	mov	r7, r3
 800c184:	42be      	cmp	r6, r7
 800c186:	680b      	ldr	r3, [r1, #0]
 800c188:	4682      	mov	sl, r0
 800c18a:	460c      	mov	r4, r1
 800c18c:	4690      	mov	r8, r2
 800c18e:	d82d      	bhi.n	800c1ec <__ssputs_r+0x70>
 800c190:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c194:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c198:	d026      	beq.n	800c1e8 <__ssputs_r+0x6c>
 800c19a:	6965      	ldr	r5, [r4, #20]
 800c19c:	6909      	ldr	r1, [r1, #16]
 800c19e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c1a2:	eba3 0901 	sub.w	r9, r3, r1
 800c1a6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c1aa:	1c7b      	adds	r3, r7, #1
 800c1ac:	444b      	add	r3, r9
 800c1ae:	106d      	asrs	r5, r5, #1
 800c1b0:	429d      	cmp	r5, r3
 800c1b2:	bf38      	it	cc
 800c1b4:	461d      	movcc	r5, r3
 800c1b6:	0553      	lsls	r3, r2, #21
 800c1b8:	d527      	bpl.n	800c20a <__ssputs_r+0x8e>
 800c1ba:	4629      	mov	r1, r5
 800c1bc:	f7fc fc0e 	bl	80089dc <_malloc_r>
 800c1c0:	4606      	mov	r6, r0
 800c1c2:	b360      	cbz	r0, 800c21e <__ssputs_r+0xa2>
 800c1c4:	6921      	ldr	r1, [r4, #16]
 800c1c6:	464a      	mov	r2, r9
 800c1c8:	f000 fe08 	bl	800cddc <memcpy>
 800c1cc:	89a3      	ldrh	r3, [r4, #12]
 800c1ce:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c1d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c1d6:	81a3      	strh	r3, [r4, #12]
 800c1d8:	6126      	str	r6, [r4, #16]
 800c1da:	6165      	str	r5, [r4, #20]
 800c1dc:	444e      	add	r6, r9
 800c1de:	eba5 0509 	sub.w	r5, r5, r9
 800c1e2:	6026      	str	r6, [r4, #0]
 800c1e4:	60a5      	str	r5, [r4, #8]
 800c1e6:	463e      	mov	r6, r7
 800c1e8:	42be      	cmp	r6, r7
 800c1ea:	d900      	bls.n	800c1ee <__ssputs_r+0x72>
 800c1ec:	463e      	mov	r6, r7
 800c1ee:	6820      	ldr	r0, [r4, #0]
 800c1f0:	4632      	mov	r2, r6
 800c1f2:	4641      	mov	r1, r8
 800c1f4:	f000 fdb5 	bl	800cd62 <memmove>
 800c1f8:	68a3      	ldr	r3, [r4, #8]
 800c1fa:	1b9b      	subs	r3, r3, r6
 800c1fc:	60a3      	str	r3, [r4, #8]
 800c1fe:	6823      	ldr	r3, [r4, #0]
 800c200:	4433      	add	r3, r6
 800c202:	6023      	str	r3, [r4, #0]
 800c204:	2000      	movs	r0, #0
 800c206:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c20a:	462a      	mov	r2, r5
 800c20c:	f001 f965 	bl	800d4da <_realloc_r>
 800c210:	4606      	mov	r6, r0
 800c212:	2800      	cmp	r0, #0
 800c214:	d1e0      	bne.n	800c1d8 <__ssputs_r+0x5c>
 800c216:	6921      	ldr	r1, [r4, #16]
 800c218:	4650      	mov	r0, sl
 800c21a:	f7fe fc2d 	bl	800aa78 <_free_r>
 800c21e:	230c      	movs	r3, #12
 800c220:	f8ca 3000 	str.w	r3, [sl]
 800c224:	89a3      	ldrh	r3, [r4, #12]
 800c226:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c22a:	81a3      	strh	r3, [r4, #12]
 800c22c:	f04f 30ff 	mov.w	r0, #4294967295
 800c230:	e7e9      	b.n	800c206 <__ssputs_r+0x8a>
	...

0800c234 <_svfiprintf_r>:
 800c234:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c238:	4698      	mov	r8, r3
 800c23a:	898b      	ldrh	r3, [r1, #12]
 800c23c:	061b      	lsls	r3, r3, #24
 800c23e:	b09d      	sub	sp, #116	@ 0x74
 800c240:	4607      	mov	r7, r0
 800c242:	460d      	mov	r5, r1
 800c244:	4614      	mov	r4, r2
 800c246:	d510      	bpl.n	800c26a <_svfiprintf_r+0x36>
 800c248:	690b      	ldr	r3, [r1, #16]
 800c24a:	b973      	cbnz	r3, 800c26a <_svfiprintf_r+0x36>
 800c24c:	2140      	movs	r1, #64	@ 0x40
 800c24e:	f7fc fbc5 	bl	80089dc <_malloc_r>
 800c252:	6028      	str	r0, [r5, #0]
 800c254:	6128      	str	r0, [r5, #16]
 800c256:	b930      	cbnz	r0, 800c266 <_svfiprintf_r+0x32>
 800c258:	230c      	movs	r3, #12
 800c25a:	603b      	str	r3, [r7, #0]
 800c25c:	f04f 30ff 	mov.w	r0, #4294967295
 800c260:	b01d      	add	sp, #116	@ 0x74
 800c262:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c266:	2340      	movs	r3, #64	@ 0x40
 800c268:	616b      	str	r3, [r5, #20]
 800c26a:	2300      	movs	r3, #0
 800c26c:	9309      	str	r3, [sp, #36]	@ 0x24
 800c26e:	2320      	movs	r3, #32
 800c270:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c274:	f8cd 800c 	str.w	r8, [sp, #12]
 800c278:	2330      	movs	r3, #48	@ 0x30
 800c27a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800c418 <_svfiprintf_r+0x1e4>
 800c27e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c282:	f04f 0901 	mov.w	r9, #1
 800c286:	4623      	mov	r3, r4
 800c288:	469a      	mov	sl, r3
 800c28a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c28e:	b10a      	cbz	r2, 800c294 <_svfiprintf_r+0x60>
 800c290:	2a25      	cmp	r2, #37	@ 0x25
 800c292:	d1f9      	bne.n	800c288 <_svfiprintf_r+0x54>
 800c294:	ebba 0b04 	subs.w	fp, sl, r4
 800c298:	d00b      	beq.n	800c2b2 <_svfiprintf_r+0x7e>
 800c29a:	465b      	mov	r3, fp
 800c29c:	4622      	mov	r2, r4
 800c29e:	4629      	mov	r1, r5
 800c2a0:	4638      	mov	r0, r7
 800c2a2:	f7ff ff6b 	bl	800c17c <__ssputs_r>
 800c2a6:	3001      	adds	r0, #1
 800c2a8:	f000 80a7 	beq.w	800c3fa <_svfiprintf_r+0x1c6>
 800c2ac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c2ae:	445a      	add	r2, fp
 800c2b0:	9209      	str	r2, [sp, #36]	@ 0x24
 800c2b2:	f89a 3000 	ldrb.w	r3, [sl]
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	f000 809f 	beq.w	800c3fa <_svfiprintf_r+0x1c6>
 800c2bc:	2300      	movs	r3, #0
 800c2be:	f04f 32ff 	mov.w	r2, #4294967295
 800c2c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c2c6:	f10a 0a01 	add.w	sl, sl, #1
 800c2ca:	9304      	str	r3, [sp, #16]
 800c2cc:	9307      	str	r3, [sp, #28]
 800c2ce:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c2d2:	931a      	str	r3, [sp, #104]	@ 0x68
 800c2d4:	4654      	mov	r4, sl
 800c2d6:	2205      	movs	r2, #5
 800c2d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c2dc:	484e      	ldr	r0, [pc, #312]	@ (800c418 <_svfiprintf_r+0x1e4>)
 800c2de:	f7f3 ff77 	bl	80001d0 <memchr>
 800c2e2:	9a04      	ldr	r2, [sp, #16]
 800c2e4:	b9d8      	cbnz	r0, 800c31e <_svfiprintf_r+0xea>
 800c2e6:	06d0      	lsls	r0, r2, #27
 800c2e8:	bf44      	itt	mi
 800c2ea:	2320      	movmi	r3, #32
 800c2ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c2f0:	0711      	lsls	r1, r2, #28
 800c2f2:	bf44      	itt	mi
 800c2f4:	232b      	movmi	r3, #43	@ 0x2b
 800c2f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c2fa:	f89a 3000 	ldrb.w	r3, [sl]
 800c2fe:	2b2a      	cmp	r3, #42	@ 0x2a
 800c300:	d015      	beq.n	800c32e <_svfiprintf_r+0xfa>
 800c302:	9a07      	ldr	r2, [sp, #28]
 800c304:	4654      	mov	r4, sl
 800c306:	2000      	movs	r0, #0
 800c308:	f04f 0c0a 	mov.w	ip, #10
 800c30c:	4621      	mov	r1, r4
 800c30e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c312:	3b30      	subs	r3, #48	@ 0x30
 800c314:	2b09      	cmp	r3, #9
 800c316:	d94b      	bls.n	800c3b0 <_svfiprintf_r+0x17c>
 800c318:	b1b0      	cbz	r0, 800c348 <_svfiprintf_r+0x114>
 800c31a:	9207      	str	r2, [sp, #28]
 800c31c:	e014      	b.n	800c348 <_svfiprintf_r+0x114>
 800c31e:	eba0 0308 	sub.w	r3, r0, r8
 800c322:	fa09 f303 	lsl.w	r3, r9, r3
 800c326:	4313      	orrs	r3, r2
 800c328:	9304      	str	r3, [sp, #16]
 800c32a:	46a2      	mov	sl, r4
 800c32c:	e7d2      	b.n	800c2d4 <_svfiprintf_r+0xa0>
 800c32e:	9b03      	ldr	r3, [sp, #12]
 800c330:	1d19      	adds	r1, r3, #4
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	9103      	str	r1, [sp, #12]
 800c336:	2b00      	cmp	r3, #0
 800c338:	bfbb      	ittet	lt
 800c33a:	425b      	neglt	r3, r3
 800c33c:	f042 0202 	orrlt.w	r2, r2, #2
 800c340:	9307      	strge	r3, [sp, #28]
 800c342:	9307      	strlt	r3, [sp, #28]
 800c344:	bfb8      	it	lt
 800c346:	9204      	strlt	r2, [sp, #16]
 800c348:	7823      	ldrb	r3, [r4, #0]
 800c34a:	2b2e      	cmp	r3, #46	@ 0x2e
 800c34c:	d10a      	bne.n	800c364 <_svfiprintf_r+0x130>
 800c34e:	7863      	ldrb	r3, [r4, #1]
 800c350:	2b2a      	cmp	r3, #42	@ 0x2a
 800c352:	d132      	bne.n	800c3ba <_svfiprintf_r+0x186>
 800c354:	9b03      	ldr	r3, [sp, #12]
 800c356:	1d1a      	adds	r2, r3, #4
 800c358:	681b      	ldr	r3, [r3, #0]
 800c35a:	9203      	str	r2, [sp, #12]
 800c35c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c360:	3402      	adds	r4, #2
 800c362:	9305      	str	r3, [sp, #20]
 800c364:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800c428 <_svfiprintf_r+0x1f4>
 800c368:	7821      	ldrb	r1, [r4, #0]
 800c36a:	2203      	movs	r2, #3
 800c36c:	4650      	mov	r0, sl
 800c36e:	f7f3 ff2f 	bl	80001d0 <memchr>
 800c372:	b138      	cbz	r0, 800c384 <_svfiprintf_r+0x150>
 800c374:	9b04      	ldr	r3, [sp, #16]
 800c376:	eba0 000a 	sub.w	r0, r0, sl
 800c37a:	2240      	movs	r2, #64	@ 0x40
 800c37c:	4082      	lsls	r2, r0
 800c37e:	4313      	orrs	r3, r2
 800c380:	3401      	adds	r4, #1
 800c382:	9304      	str	r3, [sp, #16]
 800c384:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c388:	4824      	ldr	r0, [pc, #144]	@ (800c41c <_svfiprintf_r+0x1e8>)
 800c38a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c38e:	2206      	movs	r2, #6
 800c390:	f7f3 ff1e 	bl	80001d0 <memchr>
 800c394:	2800      	cmp	r0, #0
 800c396:	d036      	beq.n	800c406 <_svfiprintf_r+0x1d2>
 800c398:	4b21      	ldr	r3, [pc, #132]	@ (800c420 <_svfiprintf_r+0x1ec>)
 800c39a:	bb1b      	cbnz	r3, 800c3e4 <_svfiprintf_r+0x1b0>
 800c39c:	9b03      	ldr	r3, [sp, #12]
 800c39e:	3307      	adds	r3, #7
 800c3a0:	f023 0307 	bic.w	r3, r3, #7
 800c3a4:	3308      	adds	r3, #8
 800c3a6:	9303      	str	r3, [sp, #12]
 800c3a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c3aa:	4433      	add	r3, r6
 800c3ac:	9309      	str	r3, [sp, #36]	@ 0x24
 800c3ae:	e76a      	b.n	800c286 <_svfiprintf_r+0x52>
 800c3b0:	fb0c 3202 	mla	r2, ip, r2, r3
 800c3b4:	460c      	mov	r4, r1
 800c3b6:	2001      	movs	r0, #1
 800c3b8:	e7a8      	b.n	800c30c <_svfiprintf_r+0xd8>
 800c3ba:	2300      	movs	r3, #0
 800c3bc:	3401      	adds	r4, #1
 800c3be:	9305      	str	r3, [sp, #20]
 800c3c0:	4619      	mov	r1, r3
 800c3c2:	f04f 0c0a 	mov.w	ip, #10
 800c3c6:	4620      	mov	r0, r4
 800c3c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c3cc:	3a30      	subs	r2, #48	@ 0x30
 800c3ce:	2a09      	cmp	r2, #9
 800c3d0:	d903      	bls.n	800c3da <_svfiprintf_r+0x1a6>
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	d0c6      	beq.n	800c364 <_svfiprintf_r+0x130>
 800c3d6:	9105      	str	r1, [sp, #20]
 800c3d8:	e7c4      	b.n	800c364 <_svfiprintf_r+0x130>
 800c3da:	fb0c 2101 	mla	r1, ip, r1, r2
 800c3de:	4604      	mov	r4, r0
 800c3e0:	2301      	movs	r3, #1
 800c3e2:	e7f0      	b.n	800c3c6 <_svfiprintf_r+0x192>
 800c3e4:	ab03      	add	r3, sp, #12
 800c3e6:	9300      	str	r3, [sp, #0]
 800c3e8:	462a      	mov	r2, r5
 800c3ea:	4b0e      	ldr	r3, [pc, #56]	@ (800c424 <_svfiprintf_r+0x1f0>)
 800c3ec:	a904      	add	r1, sp, #16
 800c3ee:	4638      	mov	r0, r7
 800c3f0:	f7fc fc20 	bl	8008c34 <_printf_float>
 800c3f4:	1c42      	adds	r2, r0, #1
 800c3f6:	4606      	mov	r6, r0
 800c3f8:	d1d6      	bne.n	800c3a8 <_svfiprintf_r+0x174>
 800c3fa:	89ab      	ldrh	r3, [r5, #12]
 800c3fc:	065b      	lsls	r3, r3, #25
 800c3fe:	f53f af2d 	bmi.w	800c25c <_svfiprintf_r+0x28>
 800c402:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c404:	e72c      	b.n	800c260 <_svfiprintf_r+0x2c>
 800c406:	ab03      	add	r3, sp, #12
 800c408:	9300      	str	r3, [sp, #0]
 800c40a:	462a      	mov	r2, r5
 800c40c:	4b05      	ldr	r3, [pc, #20]	@ (800c424 <_svfiprintf_r+0x1f0>)
 800c40e:	a904      	add	r1, sp, #16
 800c410:	4638      	mov	r0, r7
 800c412:	f7fc fea7 	bl	8009164 <_printf_i>
 800c416:	e7ed      	b.n	800c3f4 <_svfiprintf_r+0x1c0>
 800c418:	0800e169 	.word	0x0800e169
 800c41c:	0800e173 	.word	0x0800e173
 800c420:	08008c35 	.word	0x08008c35
 800c424:	0800c17d 	.word	0x0800c17d
 800c428:	0800e16f 	.word	0x0800e16f

0800c42c <_sungetc_r>:
 800c42c:	b538      	push	{r3, r4, r5, lr}
 800c42e:	1c4b      	adds	r3, r1, #1
 800c430:	4614      	mov	r4, r2
 800c432:	d103      	bne.n	800c43c <_sungetc_r+0x10>
 800c434:	f04f 35ff 	mov.w	r5, #4294967295
 800c438:	4628      	mov	r0, r5
 800c43a:	bd38      	pop	{r3, r4, r5, pc}
 800c43c:	8993      	ldrh	r3, [r2, #12]
 800c43e:	f023 0320 	bic.w	r3, r3, #32
 800c442:	8193      	strh	r3, [r2, #12]
 800c444:	6853      	ldr	r3, [r2, #4]
 800c446:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800c448:	b2cd      	uxtb	r5, r1
 800c44a:	b18a      	cbz	r2, 800c470 <_sungetc_r+0x44>
 800c44c:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800c44e:	429a      	cmp	r2, r3
 800c450:	dd08      	ble.n	800c464 <_sungetc_r+0x38>
 800c452:	6823      	ldr	r3, [r4, #0]
 800c454:	1e5a      	subs	r2, r3, #1
 800c456:	6022      	str	r2, [r4, #0]
 800c458:	f803 5c01 	strb.w	r5, [r3, #-1]
 800c45c:	6863      	ldr	r3, [r4, #4]
 800c45e:	3301      	adds	r3, #1
 800c460:	6063      	str	r3, [r4, #4]
 800c462:	e7e9      	b.n	800c438 <_sungetc_r+0xc>
 800c464:	4621      	mov	r1, r4
 800c466:	f000 fc42 	bl	800ccee <__submore>
 800c46a:	2800      	cmp	r0, #0
 800c46c:	d0f1      	beq.n	800c452 <_sungetc_r+0x26>
 800c46e:	e7e1      	b.n	800c434 <_sungetc_r+0x8>
 800c470:	6921      	ldr	r1, [r4, #16]
 800c472:	6822      	ldr	r2, [r4, #0]
 800c474:	b141      	cbz	r1, 800c488 <_sungetc_r+0x5c>
 800c476:	4291      	cmp	r1, r2
 800c478:	d206      	bcs.n	800c488 <_sungetc_r+0x5c>
 800c47a:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 800c47e:	42a9      	cmp	r1, r5
 800c480:	d102      	bne.n	800c488 <_sungetc_r+0x5c>
 800c482:	3a01      	subs	r2, #1
 800c484:	6022      	str	r2, [r4, #0]
 800c486:	e7ea      	b.n	800c45e <_sungetc_r+0x32>
 800c488:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 800c48c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c490:	6363      	str	r3, [r4, #52]	@ 0x34
 800c492:	2303      	movs	r3, #3
 800c494:	63a3      	str	r3, [r4, #56]	@ 0x38
 800c496:	4623      	mov	r3, r4
 800c498:	f803 5f46 	strb.w	r5, [r3, #70]!
 800c49c:	6023      	str	r3, [r4, #0]
 800c49e:	2301      	movs	r3, #1
 800c4a0:	e7de      	b.n	800c460 <_sungetc_r+0x34>

0800c4a2 <__ssrefill_r>:
 800c4a2:	b510      	push	{r4, lr}
 800c4a4:	460c      	mov	r4, r1
 800c4a6:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800c4a8:	b169      	cbz	r1, 800c4c6 <__ssrefill_r+0x24>
 800c4aa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c4ae:	4299      	cmp	r1, r3
 800c4b0:	d001      	beq.n	800c4b6 <__ssrefill_r+0x14>
 800c4b2:	f7fe fae1 	bl	800aa78 <_free_r>
 800c4b6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c4b8:	6063      	str	r3, [r4, #4]
 800c4ba:	2000      	movs	r0, #0
 800c4bc:	6360      	str	r0, [r4, #52]	@ 0x34
 800c4be:	b113      	cbz	r3, 800c4c6 <__ssrefill_r+0x24>
 800c4c0:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800c4c2:	6023      	str	r3, [r4, #0]
 800c4c4:	bd10      	pop	{r4, pc}
 800c4c6:	6923      	ldr	r3, [r4, #16]
 800c4c8:	6023      	str	r3, [r4, #0]
 800c4ca:	2300      	movs	r3, #0
 800c4cc:	6063      	str	r3, [r4, #4]
 800c4ce:	89a3      	ldrh	r3, [r4, #12]
 800c4d0:	f043 0320 	orr.w	r3, r3, #32
 800c4d4:	81a3      	strh	r3, [r4, #12]
 800c4d6:	f04f 30ff 	mov.w	r0, #4294967295
 800c4da:	e7f3      	b.n	800c4c4 <__ssrefill_r+0x22>

0800c4dc <__ssvfiscanf_r>:
 800c4dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c4e0:	460c      	mov	r4, r1
 800c4e2:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800c4e6:	2100      	movs	r1, #0
 800c4e8:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 800c4ec:	49a5      	ldr	r1, [pc, #660]	@ (800c784 <__ssvfiscanf_r+0x2a8>)
 800c4ee:	91a0      	str	r1, [sp, #640]	@ 0x280
 800c4f0:	f10d 0804 	add.w	r8, sp, #4
 800c4f4:	49a4      	ldr	r1, [pc, #656]	@ (800c788 <__ssvfiscanf_r+0x2ac>)
 800c4f6:	4fa5      	ldr	r7, [pc, #660]	@ (800c78c <__ssvfiscanf_r+0x2b0>)
 800c4f8:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 800c4fc:	4606      	mov	r6, r0
 800c4fe:	91a1      	str	r1, [sp, #644]	@ 0x284
 800c500:	9300      	str	r3, [sp, #0]
 800c502:	7813      	ldrb	r3, [r2, #0]
 800c504:	2b00      	cmp	r3, #0
 800c506:	f000 8158 	beq.w	800c7ba <__ssvfiscanf_r+0x2de>
 800c50a:	5cf9      	ldrb	r1, [r7, r3]
 800c50c:	f011 0108 	ands.w	r1, r1, #8
 800c510:	f102 0501 	add.w	r5, r2, #1
 800c514:	d019      	beq.n	800c54a <__ssvfiscanf_r+0x6e>
 800c516:	6863      	ldr	r3, [r4, #4]
 800c518:	2b00      	cmp	r3, #0
 800c51a:	dd0f      	ble.n	800c53c <__ssvfiscanf_r+0x60>
 800c51c:	6823      	ldr	r3, [r4, #0]
 800c51e:	781a      	ldrb	r2, [r3, #0]
 800c520:	5cba      	ldrb	r2, [r7, r2]
 800c522:	0712      	lsls	r2, r2, #28
 800c524:	d401      	bmi.n	800c52a <__ssvfiscanf_r+0x4e>
 800c526:	462a      	mov	r2, r5
 800c528:	e7eb      	b.n	800c502 <__ssvfiscanf_r+0x26>
 800c52a:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800c52c:	3201      	adds	r2, #1
 800c52e:	9245      	str	r2, [sp, #276]	@ 0x114
 800c530:	6862      	ldr	r2, [r4, #4]
 800c532:	3301      	adds	r3, #1
 800c534:	3a01      	subs	r2, #1
 800c536:	6062      	str	r2, [r4, #4]
 800c538:	6023      	str	r3, [r4, #0]
 800c53a:	e7ec      	b.n	800c516 <__ssvfiscanf_r+0x3a>
 800c53c:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800c53e:	4621      	mov	r1, r4
 800c540:	4630      	mov	r0, r6
 800c542:	4798      	blx	r3
 800c544:	2800      	cmp	r0, #0
 800c546:	d0e9      	beq.n	800c51c <__ssvfiscanf_r+0x40>
 800c548:	e7ed      	b.n	800c526 <__ssvfiscanf_r+0x4a>
 800c54a:	2b25      	cmp	r3, #37	@ 0x25
 800c54c:	d012      	beq.n	800c574 <__ssvfiscanf_r+0x98>
 800c54e:	4699      	mov	r9, r3
 800c550:	6863      	ldr	r3, [r4, #4]
 800c552:	2b00      	cmp	r3, #0
 800c554:	f340 8093 	ble.w	800c67e <__ssvfiscanf_r+0x1a2>
 800c558:	6822      	ldr	r2, [r4, #0]
 800c55a:	7813      	ldrb	r3, [r2, #0]
 800c55c:	454b      	cmp	r3, r9
 800c55e:	f040 812c 	bne.w	800c7ba <__ssvfiscanf_r+0x2de>
 800c562:	6863      	ldr	r3, [r4, #4]
 800c564:	3b01      	subs	r3, #1
 800c566:	6063      	str	r3, [r4, #4]
 800c568:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800c56a:	3201      	adds	r2, #1
 800c56c:	3301      	adds	r3, #1
 800c56e:	6022      	str	r2, [r4, #0]
 800c570:	9345      	str	r3, [sp, #276]	@ 0x114
 800c572:	e7d8      	b.n	800c526 <__ssvfiscanf_r+0x4a>
 800c574:	9141      	str	r1, [sp, #260]	@ 0x104
 800c576:	9143      	str	r1, [sp, #268]	@ 0x10c
 800c578:	7853      	ldrb	r3, [r2, #1]
 800c57a:	2b2a      	cmp	r3, #42	@ 0x2a
 800c57c:	bf02      	ittt	eq
 800c57e:	2310      	moveq	r3, #16
 800c580:	1c95      	addeq	r5, r2, #2
 800c582:	9341      	streq	r3, [sp, #260]	@ 0x104
 800c584:	220a      	movs	r2, #10
 800c586:	46a9      	mov	r9, r5
 800c588:	f819 1b01 	ldrb.w	r1, [r9], #1
 800c58c:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 800c590:	2b09      	cmp	r3, #9
 800c592:	d91e      	bls.n	800c5d2 <__ssvfiscanf_r+0xf6>
 800c594:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 800c790 <__ssvfiscanf_r+0x2b4>
 800c598:	2203      	movs	r2, #3
 800c59a:	4650      	mov	r0, sl
 800c59c:	f7f3 fe18 	bl	80001d0 <memchr>
 800c5a0:	b138      	cbz	r0, 800c5b2 <__ssvfiscanf_r+0xd6>
 800c5a2:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800c5a4:	eba0 000a 	sub.w	r0, r0, sl
 800c5a8:	2301      	movs	r3, #1
 800c5aa:	4083      	lsls	r3, r0
 800c5ac:	4313      	orrs	r3, r2
 800c5ae:	9341      	str	r3, [sp, #260]	@ 0x104
 800c5b0:	464d      	mov	r5, r9
 800c5b2:	f815 3b01 	ldrb.w	r3, [r5], #1
 800c5b6:	2b78      	cmp	r3, #120	@ 0x78
 800c5b8:	d806      	bhi.n	800c5c8 <__ssvfiscanf_r+0xec>
 800c5ba:	2b57      	cmp	r3, #87	@ 0x57
 800c5bc:	d810      	bhi.n	800c5e0 <__ssvfiscanf_r+0x104>
 800c5be:	2b25      	cmp	r3, #37	@ 0x25
 800c5c0:	d0c5      	beq.n	800c54e <__ssvfiscanf_r+0x72>
 800c5c2:	d857      	bhi.n	800c674 <__ssvfiscanf_r+0x198>
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	d065      	beq.n	800c694 <__ssvfiscanf_r+0x1b8>
 800c5c8:	2303      	movs	r3, #3
 800c5ca:	9347      	str	r3, [sp, #284]	@ 0x11c
 800c5cc:	230a      	movs	r3, #10
 800c5ce:	9342      	str	r3, [sp, #264]	@ 0x108
 800c5d0:	e078      	b.n	800c6c4 <__ssvfiscanf_r+0x1e8>
 800c5d2:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800c5d4:	fb02 1103 	mla	r1, r2, r3, r1
 800c5d8:	3930      	subs	r1, #48	@ 0x30
 800c5da:	9143      	str	r1, [sp, #268]	@ 0x10c
 800c5dc:	464d      	mov	r5, r9
 800c5de:	e7d2      	b.n	800c586 <__ssvfiscanf_r+0xaa>
 800c5e0:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 800c5e4:	2a20      	cmp	r2, #32
 800c5e6:	d8ef      	bhi.n	800c5c8 <__ssvfiscanf_r+0xec>
 800c5e8:	a101      	add	r1, pc, #4	@ (adr r1, 800c5f0 <__ssvfiscanf_r+0x114>)
 800c5ea:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800c5ee:	bf00      	nop
 800c5f0:	0800c6a3 	.word	0x0800c6a3
 800c5f4:	0800c5c9 	.word	0x0800c5c9
 800c5f8:	0800c5c9 	.word	0x0800c5c9
 800c5fc:	0800c6fd 	.word	0x0800c6fd
 800c600:	0800c5c9 	.word	0x0800c5c9
 800c604:	0800c5c9 	.word	0x0800c5c9
 800c608:	0800c5c9 	.word	0x0800c5c9
 800c60c:	0800c5c9 	.word	0x0800c5c9
 800c610:	0800c5c9 	.word	0x0800c5c9
 800c614:	0800c5c9 	.word	0x0800c5c9
 800c618:	0800c5c9 	.word	0x0800c5c9
 800c61c:	0800c713 	.word	0x0800c713
 800c620:	0800c6f9 	.word	0x0800c6f9
 800c624:	0800c67b 	.word	0x0800c67b
 800c628:	0800c67b 	.word	0x0800c67b
 800c62c:	0800c67b 	.word	0x0800c67b
 800c630:	0800c5c9 	.word	0x0800c5c9
 800c634:	0800c6b5 	.word	0x0800c6b5
 800c638:	0800c5c9 	.word	0x0800c5c9
 800c63c:	0800c5c9 	.word	0x0800c5c9
 800c640:	0800c5c9 	.word	0x0800c5c9
 800c644:	0800c5c9 	.word	0x0800c5c9
 800c648:	0800c723 	.word	0x0800c723
 800c64c:	0800c6bd 	.word	0x0800c6bd
 800c650:	0800c69b 	.word	0x0800c69b
 800c654:	0800c5c9 	.word	0x0800c5c9
 800c658:	0800c5c9 	.word	0x0800c5c9
 800c65c:	0800c71f 	.word	0x0800c71f
 800c660:	0800c5c9 	.word	0x0800c5c9
 800c664:	0800c6f9 	.word	0x0800c6f9
 800c668:	0800c5c9 	.word	0x0800c5c9
 800c66c:	0800c5c9 	.word	0x0800c5c9
 800c670:	0800c6a3 	.word	0x0800c6a3
 800c674:	3b45      	subs	r3, #69	@ 0x45
 800c676:	2b02      	cmp	r3, #2
 800c678:	d8a6      	bhi.n	800c5c8 <__ssvfiscanf_r+0xec>
 800c67a:	2305      	movs	r3, #5
 800c67c:	e021      	b.n	800c6c2 <__ssvfiscanf_r+0x1e6>
 800c67e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800c680:	4621      	mov	r1, r4
 800c682:	4630      	mov	r0, r6
 800c684:	4798      	blx	r3
 800c686:	2800      	cmp	r0, #0
 800c688:	f43f af66 	beq.w	800c558 <__ssvfiscanf_r+0x7c>
 800c68c:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800c68e:	2800      	cmp	r0, #0
 800c690:	f040 808b 	bne.w	800c7aa <__ssvfiscanf_r+0x2ce>
 800c694:	f04f 30ff 	mov.w	r0, #4294967295
 800c698:	e08b      	b.n	800c7b2 <__ssvfiscanf_r+0x2d6>
 800c69a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800c69c:	f042 0220 	orr.w	r2, r2, #32
 800c6a0:	9241      	str	r2, [sp, #260]	@ 0x104
 800c6a2:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800c6a4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c6a8:	9241      	str	r2, [sp, #260]	@ 0x104
 800c6aa:	2210      	movs	r2, #16
 800c6ac:	2b6e      	cmp	r3, #110	@ 0x6e
 800c6ae:	9242      	str	r2, [sp, #264]	@ 0x108
 800c6b0:	d902      	bls.n	800c6b8 <__ssvfiscanf_r+0x1dc>
 800c6b2:	e005      	b.n	800c6c0 <__ssvfiscanf_r+0x1e4>
 800c6b4:	2300      	movs	r3, #0
 800c6b6:	9342      	str	r3, [sp, #264]	@ 0x108
 800c6b8:	2303      	movs	r3, #3
 800c6ba:	e002      	b.n	800c6c2 <__ssvfiscanf_r+0x1e6>
 800c6bc:	2308      	movs	r3, #8
 800c6be:	9342      	str	r3, [sp, #264]	@ 0x108
 800c6c0:	2304      	movs	r3, #4
 800c6c2:	9347      	str	r3, [sp, #284]	@ 0x11c
 800c6c4:	6863      	ldr	r3, [r4, #4]
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	dd39      	ble.n	800c73e <__ssvfiscanf_r+0x262>
 800c6ca:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800c6cc:	0659      	lsls	r1, r3, #25
 800c6ce:	d404      	bmi.n	800c6da <__ssvfiscanf_r+0x1fe>
 800c6d0:	6823      	ldr	r3, [r4, #0]
 800c6d2:	781a      	ldrb	r2, [r3, #0]
 800c6d4:	5cba      	ldrb	r2, [r7, r2]
 800c6d6:	0712      	lsls	r2, r2, #28
 800c6d8:	d438      	bmi.n	800c74c <__ssvfiscanf_r+0x270>
 800c6da:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800c6dc:	2b02      	cmp	r3, #2
 800c6de:	dc47      	bgt.n	800c770 <__ssvfiscanf_r+0x294>
 800c6e0:	466b      	mov	r3, sp
 800c6e2:	4622      	mov	r2, r4
 800c6e4:	a941      	add	r1, sp, #260	@ 0x104
 800c6e6:	4630      	mov	r0, r6
 800c6e8:	f000 f86c 	bl	800c7c4 <_scanf_chars>
 800c6ec:	2801      	cmp	r0, #1
 800c6ee:	d064      	beq.n	800c7ba <__ssvfiscanf_r+0x2de>
 800c6f0:	2802      	cmp	r0, #2
 800c6f2:	f47f af18 	bne.w	800c526 <__ssvfiscanf_r+0x4a>
 800c6f6:	e7c9      	b.n	800c68c <__ssvfiscanf_r+0x1b0>
 800c6f8:	220a      	movs	r2, #10
 800c6fa:	e7d7      	b.n	800c6ac <__ssvfiscanf_r+0x1d0>
 800c6fc:	4629      	mov	r1, r5
 800c6fe:	4640      	mov	r0, r8
 800c700:	f000 fabc 	bl	800cc7c <__sccl>
 800c704:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800c706:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c70a:	9341      	str	r3, [sp, #260]	@ 0x104
 800c70c:	4605      	mov	r5, r0
 800c70e:	2301      	movs	r3, #1
 800c710:	e7d7      	b.n	800c6c2 <__ssvfiscanf_r+0x1e6>
 800c712:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800c714:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c718:	9341      	str	r3, [sp, #260]	@ 0x104
 800c71a:	2300      	movs	r3, #0
 800c71c:	e7d1      	b.n	800c6c2 <__ssvfiscanf_r+0x1e6>
 800c71e:	2302      	movs	r3, #2
 800c720:	e7cf      	b.n	800c6c2 <__ssvfiscanf_r+0x1e6>
 800c722:	9841      	ldr	r0, [sp, #260]	@ 0x104
 800c724:	06c3      	lsls	r3, r0, #27
 800c726:	f53f aefe 	bmi.w	800c526 <__ssvfiscanf_r+0x4a>
 800c72a:	9b00      	ldr	r3, [sp, #0]
 800c72c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800c72e:	1d19      	adds	r1, r3, #4
 800c730:	9100      	str	r1, [sp, #0]
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	07c0      	lsls	r0, r0, #31
 800c736:	bf4c      	ite	mi
 800c738:	801a      	strhmi	r2, [r3, #0]
 800c73a:	601a      	strpl	r2, [r3, #0]
 800c73c:	e6f3      	b.n	800c526 <__ssvfiscanf_r+0x4a>
 800c73e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800c740:	4621      	mov	r1, r4
 800c742:	4630      	mov	r0, r6
 800c744:	4798      	blx	r3
 800c746:	2800      	cmp	r0, #0
 800c748:	d0bf      	beq.n	800c6ca <__ssvfiscanf_r+0x1ee>
 800c74a:	e79f      	b.n	800c68c <__ssvfiscanf_r+0x1b0>
 800c74c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800c74e:	3201      	adds	r2, #1
 800c750:	9245      	str	r2, [sp, #276]	@ 0x114
 800c752:	6862      	ldr	r2, [r4, #4]
 800c754:	3a01      	subs	r2, #1
 800c756:	2a00      	cmp	r2, #0
 800c758:	6062      	str	r2, [r4, #4]
 800c75a:	dd02      	ble.n	800c762 <__ssvfiscanf_r+0x286>
 800c75c:	3301      	adds	r3, #1
 800c75e:	6023      	str	r3, [r4, #0]
 800c760:	e7b6      	b.n	800c6d0 <__ssvfiscanf_r+0x1f4>
 800c762:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800c764:	4621      	mov	r1, r4
 800c766:	4630      	mov	r0, r6
 800c768:	4798      	blx	r3
 800c76a:	2800      	cmp	r0, #0
 800c76c:	d0b0      	beq.n	800c6d0 <__ssvfiscanf_r+0x1f4>
 800c76e:	e78d      	b.n	800c68c <__ssvfiscanf_r+0x1b0>
 800c770:	2b04      	cmp	r3, #4
 800c772:	dc0f      	bgt.n	800c794 <__ssvfiscanf_r+0x2b8>
 800c774:	466b      	mov	r3, sp
 800c776:	4622      	mov	r2, r4
 800c778:	a941      	add	r1, sp, #260	@ 0x104
 800c77a:	4630      	mov	r0, r6
 800c77c:	f000 f87c 	bl	800c878 <_scanf_i>
 800c780:	e7b4      	b.n	800c6ec <__ssvfiscanf_r+0x210>
 800c782:	bf00      	nop
 800c784:	0800c42d 	.word	0x0800c42d
 800c788:	0800c4a3 	.word	0x0800c4a3
 800c78c:	0800e069 	.word	0x0800e069
 800c790:	0800e16f 	.word	0x0800e16f
 800c794:	4b0a      	ldr	r3, [pc, #40]	@ (800c7c0 <__ssvfiscanf_r+0x2e4>)
 800c796:	2b00      	cmp	r3, #0
 800c798:	f43f aec5 	beq.w	800c526 <__ssvfiscanf_r+0x4a>
 800c79c:	466b      	mov	r3, sp
 800c79e:	4622      	mov	r2, r4
 800c7a0:	a941      	add	r1, sp, #260	@ 0x104
 800c7a2:	4630      	mov	r0, r6
 800c7a4:	f7fc fdfe 	bl	80093a4 <_scanf_float>
 800c7a8:	e7a0      	b.n	800c6ec <__ssvfiscanf_r+0x210>
 800c7aa:	89a3      	ldrh	r3, [r4, #12]
 800c7ac:	065b      	lsls	r3, r3, #25
 800c7ae:	f53f af71 	bmi.w	800c694 <__ssvfiscanf_r+0x1b8>
 800c7b2:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 800c7b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c7ba:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800c7bc:	e7f9      	b.n	800c7b2 <__ssvfiscanf_r+0x2d6>
 800c7be:	bf00      	nop
 800c7c0:	080093a5 	.word	0x080093a5

0800c7c4 <_scanf_chars>:
 800c7c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c7c8:	4615      	mov	r5, r2
 800c7ca:	688a      	ldr	r2, [r1, #8]
 800c7cc:	4680      	mov	r8, r0
 800c7ce:	460c      	mov	r4, r1
 800c7d0:	b932      	cbnz	r2, 800c7e0 <_scanf_chars+0x1c>
 800c7d2:	698a      	ldr	r2, [r1, #24]
 800c7d4:	2a00      	cmp	r2, #0
 800c7d6:	bf14      	ite	ne
 800c7d8:	f04f 32ff 	movne.w	r2, #4294967295
 800c7dc:	2201      	moveq	r2, #1
 800c7de:	608a      	str	r2, [r1, #8]
 800c7e0:	6822      	ldr	r2, [r4, #0]
 800c7e2:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 800c874 <_scanf_chars+0xb0>
 800c7e6:	06d1      	lsls	r1, r2, #27
 800c7e8:	bf5f      	itttt	pl
 800c7ea:	681a      	ldrpl	r2, [r3, #0]
 800c7ec:	1d11      	addpl	r1, r2, #4
 800c7ee:	6019      	strpl	r1, [r3, #0]
 800c7f0:	6816      	ldrpl	r6, [r2, #0]
 800c7f2:	2700      	movs	r7, #0
 800c7f4:	69a0      	ldr	r0, [r4, #24]
 800c7f6:	b188      	cbz	r0, 800c81c <_scanf_chars+0x58>
 800c7f8:	2801      	cmp	r0, #1
 800c7fa:	d107      	bne.n	800c80c <_scanf_chars+0x48>
 800c7fc:	682b      	ldr	r3, [r5, #0]
 800c7fe:	781a      	ldrb	r2, [r3, #0]
 800c800:	6963      	ldr	r3, [r4, #20]
 800c802:	5c9b      	ldrb	r3, [r3, r2]
 800c804:	b953      	cbnz	r3, 800c81c <_scanf_chars+0x58>
 800c806:	2f00      	cmp	r7, #0
 800c808:	d031      	beq.n	800c86e <_scanf_chars+0xaa>
 800c80a:	e022      	b.n	800c852 <_scanf_chars+0x8e>
 800c80c:	2802      	cmp	r0, #2
 800c80e:	d120      	bne.n	800c852 <_scanf_chars+0x8e>
 800c810:	682b      	ldr	r3, [r5, #0]
 800c812:	781b      	ldrb	r3, [r3, #0]
 800c814:	f819 3003 	ldrb.w	r3, [r9, r3]
 800c818:	071b      	lsls	r3, r3, #28
 800c81a:	d41a      	bmi.n	800c852 <_scanf_chars+0x8e>
 800c81c:	6823      	ldr	r3, [r4, #0]
 800c81e:	06da      	lsls	r2, r3, #27
 800c820:	bf5e      	ittt	pl
 800c822:	682b      	ldrpl	r3, [r5, #0]
 800c824:	781b      	ldrbpl	r3, [r3, #0]
 800c826:	f806 3b01 	strbpl.w	r3, [r6], #1
 800c82a:	682a      	ldr	r2, [r5, #0]
 800c82c:	686b      	ldr	r3, [r5, #4]
 800c82e:	3201      	adds	r2, #1
 800c830:	602a      	str	r2, [r5, #0]
 800c832:	68a2      	ldr	r2, [r4, #8]
 800c834:	3b01      	subs	r3, #1
 800c836:	3a01      	subs	r2, #1
 800c838:	606b      	str	r3, [r5, #4]
 800c83a:	3701      	adds	r7, #1
 800c83c:	60a2      	str	r2, [r4, #8]
 800c83e:	b142      	cbz	r2, 800c852 <_scanf_chars+0x8e>
 800c840:	2b00      	cmp	r3, #0
 800c842:	dcd7      	bgt.n	800c7f4 <_scanf_chars+0x30>
 800c844:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800c848:	4629      	mov	r1, r5
 800c84a:	4640      	mov	r0, r8
 800c84c:	4798      	blx	r3
 800c84e:	2800      	cmp	r0, #0
 800c850:	d0d0      	beq.n	800c7f4 <_scanf_chars+0x30>
 800c852:	6823      	ldr	r3, [r4, #0]
 800c854:	f013 0310 	ands.w	r3, r3, #16
 800c858:	d105      	bne.n	800c866 <_scanf_chars+0xa2>
 800c85a:	68e2      	ldr	r2, [r4, #12]
 800c85c:	3201      	adds	r2, #1
 800c85e:	60e2      	str	r2, [r4, #12]
 800c860:	69a2      	ldr	r2, [r4, #24]
 800c862:	b102      	cbz	r2, 800c866 <_scanf_chars+0xa2>
 800c864:	7033      	strb	r3, [r6, #0]
 800c866:	6923      	ldr	r3, [r4, #16]
 800c868:	443b      	add	r3, r7
 800c86a:	6123      	str	r3, [r4, #16]
 800c86c:	2000      	movs	r0, #0
 800c86e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c872:	bf00      	nop
 800c874:	0800e069 	.word	0x0800e069

0800c878 <_scanf_i>:
 800c878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c87c:	4698      	mov	r8, r3
 800c87e:	4b74      	ldr	r3, [pc, #464]	@ (800ca50 <_scanf_i+0x1d8>)
 800c880:	460c      	mov	r4, r1
 800c882:	4682      	mov	sl, r0
 800c884:	4616      	mov	r6, r2
 800c886:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c88a:	b087      	sub	sp, #28
 800c88c:	ab03      	add	r3, sp, #12
 800c88e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800c892:	4b70      	ldr	r3, [pc, #448]	@ (800ca54 <_scanf_i+0x1dc>)
 800c894:	69a1      	ldr	r1, [r4, #24]
 800c896:	4a70      	ldr	r2, [pc, #448]	@ (800ca58 <_scanf_i+0x1e0>)
 800c898:	2903      	cmp	r1, #3
 800c89a:	bf08      	it	eq
 800c89c:	461a      	moveq	r2, r3
 800c89e:	68a3      	ldr	r3, [r4, #8]
 800c8a0:	9201      	str	r2, [sp, #4]
 800c8a2:	1e5a      	subs	r2, r3, #1
 800c8a4:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800c8a8:	bf88      	it	hi
 800c8aa:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800c8ae:	4627      	mov	r7, r4
 800c8b0:	bf82      	ittt	hi
 800c8b2:	eb03 0905 	addhi.w	r9, r3, r5
 800c8b6:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800c8ba:	60a3      	strhi	r3, [r4, #8]
 800c8bc:	f857 3b1c 	ldr.w	r3, [r7], #28
 800c8c0:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800c8c4:	bf98      	it	ls
 800c8c6:	f04f 0900 	movls.w	r9, #0
 800c8ca:	6023      	str	r3, [r4, #0]
 800c8cc:	463d      	mov	r5, r7
 800c8ce:	f04f 0b00 	mov.w	fp, #0
 800c8d2:	6831      	ldr	r1, [r6, #0]
 800c8d4:	ab03      	add	r3, sp, #12
 800c8d6:	7809      	ldrb	r1, [r1, #0]
 800c8d8:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800c8dc:	2202      	movs	r2, #2
 800c8de:	f7f3 fc77 	bl	80001d0 <memchr>
 800c8e2:	b328      	cbz	r0, 800c930 <_scanf_i+0xb8>
 800c8e4:	f1bb 0f01 	cmp.w	fp, #1
 800c8e8:	d159      	bne.n	800c99e <_scanf_i+0x126>
 800c8ea:	6862      	ldr	r2, [r4, #4]
 800c8ec:	b92a      	cbnz	r2, 800c8fa <_scanf_i+0x82>
 800c8ee:	6822      	ldr	r2, [r4, #0]
 800c8f0:	2108      	movs	r1, #8
 800c8f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c8f6:	6061      	str	r1, [r4, #4]
 800c8f8:	6022      	str	r2, [r4, #0]
 800c8fa:	6822      	ldr	r2, [r4, #0]
 800c8fc:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800c900:	6022      	str	r2, [r4, #0]
 800c902:	68a2      	ldr	r2, [r4, #8]
 800c904:	1e51      	subs	r1, r2, #1
 800c906:	60a1      	str	r1, [r4, #8]
 800c908:	b192      	cbz	r2, 800c930 <_scanf_i+0xb8>
 800c90a:	6832      	ldr	r2, [r6, #0]
 800c90c:	1c51      	adds	r1, r2, #1
 800c90e:	6031      	str	r1, [r6, #0]
 800c910:	7812      	ldrb	r2, [r2, #0]
 800c912:	f805 2b01 	strb.w	r2, [r5], #1
 800c916:	6872      	ldr	r2, [r6, #4]
 800c918:	3a01      	subs	r2, #1
 800c91a:	2a00      	cmp	r2, #0
 800c91c:	6072      	str	r2, [r6, #4]
 800c91e:	dc07      	bgt.n	800c930 <_scanf_i+0xb8>
 800c920:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 800c924:	4631      	mov	r1, r6
 800c926:	4650      	mov	r0, sl
 800c928:	4790      	blx	r2
 800c92a:	2800      	cmp	r0, #0
 800c92c:	f040 8085 	bne.w	800ca3a <_scanf_i+0x1c2>
 800c930:	f10b 0b01 	add.w	fp, fp, #1
 800c934:	f1bb 0f03 	cmp.w	fp, #3
 800c938:	d1cb      	bne.n	800c8d2 <_scanf_i+0x5a>
 800c93a:	6863      	ldr	r3, [r4, #4]
 800c93c:	b90b      	cbnz	r3, 800c942 <_scanf_i+0xca>
 800c93e:	230a      	movs	r3, #10
 800c940:	6063      	str	r3, [r4, #4]
 800c942:	6863      	ldr	r3, [r4, #4]
 800c944:	4945      	ldr	r1, [pc, #276]	@ (800ca5c <_scanf_i+0x1e4>)
 800c946:	6960      	ldr	r0, [r4, #20]
 800c948:	1ac9      	subs	r1, r1, r3
 800c94a:	f000 f997 	bl	800cc7c <__sccl>
 800c94e:	f04f 0b00 	mov.w	fp, #0
 800c952:	68a3      	ldr	r3, [r4, #8]
 800c954:	6822      	ldr	r2, [r4, #0]
 800c956:	2b00      	cmp	r3, #0
 800c958:	d03d      	beq.n	800c9d6 <_scanf_i+0x15e>
 800c95a:	6831      	ldr	r1, [r6, #0]
 800c95c:	6960      	ldr	r0, [r4, #20]
 800c95e:	f891 c000 	ldrb.w	ip, [r1]
 800c962:	f810 000c 	ldrb.w	r0, [r0, ip]
 800c966:	2800      	cmp	r0, #0
 800c968:	d035      	beq.n	800c9d6 <_scanf_i+0x15e>
 800c96a:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800c96e:	d124      	bne.n	800c9ba <_scanf_i+0x142>
 800c970:	0510      	lsls	r0, r2, #20
 800c972:	d522      	bpl.n	800c9ba <_scanf_i+0x142>
 800c974:	f10b 0b01 	add.w	fp, fp, #1
 800c978:	f1b9 0f00 	cmp.w	r9, #0
 800c97c:	d003      	beq.n	800c986 <_scanf_i+0x10e>
 800c97e:	3301      	adds	r3, #1
 800c980:	f109 39ff 	add.w	r9, r9, #4294967295
 800c984:	60a3      	str	r3, [r4, #8]
 800c986:	6873      	ldr	r3, [r6, #4]
 800c988:	3b01      	subs	r3, #1
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	6073      	str	r3, [r6, #4]
 800c98e:	dd1b      	ble.n	800c9c8 <_scanf_i+0x150>
 800c990:	6833      	ldr	r3, [r6, #0]
 800c992:	3301      	adds	r3, #1
 800c994:	6033      	str	r3, [r6, #0]
 800c996:	68a3      	ldr	r3, [r4, #8]
 800c998:	3b01      	subs	r3, #1
 800c99a:	60a3      	str	r3, [r4, #8]
 800c99c:	e7d9      	b.n	800c952 <_scanf_i+0xda>
 800c99e:	f1bb 0f02 	cmp.w	fp, #2
 800c9a2:	d1ae      	bne.n	800c902 <_scanf_i+0x8a>
 800c9a4:	6822      	ldr	r2, [r4, #0]
 800c9a6:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800c9aa:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800c9ae:	d1bf      	bne.n	800c930 <_scanf_i+0xb8>
 800c9b0:	2110      	movs	r1, #16
 800c9b2:	6061      	str	r1, [r4, #4]
 800c9b4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800c9b8:	e7a2      	b.n	800c900 <_scanf_i+0x88>
 800c9ba:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800c9be:	6022      	str	r2, [r4, #0]
 800c9c0:	780b      	ldrb	r3, [r1, #0]
 800c9c2:	f805 3b01 	strb.w	r3, [r5], #1
 800c9c6:	e7de      	b.n	800c986 <_scanf_i+0x10e>
 800c9c8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800c9cc:	4631      	mov	r1, r6
 800c9ce:	4650      	mov	r0, sl
 800c9d0:	4798      	blx	r3
 800c9d2:	2800      	cmp	r0, #0
 800c9d4:	d0df      	beq.n	800c996 <_scanf_i+0x11e>
 800c9d6:	6823      	ldr	r3, [r4, #0]
 800c9d8:	05d9      	lsls	r1, r3, #23
 800c9da:	d50d      	bpl.n	800c9f8 <_scanf_i+0x180>
 800c9dc:	42bd      	cmp	r5, r7
 800c9de:	d909      	bls.n	800c9f4 <_scanf_i+0x17c>
 800c9e0:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800c9e4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c9e8:	4632      	mov	r2, r6
 800c9ea:	4650      	mov	r0, sl
 800c9ec:	4798      	blx	r3
 800c9ee:	f105 39ff 	add.w	r9, r5, #4294967295
 800c9f2:	464d      	mov	r5, r9
 800c9f4:	42bd      	cmp	r5, r7
 800c9f6:	d028      	beq.n	800ca4a <_scanf_i+0x1d2>
 800c9f8:	6822      	ldr	r2, [r4, #0]
 800c9fa:	f012 0210 	ands.w	r2, r2, #16
 800c9fe:	d113      	bne.n	800ca28 <_scanf_i+0x1b0>
 800ca00:	702a      	strb	r2, [r5, #0]
 800ca02:	6863      	ldr	r3, [r4, #4]
 800ca04:	9e01      	ldr	r6, [sp, #4]
 800ca06:	4639      	mov	r1, r7
 800ca08:	4650      	mov	r0, sl
 800ca0a:	47b0      	blx	r6
 800ca0c:	f8d8 3000 	ldr.w	r3, [r8]
 800ca10:	6821      	ldr	r1, [r4, #0]
 800ca12:	1d1a      	adds	r2, r3, #4
 800ca14:	f8c8 2000 	str.w	r2, [r8]
 800ca18:	f011 0f20 	tst.w	r1, #32
 800ca1c:	681b      	ldr	r3, [r3, #0]
 800ca1e:	d00f      	beq.n	800ca40 <_scanf_i+0x1c8>
 800ca20:	6018      	str	r0, [r3, #0]
 800ca22:	68e3      	ldr	r3, [r4, #12]
 800ca24:	3301      	adds	r3, #1
 800ca26:	60e3      	str	r3, [r4, #12]
 800ca28:	6923      	ldr	r3, [r4, #16]
 800ca2a:	1bed      	subs	r5, r5, r7
 800ca2c:	445d      	add	r5, fp
 800ca2e:	442b      	add	r3, r5
 800ca30:	6123      	str	r3, [r4, #16]
 800ca32:	2000      	movs	r0, #0
 800ca34:	b007      	add	sp, #28
 800ca36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca3a:	f04f 0b00 	mov.w	fp, #0
 800ca3e:	e7ca      	b.n	800c9d6 <_scanf_i+0x15e>
 800ca40:	07ca      	lsls	r2, r1, #31
 800ca42:	bf4c      	ite	mi
 800ca44:	8018      	strhmi	r0, [r3, #0]
 800ca46:	6018      	strpl	r0, [r3, #0]
 800ca48:	e7eb      	b.n	800ca22 <_scanf_i+0x1aa>
 800ca4a:	2001      	movs	r0, #1
 800ca4c:	e7f2      	b.n	800ca34 <_scanf_i+0x1bc>
 800ca4e:	bf00      	nop
 800ca50:	0800dda0 	.word	0x0800dda0
 800ca54:	0800c179 	.word	0x0800c179
 800ca58:	0800d615 	.word	0x0800d615
 800ca5c:	0800e18a 	.word	0x0800e18a

0800ca60 <__sflush_r>:
 800ca60:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ca64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca68:	0716      	lsls	r6, r2, #28
 800ca6a:	4605      	mov	r5, r0
 800ca6c:	460c      	mov	r4, r1
 800ca6e:	d454      	bmi.n	800cb1a <__sflush_r+0xba>
 800ca70:	684b      	ldr	r3, [r1, #4]
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	dc02      	bgt.n	800ca7c <__sflush_r+0x1c>
 800ca76:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	dd48      	ble.n	800cb0e <__sflush_r+0xae>
 800ca7c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ca7e:	2e00      	cmp	r6, #0
 800ca80:	d045      	beq.n	800cb0e <__sflush_r+0xae>
 800ca82:	2300      	movs	r3, #0
 800ca84:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ca88:	682f      	ldr	r7, [r5, #0]
 800ca8a:	6a21      	ldr	r1, [r4, #32]
 800ca8c:	602b      	str	r3, [r5, #0]
 800ca8e:	d030      	beq.n	800caf2 <__sflush_r+0x92>
 800ca90:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ca92:	89a3      	ldrh	r3, [r4, #12]
 800ca94:	0759      	lsls	r1, r3, #29
 800ca96:	d505      	bpl.n	800caa4 <__sflush_r+0x44>
 800ca98:	6863      	ldr	r3, [r4, #4]
 800ca9a:	1ad2      	subs	r2, r2, r3
 800ca9c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ca9e:	b10b      	cbz	r3, 800caa4 <__sflush_r+0x44>
 800caa0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800caa2:	1ad2      	subs	r2, r2, r3
 800caa4:	2300      	movs	r3, #0
 800caa6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800caa8:	6a21      	ldr	r1, [r4, #32]
 800caaa:	4628      	mov	r0, r5
 800caac:	47b0      	blx	r6
 800caae:	1c43      	adds	r3, r0, #1
 800cab0:	89a3      	ldrh	r3, [r4, #12]
 800cab2:	d106      	bne.n	800cac2 <__sflush_r+0x62>
 800cab4:	6829      	ldr	r1, [r5, #0]
 800cab6:	291d      	cmp	r1, #29
 800cab8:	d82b      	bhi.n	800cb12 <__sflush_r+0xb2>
 800caba:	4a2a      	ldr	r2, [pc, #168]	@ (800cb64 <__sflush_r+0x104>)
 800cabc:	410a      	asrs	r2, r1
 800cabe:	07d6      	lsls	r6, r2, #31
 800cac0:	d427      	bmi.n	800cb12 <__sflush_r+0xb2>
 800cac2:	2200      	movs	r2, #0
 800cac4:	6062      	str	r2, [r4, #4]
 800cac6:	04d9      	lsls	r1, r3, #19
 800cac8:	6922      	ldr	r2, [r4, #16]
 800caca:	6022      	str	r2, [r4, #0]
 800cacc:	d504      	bpl.n	800cad8 <__sflush_r+0x78>
 800cace:	1c42      	adds	r2, r0, #1
 800cad0:	d101      	bne.n	800cad6 <__sflush_r+0x76>
 800cad2:	682b      	ldr	r3, [r5, #0]
 800cad4:	b903      	cbnz	r3, 800cad8 <__sflush_r+0x78>
 800cad6:	6560      	str	r0, [r4, #84]	@ 0x54
 800cad8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cada:	602f      	str	r7, [r5, #0]
 800cadc:	b1b9      	cbz	r1, 800cb0e <__sflush_r+0xae>
 800cade:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800cae2:	4299      	cmp	r1, r3
 800cae4:	d002      	beq.n	800caec <__sflush_r+0x8c>
 800cae6:	4628      	mov	r0, r5
 800cae8:	f7fd ffc6 	bl	800aa78 <_free_r>
 800caec:	2300      	movs	r3, #0
 800caee:	6363      	str	r3, [r4, #52]	@ 0x34
 800caf0:	e00d      	b.n	800cb0e <__sflush_r+0xae>
 800caf2:	2301      	movs	r3, #1
 800caf4:	4628      	mov	r0, r5
 800caf6:	47b0      	blx	r6
 800caf8:	4602      	mov	r2, r0
 800cafa:	1c50      	adds	r0, r2, #1
 800cafc:	d1c9      	bne.n	800ca92 <__sflush_r+0x32>
 800cafe:	682b      	ldr	r3, [r5, #0]
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d0c6      	beq.n	800ca92 <__sflush_r+0x32>
 800cb04:	2b1d      	cmp	r3, #29
 800cb06:	d001      	beq.n	800cb0c <__sflush_r+0xac>
 800cb08:	2b16      	cmp	r3, #22
 800cb0a:	d11e      	bne.n	800cb4a <__sflush_r+0xea>
 800cb0c:	602f      	str	r7, [r5, #0]
 800cb0e:	2000      	movs	r0, #0
 800cb10:	e022      	b.n	800cb58 <__sflush_r+0xf8>
 800cb12:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cb16:	b21b      	sxth	r3, r3
 800cb18:	e01b      	b.n	800cb52 <__sflush_r+0xf2>
 800cb1a:	690f      	ldr	r7, [r1, #16]
 800cb1c:	2f00      	cmp	r7, #0
 800cb1e:	d0f6      	beq.n	800cb0e <__sflush_r+0xae>
 800cb20:	0793      	lsls	r3, r2, #30
 800cb22:	680e      	ldr	r6, [r1, #0]
 800cb24:	bf08      	it	eq
 800cb26:	694b      	ldreq	r3, [r1, #20]
 800cb28:	600f      	str	r7, [r1, #0]
 800cb2a:	bf18      	it	ne
 800cb2c:	2300      	movne	r3, #0
 800cb2e:	eba6 0807 	sub.w	r8, r6, r7
 800cb32:	608b      	str	r3, [r1, #8]
 800cb34:	f1b8 0f00 	cmp.w	r8, #0
 800cb38:	dde9      	ble.n	800cb0e <__sflush_r+0xae>
 800cb3a:	6a21      	ldr	r1, [r4, #32]
 800cb3c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800cb3e:	4643      	mov	r3, r8
 800cb40:	463a      	mov	r2, r7
 800cb42:	4628      	mov	r0, r5
 800cb44:	47b0      	blx	r6
 800cb46:	2800      	cmp	r0, #0
 800cb48:	dc08      	bgt.n	800cb5c <__sflush_r+0xfc>
 800cb4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cb4e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cb52:	81a3      	strh	r3, [r4, #12]
 800cb54:	f04f 30ff 	mov.w	r0, #4294967295
 800cb58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb5c:	4407      	add	r7, r0
 800cb5e:	eba8 0800 	sub.w	r8, r8, r0
 800cb62:	e7e7      	b.n	800cb34 <__sflush_r+0xd4>
 800cb64:	dfbffffe 	.word	0xdfbffffe

0800cb68 <_fflush_r>:
 800cb68:	b538      	push	{r3, r4, r5, lr}
 800cb6a:	690b      	ldr	r3, [r1, #16]
 800cb6c:	4605      	mov	r5, r0
 800cb6e:	460c      	mov	r4, r1
 800cb70:	b913      	cbnz	r3, 800cb78 <_fflush_r+0x10>
 800cb72:	2500      	movs	r5, #0
 800cb74:	4628      	mov	r0, r5
 800cb76:	bd38      	pop	{r3, r4, r5, pc}
 800cb78:	b118      	cbz	r0, 800cb82 <_fflush_r+0x1a>
 800cb7a:	6a03      	ldr	r3, [r0, #32]
 800cb7c:	b90b      	cbnz	r3, 800cb82 <_fflush_r+0x1a>
 800cb7e:	f7fc feb1 	bl	80098e4 <__sinit>
 800cb82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	d0f3      	beq.n	800cb72 <_fflush_r+0xa>
 800cb8a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800cb8c:	07d0      	lsls	r0, r2, #31
 800cb8e:	d404      	bmi.n	800cb9a <_fflush_r+0x32>
 800cb90:	0599      	lsls	r1, r3, #22
 800cb92:	d402      	bmi.n	800cb9a <_fflush_r+0x32>
 800cb94:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cb96:	f7fd f912 	bl	8009dbe <__retarget_lock_acquire_recursive>
 800cb9a:	4628      	mov	r0, r5
 800cb9c:	4621      	mov	r1, r4
 800cb9e:	f7ff ff5f 	bl	800ca60 <__sflush_r>
 800cba2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800cba4:	07da      	lsls	r2, r3, #31
 800cba6:	4605      	mov	r5, r0
 800cba8:	d4e4      	bmi.n	800cb74 <_fflush_r+0xc>
 800cbaa:	89a3      	ldrh	r3, [r4, #12]
 800cbac:	059b      	lsls	r3, r3, #22
 800cbae:	d4e1      	bmi.n	800cb74 <_fflush_r+0xc>
 800cbb0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cbb2:	f7fd f905 	bl	8009dc0 <__retarget_lock_release_recursive>
 800cbb6:	e7dd      	b.n	800cb74 <_fflush_r+0xc>

0800cbb8 <__swhatbuf_r>:
 800cbb8:	b570      	push	{r4, r5, r6, lr}
 800cbba:	460c      	mov	r4, r1
 800cbbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cbc0:	2900      	cmp	r1, #0
 800cbc2:	b096      	sub	sp, #88	@ 0x58
 800cbc4:	4615      	mov	r5, r2
 800cbc6:	461e      	mov	r6, r3
 800cbc8:	da0d      	bge.n	800cbe6 <__swhatbuf_r+0x2e>
 800cbca:	89a3      	ldrh	r3, [r4, #12]
 800cbcc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800cbd0:	f04f 0100 	mov.w	r1, #0
 800cbd4:	bf14      	ite	ne
 800cbd6:	2340      	movne	r3, #64	@ 0x40
 800cbd8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800cbdc:	2000      	movs	r0, #0
 800cbde:	6031      	str	r1, [r6, #0]
 800cbe0:	602b      	str	r3, [r5, #0]
 800cbe2:	b016      	add	sp, #88	@ 0x58
 800cbe4:	bd70      	pop	{r4, r5, r6, pc}
 800cbe6:	466a      	mov	r2, sp
 800cbe8:	f000 f8d6 	bl	800cd98 <_fstat_r>
 800cbec:	2800      	cmp	r0, #0
 800cbee:	dbec      	blt.n	800cbca <__swhatbuf_r+0x12>
 800cbf0:	9901      	ldr	r1, [sp, #4]
 800cbf2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800cbf6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800cbfa:	4259      	negs	r1, r3
 800cbfc:	4159      	adcs	r1, r3
 800cbfe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cc02:	e7eb      	b.n	800cbdc <__swhatbuf_r+0x24>

0800cc04 <__smakebuf_r>:
 800cc04:	898b      	ldrh	r3, [r1, #12]
 800cc06:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cc08:	079d      	lsls	r5, r3, #30
 800cc0a:	4606      	mov	r6, r0
 800cc0c:	460c      	mov	r4, r1
 800cc0e:	d507      	bpl.n	800cc20 <__smakebuf_r+0x1c>
 800cc10:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800cc14:	6023      	str	r3, [r4, #0]
 800cc16:	6123      	str	r3, [r4, #16]
 800cc18:	2301      	movs	r3, #1
 800cc1a:	6163      	str	r3, [r4, #20]
 800cc1c:	b003      	add	sp, #12
 800cc1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cc20:	ab01      	add	r3, sp, #4
 800cc22:	466a      	mov	r2, sp
 800cc24:	f7ff ffc8 	bl	800cbb8 <__swhatbuf_r>
 800cc28:	9f00      	ldr	r7, [sp, #0]
 800cc2a:	4605      	mov	r5, r0
 800cc2c:	4639      	mov	r1, r7
 800cc2e:	4630      	mov	r0, r6
 800cc30:	f7fb fed4 	bl	80089dc <_malloc_r>
 800cc34:	b948      	cbnz	r0, 800cc4a <__smakebuf_r+0x46>
 800cc36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cc3a:	059a      	lsls	r2, r3, #22
 800cc3c:	d4ee      	bmi.n	800cc1c <__smakebuf_r+0x18>
 800cc3e:	f023 0303 	bic.w	r3, r3, #3
 800cc42:	f043 0302 	orr.w	r3, r3, #2
 800cc46:	81a3      	strh	r3, [r4, #12]
 800cc48:	e7e2      	b.n	800cc10 <__smakebuf_r+0xc>
 800cc4a:	89a3      	ldrh	r3, [r4, #12]
 800cc4c:	6020      	str	r0, [r4, #0]
 800cc4e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cc52:	81a3      	strh	r3, [r4, #12]
 800cc54:	9b01      	ldr	r3, [sp, #4]
 800cc56:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800cc5a:	b15b      	cbz	r3, 800cc74 <__smakebuf_r+0x70>
 800cc5c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cc60:	4630      	mov	r0, r6
 800cc62:	f000 f8ab 	bl	800cdbc <_isatty_r>
 800cc66:	b128      	cbz	r0, 800cc74 <__smakebuf_r+0x70>
 800cc68:	89a3      	ldrh	r3, [r4, #12]
 800cc6a:	f023 0303 	bic.w	r3, r3, #3
 800cc6e:	f043 0301 	orr.w	r3, r3, #1
 800cc72:	81a3      	strh	r3, [r4, #12]
 800cc74:	89a3      	ldrh	r3, [r4, #12]
 800cc76:	431d      	orrs	r5, r3
 800cc78:	81a5      	strh	r5, [r4, #12]
 800cc7a:	e7cf      	b.n	800cc1c <__smakebuf_r+0x18>

0800cc7c <__sccl>:
 800cc7c:	b570      	push	{r4, r5, r6, lr}
 800cc7e:	780b      	ldrb	r3, [r1, #0]
 800cc80:	4604      	mov	r4, r0
 800cc82:	2b5e      	cmp	r3, #94	@ 0x5e
 800cc84:	bf0b      	itete	eq
 800cc86:	784b      	ldrbeq	r3, [r1, #1]
 800cc88:	1c4a      	addne	r2, r1, #1
 800cc8a:	1c8a      	addeq	r2, r1, #2
 800cc8c:	2100      	movne	r1, #0
 800cc8e:	bf08      	it	eq
 800cc90:	2101      	moveq	r1, #1
 800cc92:	3801      	subs	r0, #1
 800cc94:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 800cc98:	f800 1f01 	strb.w	r1, [r0, #1]!
 800cc9c:	42a8      	cmp	r0, r5
 800cc9e:	d1fb      	bne.n	800cc98 <__sccl+0x1c>
 800cca0:	b90b      	cbnz	r3, 800cca6 <__sccl+0x2a>
 800cca2:	1e50      	subs	r0, r2, #1
 800cca4:	bd70      	pop	{r4, r5, r6, pc}
 800cca6:	f081 0101 	eor.w	r1, r1, #1
 800ccaa:	54e1      	strb	r1, [r4, r3]
 800ccac:	4610      	mov	r0, r2
 800ccae:	4602      	mov	r2, r0
 800ccb0:	f812 5b01 	ldrb.w	r5, [r2], #1
 800ccb4:	2d2d      	cmp	r5, #45	@ 0x2d
 800ccb6:	d005      	beq.n	800ccc4 <__sccl+0x48>
 800ccb8:	2d5d      	cmp	r5, #93	@ 0x5d
 800ccba:	d016      	beq.n	800ccea <__sccl+0x6e>
 800ccbc:	2d00      	cmp	r5, #0
 800ccbe:	d0f1      	beq.n	800cca4 <__sccl+0x28>
 800ccc0:	462b      	mov	r3, r5
 800ccc2:	e7f2      	b.n	800ccaa <__sccl+0x2e>
 800ccc4:	7846      	ldrb	r6, [r0, #1]
 800ccc6:	2e5d      	cmp	r6, #93	@ 0x5d
 800ccc8:	d0fa      	beq.n	800ccc0 <__sccl+0x44>
 800ccca:	42b3      	cmp	r3, r6
 800cccc:	dcf8      	bgt.n	800ccc0 <__sccl+0x44>
 800ccce:	3002      	adds	r0, #2
 800ccd0:	461a      	mov	r2, r3
 800ccd2:	3201      	adds	r2, #1
 800ccd4:	4296      	cmp	r6, r2
 800ccd6:	54a1      	strb	r1, [r4, r2]
 800ccd8:	dcfb      	bgt.n	800ccd2 <__sccl+0x56>
 800ccda:	1af2      	subs	r2, r6, r3
 800ccdc:	3a01      	subs	r2, #1
 800ccde:	1c5d      	adds	r5, r3, #1
 800cce0:	42b3      	cmp	r3, r6
 800cce2:	bfa8      	it	ge
 800cce4:	2200      	movge	r2, #0
 800cce6:	18ab      	adds	r3, r5, r2
 800cce8:	e7e1      	b.n	800ccae <__sccl+0x32>
 800ccea:	4610      	mov	r0, r2
 800ccec:	e7da      	b.n	800cca4 <__sccl+0x28>

0800ccee <__submore>:
 800ccee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ccf2:	460c      	mov	r4, r1
 800ccf4:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800ccf6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ccfa:	4299      	cmp	r1, r3
 800ccfc:	d11d      	bne.n	800cd3a <__submore+0x4c>
 800ccfe:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800cd02:	f7fb fe6b 	bl	80089dc <_malloc_r>
 800cd06:	b918      	cbnz	r0, 800cd10 <__submore+0x22>
 800cd08:	f04f 30ff 	mov.w	r0, #4294967295
 800cd0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd10:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cd14:	63a3      	str	r3, [r4, #56]	@ 0x38
 800cd16:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800cd1a:	6360      	str	r0, [r4, #52]	@ 0x34
 800cd1c:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 800cd20:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800cd24:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 800cd28:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800cd2c:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 800cd30:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800cd34:	6020      	str	r0, [r4, #0]
 800cd36:	2000      	movs	r0, #0
 800cd38:	e7e8      	b.n	800cd0c <__submore+0x1e>
 800cd3a:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800cd3c:	0077      	lsls	r7, r6, #1
 800cd3e:	463a      	mov	r2, r7
 800cd40:	f000 fbcb 	bl	800d4da <_realloc_r>
 800cd44:	4605      	mov	r5, r0
 800cd46:	2800      	cmp	r0, #0
 800cd48:	d0de      	beq.n	800cd08 <__submore+0x1a>
 800cd4a:	eb00 0806 	add.w	r8, r0, r6
 800cd4e:	4601      	mov	r1, r0
 800cd50:	4632      	mov	r2, r6
 800cd52:	4640      	mov	r0, r8
 800cd54:	f000 f842 	bl	800cddc <memcpy>
 800cd58:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 800cd5c:	f8c4 8000 	str.w	r8, [r4]
 800cd60:	e7e9      	b.n	800cd36 <__submore+0x48>

0800cd62 <memmove>:
 800cd62:	4288      	cmp	r0, r1
 800cd64:	b510      	push	{r4, lr}
 800cd66:	eb01 0402 	add.w	r4, r1, r2
 800cd6a:	d902      	bls.n	800cd72 <memmove+0x10>
 800cd6c:	4284      	cmp	r4, r0
 800cd6e:	4623      	mov	r3, r4
 800cd70:	d807      	bhi.n	800cd82 <memmove+0x20>
 800cd72:	1e43      	subs	r3, r0, #1
 800cd74:	42a1      	cmp	r1, r4
 800cd76:	d008      	beq.n	800cd8a <memmove+0x28>
 800cd78:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cd7c:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cd80:	e7f8      	b.n	800cd74 <memmove+0x12>
 800cd82:	4402      	add	r2, r0
 800cd84:	4601      	mov	r1, r0
 800cd86:	428a      	cmp	r2, r1
 800cd88:	d100      	bne.n	800cd8c <memmove+0x2a>
 800cd8a:	bd10      	pop	{r4, pc}
 800cd8c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cd90:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cd94:	e7f7      	b.n	800cd86 <memmove+0x24>
	...

0800cd98 <_fstat_r>:
 800cd98:	b538      	push	{r3, r4, r5, lr}
 800cd9a:	4d07      	ldr	r5, [pc, #28]	@ (800cdb8 <_fstat_r+0x20>)
 800cd9c:	2300      	movs	r3, #0
 800cd9e:	4604      	mov	r4, r0
 800cda0:	4608      	mov	r0, r1
 800cda2:	4611      	mov	r1, r2
 800cda4:	602b      	str	r3, [r5, #0]
 800cda6:	f7f5 ff4b 	bl	8002c40 <_fstat>
 800cdaa:	1c43      	adds	r3, r0, #1
 800cdac:	d102      	bne.n	800cdb4 <_fstat_r+0x1c>
 800cdae:	682b      	ldr	r3, [r5, #0]
 800cdb0:	b103      	cbz	r3, 800cdb4 <_fstat_r+0x1c>
 800cdb2:	6023      	str	r3, [r4, #0]
 800cdb4:	bd38      	pop	{r3, r4, r5, pc}
 800cdb6:	bf00      	nop
 800cdb8:	200008ac 	.word	0x200008ac

0800cdbc <_isatty_r>:
 800cdbc:	b538      	push	{r3, r4, r5, lr}
 800cdbe:	4d06      	ldr	r5, [pc, #24]	@ (800cdd8 <_isatty_r+0x1c>)
 800cdc0:	2300      	movs	r3, #0
 800cdc2:	4604      	mov	r4, r0
 800cdc4:	4608      	mov	r0, r1
 800cdc6:	602b      	str	r3, [r5, #0]
 800cdc8:	f7f5 ff4a 	bl	8002c60 <_isatty>
 800cdcc:	1c43      	adds	r3, r0, #1
 800cdce:	d102      	bne.n	800cdd6 <_isatty_r+0x1a>
 800cdd0:	682b      	ldr	r3, [r5, #0]
 800cdd2:	b103      	cbz	r3, 800cdd6 <_isatty_r+0x1a>
 800cdd4:	6023      	str	r3, [r4, #0]
 800cdd6:	bd38      	pop	{r3, r4, r5, pc}
 800cdd8:	200008ac 	.word	0x200008ac

0800cddc <memcpy>:
 800cddc:	440a      	add	r2, r1
 800cdde:	4291      	cmp	r1, r2
 800cde0:	f100 33ff 	add.w	r3, r0, #4294967295
 800cde4:	d100      	bne.n	800cde8 <memcpy+0xc>
 800cde6:	4770      	bx	lr
 800cde8:	b510      	push	{r4, lr}
 800cdea:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cdee:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cdf2:	4291      	cmp	r1, r2
 800cdf4:	d1f9      	bne.n	800cdea <memcpy+0xe>
 800cdf6:	bd10      	pop	{r4, pc}

0800cdf8 <nan>:
 800cdf8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800ce00 <nan+0x8>
 800cdfc:	4770      	bx	lr
 800cdfe:	bf00      	nop
 800ce00:	00000000 	.word	0x00000000
 800ce04:	7ff80000 	.word	0x7ff80000

0800ce08 <__assert_func>:
 800ce08:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ce0a:	4614      	mov	r4, r2
 800ce0c:	461a      	mov	r2, r3
 800ce0e:	4b09      	ldr	r3, [pc, #36]	@ (800ce34 <__assert_func+0x2c>)
 800ce10:	681b      	ldr	r3, [r3, #0]
 800ce12:	4605      	mov	r5, r0
 800ce14:	68d8      	ldr	r0, [r3, #12]
 800ce16:	b954      	cbnz	r4, 800ce2e <__assert_func+0x26>
 800ce18:	4b07      	ldr	r3, [pc, #28]	@ (800ce38 <__assert_func+0x30>)
 800ce1a:	461c      	mov	r4, r3
 800ce1c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ce20:	9100      	str	r1, [sp, #0]
 800ce22:	462b      	mov	r3, r5
 800ce24:	4905      	ldr	r1, [pc, #20]	@ (800ce3c <__assert_func+0x34>)
 800ce26:	f000 fc05 	bl	800d634 <fiprintf>
 800ce2a:	f000 fc15 	bl	800d658 <abort>
 800ce2e:	4b04      	ldr	r3, [pc, #16]	@ (800ce40 <__assert_func+0x38>)
 800ce30:	e7f4      	b.n	800ce1c <__assert_func+0x14>
 800ce32:	bf00      	nop
 800ce34:	20000090 	.word	0x20000090
 800ce38:	0800e1d8 	.word	0x0800e1d8
 800ce3c:	0800e1aa 	.word	0x0800e1aa
 800ce40:	0800e19d 	.word	0x0800e19d

0800ce44 <rshift>:
 800ce44:	6903      	ldr	r3, [r0, #16]
 800ce46:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800ce4a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ce4e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800ce52:	f100 0414 	add.w	r4, r0, #20
 800ce56:	dd45      	ble.n	800cee4 <rshift+0xa0>
 800ce58:	f011 011f 	ands.w	r1, r1, #31
 800ce5c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800ce60:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800ce64:	d10c      	bne.n	800ce80 <rshift+0x3c>
 800ce66:	f100 0710 	add.w	r7, r0, #16
 800ce6a:	4629      	mov	r1, r5
 800ce6c:	42b1      	cmp	r1, r6
 800ce6e:	d334      	bcc.n	800ceda <rshift+0x96>
 800ce70:	1a9b      	subs	r3, r3, r2
 800ce72:	009b      	lsls	r3, r3, #2
 800ce74:	1eea      	subs	r2, r5, #3
 800ce76:	4296      	cmp	r6, r2
 800ce78:	bf38      	it	cc
 800ce7a:	2300      	movcc	r3, #0
 800ce7c:	4423      	add	r3, r4
 800ce7e:	e015      	b.n	800ceac <rshift+0x68>
 800ce80:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800ce84:	f1c1 0820 	rsb	r8, r1, #32
 800ce88:	40cf      	lsrs	r7, r1
 800ce8a:	f105 0e04 	add.w	lr, r5, #4
 800ce8e:	46a1      	mov	r9, r4
 800ce90:	4576      	cmp	r6, lr
 800ce92:	46f4      	mov	ip, lr
 800ce94:	d815      	bhi.n	800cec2 <rshift+0x7e>
 800ce96:	1a9a      	subs	r2, r3, r2
 800ce98:	0092      	lsls	r2, r2, #2
 800ce9a:	3a04      	subs	r2, #4
 800ce9c:	3501      	adds	r5, #1
 800ce9e:	42ae      	cmp	r6, r5
 800cea0:	bf38      	it	cc
 800cea2:	2200      	movcc	r2, #0
 800cea4:	18a3      	adds	r3, r4, r2
 800cea6:	50a7      	str	r7, [r4, r2]
 800cea8:	b107      	cbz	r7, 800ceac <rshift+0x68>
 800ceaa:	3304      	adds	r3, #4
 800ceac:	1b1a      	subs	r2, r3, r4
 800ceae:	42a3      	cmp	r3, r4
 800ceb0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800ceb4:	bf08      	it	eq
 800ceb6:	2300      	moveq	r3, #0
 800ceb8:	6102      	str	r2, [r0, #16]
 800ceba:	bf08      	it	eq
 800cebc:	6143      	streq	r3, [r0, #20]
 800cebe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cec2:	f8dc c000 	ldr.w	ip, [ip]
 800cec6:	fa0c fc08 	lsl.w	ip, ip, r8
 800ceca:	ea4c 0707 	orr.w	r7, ip, r7
 800cece:	f849 7b04 	str.w	r7, [r9], #4
 800ced2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ced6:	40cf      	lsrs	r7, r1
 800ced8:	e7da      	b.n	800ce90 <rshift+0x4c>
 800ceda:	f851 cb04 	ldr.w	ip, [r1], #4
 800cede:	f847 cf04 	str.w	ip, [r7, #4]!
 800cee2:	e7c3      	b.n	800ce6c <rshift+0x28>
 800cee4:	4623      	mov	r3, r4
 800cee6:	e7e1      	b.n	800ceac <rshift+0x68>

0800cee8 <__hexdig_fun>:
 800cee8:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800ceec:	2b09      	cmp	r3, #9
 800ceee:	d802      	bhi.n	800cef6 <__hexdig_fun+0xe>
 800cef0:	3820      	subs	r0, #32
 800cef2:	b2c0      	uxtb	r0, r0
 800cef4:	4770      	bx	lr
 800cef6:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800cefa:	2b05      	cmp	r3, #5
 800cefc:	d801      	bhi.n	800cf02 <__hexdig_fun+0x1a>
 800cefe:	3847      	subs	r0, #71	@ 0x47
 800cf00:	e7f7      	b.n	800cef2 <__hexdig_fun+0xa>
 800cf02:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800cf06:	2b05      	cmp	r3, #5
 800cf08:	d801      	bhi.n	800cf0e <__hexdig_fun+0x26>
 800cf0a:	3827      	subs	r0, #39	@ 0x27
 800cf0c:	e7f1      	b.n	800cef2 <__hexdig_fun+0xa>
 800cf0e:	2000      	movs	r0, #0
 800cf10:	4770      	bx	lr
	...

0800cf14 <__gethex>:
 800cf14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf18:	b085      	sub	sp, #20
 800cf1a:	468a      	mov	sl, r1
 800cf1c:	9302      	str	r3, [sp, #8]
 800cf1e:	680b      	ldr	r3, [r1, #0]
 800cf20:	9001      	str	r0, [sp, #4]
 800cf22:	4690      	mov	r8, r2
 800cf24:	1c9c      	adds	r4, r3, #2
 800cf26:	46a1      	mov	r9, r4
 800cf28:	f814 0b01 	ldrb.w	r0, [r4], #1
 800cf2c:	2830      	cmp	r0, #48	@ 0x30
 800cf2e:	d0fa      	beq.n	800cf26 <__gethex+0x12>
 800cf30:	eba9 0303 	sub.w	r3, r9, r3
 800cf34:	f1a3 0b02 	sub.w	fp, r3, #2
 800cf38:	f7ff ffd6 	bl	800cee8 <__hexdig_fun>
 800cf3c:	4605      	mov	r5, r0
 800cf3e:	2800      	cmp	r0, #0
 800cf40:	d168      	bne.n	800d014 <__gethex+0x100>
 800cf42:	49a0      	ldr	r1, [pc, #640]	@ (800d1c4 <__gethex+0x2b0>)
 800cf44:	2201      	movs	r2, #1
 800cf46:	4648      	mov	r0, r9
 800cf48:	f7fc fe8c 	bl	8009c64 <strncmp>
 800cf4c:	4607      	mov	r7, r0
 800cf4e:	2800      	cmp	r0, #0
 800cf50:	d167      	bne.n	800d022 <__gethex+0x10e>
 800cf52:	f899 0001 	ldrb.w	r0, [r9, #1]
 800cf56:	4626      	mov	r6, r4
 800cf58:	f7ff ffc6 	bl	800cee8 <__hexdig_fun>
 800cf5c:	2800      	cmp	r0, #0
 800cf5e:	d062      	beq.n	800d026 <__gethex+0x112>
 800cf60:	4623      	mov	r3, r4
 800cf62:	7818      	ldrb	r0, [r3, #0]
 800cf64:	2830      	cmp	r0, #48	@ 0x30
 800cf66:	4699      	mov	r9, r3
 800cf68:	f103 0301 	add.w	r3, r3, #1
 800cf6c:	d0f9      	beq.n	800cf62 <__gethex+0x4e>
 800cf6e:	f7ff ffbb 	bl	800cee8 <__hexdig_fun>
 800cf72:	fab0 f580 	clz	r5, r0
 800cf76:	096d      	lsrs	r5, r5, #5
 800cf78:	f04f 0b01 	mov.w	fp, #1
 800cf7c:	464a      	mov	r2, r9
 800cf7e:	4616      	mov	r6, r2
 800cf80:	3201      	adds	r2, #1
 800cf82:	7830      	ldrb	r0, [r6, #0]
 800cf84:	f7ff ffb0 	bl	800cee8 <__hexdig_fun>
 800cf88:	2800      	cmp	r0, #0
 800cf8a:	d1f8      	bne.n	800cf7e <__gethex+0x6a>
 800cf8c:	498d      	ldr	r1, [pc, #564]	@ (800d1c4 <__gethex+0x2b0>)
 800cf8e:	2201      	movs	r2, #1
 800cf90:	4630      	mov	r0, r6
 800cf92:	f7fc fe67 	bl	8009c64 <strncmp>
 800cf96:	2800      	cmp	r0, #0
 800cf98:	d13f      	bne.n	800d01a <__gethex+0x106>
 800cf9a:	b944      	cbnz	r4, 800cfae <__gethex+0x9a>
 800cf9c:	1c74      	adds	r4, r6, #1
 800cf9e:	4622      	mov	r2, r4
 800cfa0:	4616      	mov	r6, r2
 800cfa2:	3201      	adds	r2, #1
 800cfa4:	7830      	ldrb	r0, [r6, #0]
 800cfa6:	f7ff ff9f 	bl	800cee8 <__hexdig_fun>
 800cfaa:	2800      	cmp	r0, #0
 800cfac:	d1f8      	bne.n	800cfa0 <__gethex+0x8c>
 800cfae:	1ba4      	subs	r4, r4, r6
 800cfb0:	00a7      	lsls	r7, r4, #2
 800cfb2:	7833      	ldrb	r3, [r6, #0]
 800cfb4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800cfb8:	2b50      	cmp	r3, #80	@ 0x50
 800cfba:	d13e      	bne.n	800d03a <__gethex+0x126>
 800cfbc:	7873      	ldrb	r3, [r6, #1]
 800cfbe:	2b2b      	cmp	r3, #43	@ 0x2b
 800cfc0:	d033      	beq.n	800d02a <__gethex+0x116>
 800cfc2:	2b2d      	cmp	r3, #45	@ 0x2d
 800cfc4:	d034      	beq.n	800d030 <__gethex+0x11c>
 800cfc6:	1c71      	adds	r1, r6, #1
 800cfc8:	2400      	movs	r4, #0
 800cfca:	7808      	ldrb	r0, [r1, #0]
 800cfcc:	f7ff ff8c 	bl	800cee8 <__hexdig_fun>
 800cfd0:	1e43      	subs	r3, r0, #1
 800cfd2:	b2db      	uxtb	r3, r3
 800cfd4:	2b18      	cmp	r3, #24
 800cfd6:	d830      	bhi.n	800d03a <__gethex+0x126>
 800cfd8:	f1a0 0210 	sub.w	r2, r0, #16
 800cfdc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800cfe0:	f7ff ff82 	bl	800cee8 <__hexdig_fun>
 800cfe4:	f100 3cff 	add.w	ip, r0, #4294967295
 800cfe8:	fa5f fc8c 	uxtb.w	ip, ip
 800cfec:	f1bc 0f18 	cmp.w	ip, #24
 800cff0:	f04f 030a 	mov.w	r3, #10
 800cff4:	d91e      	bls.n	800d034 <__gethex+0x120>
 800cff6:	b104      	cbz	r4, 800cffa <__gethex+0xe6>
 800cff8:	4252      	negs	r2, r2
 800cffa:	4417      	add	r7, r2
 800cffc:	f8ca 1000 	str.w	r1, [sl]
 800d000:	b1ed      	cbz	r5, 800d03e <__gethex+0x12a>
 800d002:	f1bb 0f00 	cmp.w	fp, #0
 800d006:	bf0c      	ite	eq
 800d008:	2506      	moveq	r5, #6
 800d00a:	2500      	movne	r5, #0
 800d00c:	4628      	mov	r0, r5
 800d00e:	b005      	add	sp, #20
 800d010:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d014:	2500      	movs	r5, #0
 800d016:	462c      	mov	r4, r5
 800d018:	e7b0      	b.n	800cf7c <__gethex+0x68>
 800d01a:	2c00      	cmp	r4, #0
 800d01c:	d1c7      	bne.n	800cfae <__gethex+0x9a>
 800d01e:	4627      	mov	r7, r4
 800d020:	e7c7      	b.n	800cfb2 <__gethex+0x9e>
 800d022:	464e      	mov	r6, r9
 800d024:	462f      	mov	r7, r5
 800d026:	2501      	movs	r5, #1
 800d028:	e7c3      	b.n	800cfb2 <__gethex+0x9e>
 800d02a:	2400      	movs	r4, #0
 800d02c:	1cb1      	adds	r1, r6, #2
 800d02e:	e7cc      	b.n	800cfca <__gethex+0xb6>
 800d030:	2401      	movs	r4, #1
 800d032:	e7fb      	b.n	800d02c <__gethex+0x118>
 800d034:	fb03 0002 	mla	r0, r3, r2, r0
 800d038:	e7ce      	b.n	800cfd8 <__gethex+0xc4>
 800d03a:	4631      	mov	r1, r6
 800d03c:	e7de      	b.n	800cffc <__gethex+0xe8>
 800d03e:	eba6 0309 	sub.w	r3, r6, r9
 800d042:	3b01      	subs	r3, #1
 800d044:	4629      	mov	r1, r5
 800d046:	2b07      	cmp	r3, #7
 800d048:	dc0a      	bgt.n	800d060 <__gethex+0x14c>
 800d04a:	9801      	ldr	r0, [sp, #4]
 800d04c:	f7fd fd5e 	bl	800ab0c <_Balloc>
 800d050:	4604      	mov	r4, r0
 800d052:	b940      	cbnz	r0, 800d066 <__gethex+0x152>
 800d054:	4b5c      	ldr	r3, [pc, #368]	@ (800d1c8 <__gethex+0x2b4>)
 800d056:	4602      	mov	r2, r0
 800d058:	21e4      	movs	r1, #228	@ 0xe4
 800d05a:	485c      	ldr	r0, [pc, #368]	@ (800d1cc <__gethex+0x2b8>)
 800d05c:	f7ff fed4 	bl	800ce08 <__assert_func>
 800d060:	3101      	adds	r1, #1
 800d062:	105b      	asrs	r3, r3, #1
 800d064:	e7ef      	b.n	800d046 <__gethex+0x132>
 800d066:	f100 0a14 	add.w	sl, r0, #20
 800d06a:	2300      	movs	r3, #0
 800d06c:	4655      	mov	r5, sl
 800d06e:	469b      	mov	fp, r3
 800d070:	45b1      	cmp	r9, r6
 800d072:	d337      	bcc.n	800d0e4 <__gethex+0x1d0>
 800d074:	f845 bb04 	str.w	fp, [r5], #4
 800d078:	eba5 050a 	sub.w	r5, r5, sl
 800d07c:	10ad      	asrs	r5, r5, #2
 800d07e:	6125      	str	r5, [r4, #16]
 800d080:	4658      	mov	r0, fp
 800d082:	f7fd fe35 	bl	800acf0 <__hi0bits>
 800d086:	016d      	lsls	r5, r5, #5
 800d088:	f8d8 6000 	ldr.w	r6, [r8]
 800d08c:	1a2d      	subs	r5, r5, r0
 800d08e:	42b5      	cmp	r5, r6
 800d090:	dd54      	ble.n	800d13c <__gethex+0x228>
 800d092:	1bad      	subs	r5, r5, r6
 800d094:	4629      	mov	r1, r5
 800d096:	4620      	mov	r0, r4
 800d098:	f7fe f9c9 	bl	800b42e <__any_on>
 800d09c:	4681      	mov	r9, r0
 800d09e:	b178      	cbz	r0, 800d0c0 <__gethex+0x1ac>
 800d0a0:	1e6b      	subs	r3, r5, #1
 800d0a2:	1159      	asrs	r1, r3, #5
 800d0a4:	f003 021f 	and.w	r2, r3, #31
 800d0a8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800d0ac:	f04f 0901 	mov.w	r9, #1
 800d0b0:	fa09 f202 	lsl.w	r2, r9, r2
 800d0b4:	420a      	tst	r2, r1
 800d0b6:	d003      	beq.n	800d0c0 <__gethex+0x1ac>
 800d0b8:	454b      	cmp	r3, r9
 800d0ba:	dc36      	bgt.n	800d12a <__gethex+0x216>
 800d0bc:	f04f 0902 	mov.w	r9, #2
 800d0c0:	4629      	mov	r1, r5
 800d0c2:	4620      	mov	r0, r4
 800d0c4:	f7ff febe 	bl	800ce44 <rshift>
 800d0c8:	442f      	add	r7, r5
 800d0ca:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d0ce:	42bb      	cmp	r3, r7
 800d0d0:	da42      	bge.n	800d158 <__gethex+0x244>
 800d0d2:	9801      	ldr	r0, [sp, #4]
 800d0d4:	4621      	mov	r1, r4
 800d0d6:	f7fd fd59 	bl	800ab8c <_Bfree>
 800d0da:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d0dc:	2300      	movs	r3, #0
 800d0de:	6013      	str	r3, [r2, #0]
 800d0e0:	25a3      	movs	r5, #163	@ 0xa3
 800d0e2:	e793      	b.n	800d00c <__gethex+0xf8>
 800d0e4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800d0e8:	2a2e      	cmp	r2, #46	@ 0x2e
 800d0ea:	d012      	beq.n	800d112 <__gethex+0x1fe>
 800d0ec:	2b20      	cmp	r3, #32
 800d0ee:	d104      	bne.n	800d0fa <__gethex+0x1e6>
 800d0f0:	f845 bb04 	str.w	fp, [r5], #4
 800d0f4:	f04f 0b00 	mov.w	fp, #0
 800d0f8:	465b      	mov	r3, fp
 800d0fa:	7830      	ldrb	r0, [r6, #0]
 800d0fc:	9303      	str	r3, [sp, #12]
 800d0fe:	f7ff fef3 	bl	800cee8 <__hexdig_fun>
 800d102:	9b03      	ldr	r3, [sp, #12]
 800d104:	f000 000f 	and.w	r0, r0, #15
 800d108:	4098      	lsls	r0, r3
 800d10a:	ea4b 0b00 	orr.w	fp, fp, r0
 800d10e:	3304      	adds	r3, #4
 800d110:	e7ae      	b.n	800d070 <__gethex+0x15c>
 800d112:	45b1      	cmp	r9, r6
 800d114:	d8ea      	bhi.n	800d0ec <__gethex+0x1d8>
 800d116:	492b      	ldr	r1, [pc, #172]	@ (800d1c4 <__gethex+0x2b0>)
 800d118:	9303      	str	r3, [sp, #12]
 800d11a:	2201      	movs	r2, #1
 800d11c:	4630      	mov	r0, r6
 800d11e:	f7fc fda1 	bl	8009c64 <strncmp>
 800d122:	9b03      	ldr	r3, [sp, #12]
 800d124:	2800      	cmp	r0, #0
 800d126:	d1e1      	bne.n	800d0ec <__gethex+0x1d8>
 800d128:	e7a2      	b.n	800d070 <__gethex+0x15c>
 800d12a:	1ea9      	subs	r1, r5, #2
 800d12c:	4620      	mov	r0, r4
 800d12e:	f7fe f97e 	bl	800b42e <__any_on>
 800d132:	2800      	cmp	r0, #0
 800d134:	d0c2      	beq.n	800d0bc <__gethex+0x1a8>
 800d136:	f04f 0903 	mov.w	r9, #3
 800d13a:	e7c1      	b.n	800d0c0 <__gethex+0x1ac>
 800d13c:	da09      	bge.n	800d152 <__gethex+0x23e>
 800d13e:	1b75      	subs	r5, r6, r5
 800d140:	4621      	mov	r1, r4
 800d142:	9801      	ldr	r0, [sp, #4]
 800d144:	462a      	mov	r2, r5
 800d146:	f7fd ff39 	bl	800afbc <__lshift>
 800d14a:	1b7f      	subs	r7, r7, r5
 800d14c:	4604      	mov	r4, r0
 800d14e:	f100 0a14 	add.w	sl, r0, #20
 800d152:	f04f 0900 	mov.w	r9, #0
 800d156:	e7b8      	b.n	800d0ca <__gethex+0x1b6>
 800d158:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800d15c:	42bd      	cmp	r5, r7
 800d15e:	dd6f      	ble.n	800d240 <__gethex+0x32c>
 800d160:	1bed      	subs	r5, r5, r7
 800d162:	42ae      	cmp	r6, r5
 800d164:	dc34      	bgt.n	800d1d0 <__gethex+0x2bc>
 800d166:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d16a:	2b02      	cmp	r3, #2
 800d16c:	d022      	beq.n	800d1b4 <__gethex+0x2a0>
 800d16e:	2b03      	cmp	r3, #3
 800d170:	d024      	beq.n	800d1bc <__gethex+0x2a8>
 800d172:	2b01      	cmp	r3, #1
 800d174:	d115      	bne.n	800d1a2 <__gethex+0x28e>
 800d176:	42ae      	cmp	r6, r5
 800d178:	d113      	bne.n	800d1a2 <__gethex+0x28e>
 800d17a:	2e01      	cmp	r6, #1
 800d17c:	d10b      	bne.n	800d196 <__gethex+0x282>
 800d17e:	9a02      	ldr	r2, [sp, #8]
 800d180:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d184:	6013      	str	r3, [r2, #0]
 800d186:	2301      	movs	r3, #1
 800d188:	6123      	str	r3, [r4, #16]
 800d18a:	f8ca 3000 	str.w	r3, [sl]
 800d18e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d190:	2562      	movs	r5, #98	@ 0x62
 800d192:	601c      	str	r4, [r3, #0]
 800d194:	e73a      	b.n	800d00c <__gethex+0xf8>
 800d196:	1e71      	subs	r1, r6, #1
 800d198:	4620      	mov	r0, r4
 800d19a:	f7fe f948 	bl	800b42e <__any_on>
 800d19e:	2800      	cmp	r0, #0
 800d1a0:	d1ed      	bne.n	800d17e <__gethex+0x26a>
 800d1a2:	9801      	ldr	r0, [sp, #4]
 800d1a4:	4621      	mov	r1, r4
 800d1a6:	f7fd fcf1 	bl	800ab8c <_Bfree>
 800d1aa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d1ac:	2300      	movs	r3, #0
 800d1ae:	6013      	str	r3, [r2, #0]
 800d1b0:	2550      	movs	r5, #80	@ 0x50
 800d1b2:	e72b      	b.n	800d00c <__gethex+0xf8>
 800d1b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	d1f3      	bne.n	800d1a2 <__gethex+0x28e>
 800d1ba:	e7e0      	b.n	800d17e <__gethex+0x26a>
 800d1bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	d1dd      	bne.n	800d17e <__gethex+0x26a>
 800d1c2:	e7ee      	b.n	800d1a2 <__gethex+0x28e>
 800d1c4:	0800e010 	.word	0x0800e010
 800d1c8:	0800dea3 	.word	0x0800dea3
 800d1cc:	0800e1d9 	.word	0x0800e1d9
 800d1d0:	1e6f      	subs	r7, r5, #1
 800d1d2:	f1b9 0f00 	cmp.w	r9, #0
 800d1d6:	d130      	bne.n	800d23a <__gethex+0x326>
 800d1d8:	b127      	cbz	r7, 800d1e4 <__gethex+0x2d0>
 800d1da:	4639      	mov	r1, r7
 800d1dc:	4620      	mov	r0, r4
 800d1de:	f7fe f926 	bl	800b42e <__any_on>
 800d1e2:	4681      	mov	r9, r0
 800d1e4:	117a      	asrs	r2, r7, #5
 800d1e6:	2301      	movs	r3, #1
 800d1e8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800d1ec:	f007 071f 	and.w	r7, r7, #31
 800d1f0:	40bb      	lsls	r3, r7
 800d1f2:	4213      	tst	r3, r2
 800d1f4:	4629      	mov	r1, r5
 800d1f6:	4620      	mov	r0, r4
 800d1f8:	bf18      	it	ne
 800d1fa:	f049 0902 	orrne.w	r9, r9, #2
 800d1fe:	f7ff fe21 	bl	800ce44 <rshift>
 800d202:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800d206:	1b76      	subs	r6, r6, r5
 800d208:	2502      	movs	r5, #2
 800d20a:	f1b9 0f00 	cmp.w	r9, #0
 800d20e:	d047      	beq.n	800d2a0 <__gethex+0x38c>
 800d210:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d214:	2b02      	cmp	r3, #2
 800d216:	d015      	beq.n	800d244 <__gethex+0x330>
 800d218:	2b03      	cmp	r3, #3
 800d21a:	d017      	beq.n	800d24c <__gethex+0x338>
 800d21c:	2b01      	cmp	r3, #1
 800d21e:	d109      	bne.n	800d234 <__gethex+0x320>
 800d220:	f019 0f02 	tst.w	r9, #2
 800d224:	d006      	beq.n	800d234 <__gethex+0x320>
 800d226:	f8da 3000 	ldr.w	r3, [sl]
 800d22a:	ea49 0903 	orr.w	r9, r9, r3
 800d22e:	f019 0f01 	tst.w	r9, #1
 800d232:	d10e      	bne.n	800d252 <__gethex+0x33e>
 800d234:	f045 0510 	orr.w	r5, r5, #16
 800d238:	e032      	b.n	800d2a0 <__gethex+0x38c>
 800d23a:	f04f 0901 	mov.w	r9, #1
 800d23e:	e7d1      	b.n	800d1e4 <__gethex+0x2d0>
 800d240:	2501      	movs	r5, #1
 800d242:	e7e2      	b.n	800d20a <__gethex+0x2f6>
 800d244:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d246:	f1c3 0301 	rsb	r3, r3, #1
 800d24a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d24c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d24e:	2b00      	cmp	r3, #0
 800d250:	d0f0      	beq.n	800d234 <__gethex+0x320>
 800d252:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800d256:	f104 0314 	add.w	r3, r4, #20
 800d25a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800d25e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800d262:	f04f 0c00 	mov.w	ip, #0
 800d266:	4618      	mov	r0, r3
 800d268:	f853 2b04 	ldr.w	r2, [r3], #4
 800d26c:	f1b2 3fff 	cmp.w	r2, #4294967295
 800d270:	d01b      	beq.n	800d2aa <__gethex+0x396>
 800d272:	3201      	adds	r2, #1
 800d274:	6002      	str	r2, [r0, #0]
 800d276:	2d02      	cmp	r5, #2
 800d278:	f104 0314 	add.w	r3, r4, #20
 800d27c:	d13c      	bne.n	800d2f8 <__gethex+0x3e4>
 800d27e:	f8d8 2000 	ldr.w	r2, [r8]
 800d282:	3a01      	subs	r2, #1
 800d284:	42b2      	cmp	r2, r6
 800d286:	d109      	bne.n	800d29c <__gethex+0x388>
 800d288:	1171      	asrs	r1, r6, #5
 800d28a:	2201      	movs	r2, #1
 800d28c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d290:	f006 061f 	and.w	r6, r6, #31
 800d294:	fa02 f606 	lsl.w	r6, r2, r6
 800d298:	421e      	tst	r6, r3
 800d29a:	d13a      	bne.n	800d312 <__gethex+0x3fe>
 800d29c:	f045 0520 	orr.w	r5, r5, #32
 800d2a0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d2a2:	601c      	str	r4, [r3, #0]
 800d2a4:	9b02      	ldr	r3, [sp, #8]
 800d2a6:	601f      	str	r7, [r3, #0]
 800d2a8:	e6b0      	b.n	800d00c <__gethex+0xf8>
 800d2aa:	4299      	cmp	r1, r3
 800d2ac:	f843 cc04 	str.w	ip, [r3, #-4]
 800d2b0:	d8d9      	bhi.n	800d266 <__gethex+0x352>
 800d2b2:	68a3      	ldr	r3, [r4, #8]
 800d2b4:	459b      	cmp	fp, r3
 800d2b6:	db17      	blt.n	800d2e8 <__gethex+0x3d4>
 800d2b8:	6861      	ldr	r1, [r4, #4]
 800d2ba:	9801      	ldr	r0, [sp, #4]
 800d2bc:	3101      	adds	r1, #1
 800d2be:	f7fd fc25 	bl	800ab0c <_Balloc>
 800d2c2:	4681      	mov	r9, r0
 800d2c4:	b918      	cbnz	r0, 800d2ce <__gethex+0x3ba>
 800d2c6:	4b1a      	ldr	r3, [pc, #104]	@ (800d330 <__gethex+0x41c>)
 800d2c8:	4602      	mov	r2, r0
 800d2ca:	2184      	movs	r1, #132	@ 0x84
 800d2cc:	e6c5      	b.n	800d05a <__gethex+0x146>
 800d2ce:	6922      	ldr	r2, [r4, #16]
 800d2d0:	3202      	adds	r2, #2
 800d2d2:	f104 010c 	add.w	r1, r4, #12
 800d2d6:	0092      	lsls	r2, r2, #2
 800d2d8:	300c      	adds	r0, #12
 800d2da:	f7ff fd7f 	bl	800cddc <memcpy>
 800d2de:	4621      	mov	r1, r4
 800d2e0:	9801      	ldr	r0, [sp, #4]
 800d2e2:	f7fd fc53 	bl	800ab8c <_Bfree>
 800d2e6:	464c      	mov	r4, r9
 800d2e8:	6923      	ldr	r3, [r4, #16]
 800d2ea:	1c5a      	adds	r2, r3, #1
 800d2ec:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d2f0:	6122      	str	r2, [r4, #16]
 800d2f2:	2201      	movs	r2, #1
 800d2f4:	615a      	str	r2, [r3, #20]
 800d2f6:	e7be      	b.n	800d276 <__gethex+0x362>
 800d2f8:	6922      	ldr	r2, [r4, #16]
 800d2fa:	455a      	cmp	r2, fp
 800d2fc:	dd0b      	ble.n	800d316 <__gethex+0x402>
 800d2fe:	2101      	movs	r1, #1
 800d300:	4620      	mov	r0, r4
 800d302:	f7ff fd9f 	bl	800ce44 <rshift>
 800d306:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d30a:	3701      	adds	r7, #1
 800d30c:	42bb      	cmp	r3, r7
 800d30e:	f6ff aee0 	blt.w	800d0d2 <__gethex+0x1be>
 800d312:	2501      	movs	r5, #1
 800d314:	e7c2      	b.n	800d29c <__gethex+0x388>
 800d316:	f016 061f 	ands.w	r6, r6, #31
 800d31a:	d0fa      	beq.n	800d312 <__gethex+0x3fe>
 800d31c:	4453      	add	r3, sl
 800d31e:	f1c6 0620 	rsb	r6, r6, #32
 800d322:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800d326:	f7fd fce3 	bl	800acf0 <__hi0bits>
 800d32a:	42b0      	cmp	r0, r6
 800d32c:	dbe7      	blt.n	800d2fe <__gethex+0x3ea>
 800d32e:	e7f0      	b.n	800d312 <__gethex+0x3fe>
 800d330:	0800dea3 	.word	0x0800dea3

0800d334 <L_shift>:
 800d334:	f1c2 0208 	rsb	r2, r2, #8
 800d338:	0092      	lsls	r2, r2, #2
 800d33a:	b570      	push	{r4, r5, r6, lr}
 800d33c:	f1c2 0620 	rsb	r6, r2, #32
 800d340:	6843      	ldr	r3, [r0, #4]
 800d342:	6804      	ldr	r4, [r0, #0]
 800d344:	fa03 f506 	lsl.w	r5, r3, r6
 800d348:	432c      	orrs	r4, r5
 800d34a:	40d3      	lsrs	r3, r2
 800d34c:	6004      	str	r4, [r0, #0]
 800d34e:	f840 3f04 	str.w	r3, [r0, #4]!
 800d352:	4288      	cmp	r0, r1
 800d354:	d3f4      	bcc.n	800d340 <L_shift+0xc>
 800d356:	bd70      	pop	{r4, r5, r6, pc}

0800d358 <__match>:
 800d358:	b530      	push	{r4, r5, lr}
 800d35a:	6803      	ldr	r3, [r0, #0]
 800d35c:	3301      	adds	r3, #1
 800d35e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d362:	b914      	cbnz	r4, 800d36a <__match+0x12>
 800d364:	6003      	str	r3, [r0, #0]
 800d366:	2001      	movs	r0, #1
 800d368:	bd30      	pop	{r4, r5, pc}
 800d36a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d36e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800d372:	2d19      	cmp	r5, #25
 800d374:	bf98      	it	ls
 800d376:	3220      	addls	r2, #32
 800d378:	42a2      	cmp	r2, r4
 800d37a:	d0f0      	beq.n	800d35e <__match+0x6>
 800d37c:	2000      	movs	r0, #0
 800d37e:	e7f3      	b.n	800d368 <__match+0x10>

0800d380 <__hexnan>:
 800d380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d384:	680b      	ldr	r3, [r1, #0]
 800d386:	6801      	ldr	r1, [r0, #0]
 800d388:	115e      	asrs	r6, r3, #5
 800d38a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800d38e:	f013 031f 	ands.w	r3, r3, #31
 800d392:	b087      	sub	sp, #28
 800d394:	bf18      	it	ne
 800d396:	3604      	addne	r6, #4
 800d398:	2500      	movs	r5, #0
 800d39a:	1f37      	subs	r7, r6, #4
 800d39c:	4682      	mov	sl, r0
 800d39e:	4690      	mov	r8, r2
 800d3a0:	9301      	str	r3, [sp, #4]
 800d3a2:	f846 5c04 	str.w	r5, [r6, #-4]
 800d3a6:	46b9      	mov	r9, r7
 800d3a8:	463c      	mov	r4, r7
 800d3aa:	9502      	str	r5, [sp, #8]
 800d3ac:	46ab      	mov	fp, r5
 800d3ae:	784a      	ldrb	r2, [r1, #1]
 800d3b0:	1c4b      	adds	r3, r1, #1
 800d3b2:	9303      	str	r3, [sp, #12]
 800d3b4:	b342      	cbz	r2, 800d408 <__hexnan+0x88>
 800d3b6:	4610      	mov	r0, r2
 800d3b8:	9105      	str	r1, [sp, #20]
 800d3ba:	9204      	str	r2, [sp, #16]
 800d3bc:	f7ff fd94 	bl	800cee8 <__hexdig_fun>
 800d3c0:	2800      	cmp	r0, #0
 800d3c2:	d151      	bne.n	800d468 <__hexnan+0xe8>
 800d3c4:	9a04      	ldr	r2, [sp, #16]
 800d3c6:	9905      	ldr	r1, [sp, #20]
 800d3c8:	2a20      	cmp	r2, #32
 800d3ca:	d818      	bhi.n	800d3fe <__hexnan+0x7e>
 800d3cc:	9b02      	ldr	r3, [sp, #8]
 800d3ce:	459b      	cmp	fp, r3
 800d3d0:	dd13      	ble.n	800d3fa <__hexnan+0x7a>
 800d3d2:	454c      	cmp	r4, r9
 800d3d4:	d206      	bcs.n	800d3e4 <__hexnan+0x64>
 800d3d6:	2d07      	cmp	r5, #7
 800d3d8:	dc04      	bgt.n	800d3e4 <__hexnan+0x64>
 800d3da:	462a      	mov	r2, r5
 800d3dc:	4649      	mov	r1, r9
 800d3de:	4620      	mov	r0, r4
 800d3e0:	f7ff ffa8 	bl	800d334 <L_shift>
 800d3e4:	4544      	cmp	r4, r8
 800d3e6:	d952      	bls.n	800d48e <__hexnan+0x10e>
 800d3e8:	2300      	movs	r3, #0
 800d3ea:	f1a4 0904 	sub.w	r9, r4, #4
 800d3ee:	f844 3c04 	str.w	r3, [r4, #-4]
 800d3f2:	f8cd b008 	str.w	fp, [sp, #8]
 800d3f6:	464c      	mov	r4, r9
 800d3f8:	461d      	mov	r5, r3
 800d3fa:	9903      	ldr	r1, [sp, #12]
 800d3fc:	e7d7      	b.n	800d3ae <__hexnan+0x2e>
 800d3fe:	2a29      	cmp	r2, #41	@ 0x29
 800d400:	d157      	bne.n	800d4b2 <__hexnan+0x132>
 800d402:	3102      	adds	r1, #2
 800d404:	f8ca 1000 	str.w	r1, [sl]
 800d408:	f1bb 0f00 	cmp.w	fp, #0
 800d40c:	d051      	beq.n	800d4b2 <__hexnan+0x132>
 800d40e:	454c      	cmp	r4, r9
 800d410:	d206      	bcs.n	800d420 <__hexnan+0xa0>
 800d412:	2d07      	cmp	r5, #7
 800d414:	dc04      	bgt.n	800d420 <__hexnan+0xa0>
 800d416:	462a      	mov	r2, r5
 800d418:	4649      	mov	r1, r9
 800d41a:	4620      	mov	r0, r4
 800d41c:	f7ff ff8a 	bl	800d334 <L_shift>
 800d420:	4544      	cmp	r4, r8
 800d422:	d936      	bls.n	800d492 <__hexnan+0x112>
 800d424:	f1a8 0204 	sub.w	r2, r8, #4
 800d428:	4623      	mov	r3, r4
 800d42a:	f853 1b04 	ldr.w	r1, [r3], #4
 800d42e:	f842 1f04 	str.w	r1, [r2, #4]!
 800d432:	429f      	cmp	r7, r3
 800d434:	d2f9      	bcs.n	800d42a <__hexnan+0xaa>
 800d436:	1b3b      	subs	r3, r7, r4
 800d438:	f023 0303 	bic.w	r3, r3, #3
 800d43c:	3304      	adds	r3, #4
 800d43e:	3401      	adds	r4, #1
 800d440:	3e03      	subs	r6, #3
 800d442:	42b4      	cmp	r4, r6
 800d444:	bf88      	it	hi
 800d446:	2304      	movhi	r3, #4
 800d448:	4443      	add	r3, r8
 800d44a:	2200      	movs	r2, #0
 800d44c:	f843 2b04 	str.w	r2, [r3], #4
 800d450:	429f      	cmp	r7, r3
 800d452:	d2fb      	bcs.n	800d44c <__hexnan+0xcc>
 800d454:	683b      	ldr	r3, [r7, #0]
 800d456:	b91b      	cbnz	r3, 800d460 <__hexnan+0xe0>
 800d458:	4547      	cmp	r7, r8
 800d45a:	d128      	bne.n	800d4ae <__hexnan+0x12e>
 800d45c:	2301      	movs	r3, #1
 800d45e:	603b      	str	r3, [r7, #0]
 800d460:	2005      	movs	r0, #5
 800d462:	b007      	add	sp, #28
 800d464:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d468:	3501      	adds	r5, #1
 800d46a:	2d08      	cmp	r5, #8
 800d46c:	f10b 0b01 	add.w	fp, fp, #1
 800d470:	dd06      	ble.n	800d480 <__hexnan+0x100>
 800d472:	4544      	cmp	r4, r8
 800d474:	d9c1      	bls.n	800d3fa <__hexnan+0x7a>
 800d476:	2300      	movs	r3, #0
 800d478:	f844 3c04 	str.w	r3, [r4, #-4]
 800d47c:	2501      	movs	r5, #1
 800d47e:	3c04      	subs	r4, #4
 800d480:	6822      	ldr	r2, [r4, #0]
 800d482:	f000 000f 	and.w	r0, r0, #15
 800d486:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800d48a:	6020      	str	r0, [r4, #0]
 800d48c:	e7b5      	b.n	800d3fa <__hexnan+0x7a>
 800d48e:	2508      	movs	r5, #8
 800d490:	e7b3      	b.n	800d3fa <__hexnan+0x7a>
 800d492:	9b01      	ldr	r3, [sp, #4]
 800d494:	2b00      	cmp	r3, #0
 800d496:	d0dd      	beq.n	800d454 <__hexnan+0xd4>
 800d498:	f1c3 0320 	rsb	r3, r3, #32
 800d49c:	f04f 32ff 	mov.w	r2, #4294967295
 800d4a0:	40da      	lsrs	r2, r3
 800d4a2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800d4a6:	4013      	ands	r3, r2
 800d4a8:	f846 3c04 	str.w	r3, [r6, #-4]
 800d4ac:	e7d2      	b.n	800d454 <__hexnan+0xd4>
 800d4ae:	3f04      	subs	r7, #4
 800d4b0:	e7d0      	b.n	800d454 <__hexnan+0xd4>
 800d4b2:	2004      	movs	r0, #4
 800d4b4:	e7d5      	b.n	800d462 <__hexnan+0xe2>

0800d4b6 <__ascii_mbtowc>:
 800d4b6:	b082      	sub	sp, #8
 800d4b8:	b901      	cbnz	r1, 800d4bc <__ascii_mbtowc+0x6>
 800d4ba:	a901      	add	r1, sp, #4
 800d4bc:	b142      	cbz	r2, 800d4d0 <__ascii_mbtowc+0x1a>
 800d4be:	b14b      	cbz	r3, 800d4d4 <__ascii_mbtowc+0x1e>
 800d4c0:	7813      	ldrb	r3, [r2, #0]
 800d4c2:	600b      	str	r3, [r1, #0]
 800d4c4:	7812      	ldrb	r2, [r2, #0]
 800d4c6:	1e10      	subs	r0, r2, #0
 800d4c8:	bf18      	it	ne
 800d4ca:	2001      	movne	r0, #1
 800d4cc:	b002      	add	sp, #8
 800d4ce:	4770      	bx	lr
 800d4d0:	4610      	mov	r0, r2
 800d4d2:	e7fb      	b.n	800d4cc <__ascii_mbtowc+0x16>
 800d4d4:	f06f 0001 	mvn.w	r0, #1
 800d4d8:	e7f8      	b.n	800d4cc <__ascii_mbtowc+0x16>

0800d4da <_realloc_r>:
 800d4da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d4de:	4680      	mov	r8, r0
 800d4e0:	4615      	mov	r5, r2
 800d4e2:	460c      	mov	r4, r1
 800d4e4:	b921      	cbnz	r1, 800d4f0 <_realloc_r+0x16>
 800d4e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d4ea:	4611      	mov	r1, r2
 800d4ec:	f7fb ba76 	b.w	80089dc <_malloc_r>
 800d4f0:	b92a      	cbnz	r2, 800d4fe <_realloc_r+0x24>
 800d4f2:	f7fd fac1 	bl	800aa78 <_free_r>
 800d4f6:	2400      	movs	r4, #0
 800d4f8:	4620      	mov	r0, r4
 800d4fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d4fe:	f000 f8b2 	bl	800d666 <_malloc_usable_size_r>
 800d502:	4285      	cmp	r5, r0
 800d504:	4606      	mov	r6, r0
 800d506:	d802      	bhi.n	800d50e <_realloc_r+0x34>
 800d508:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800d50c:	d8f4      	bhi.n	800d4f8 <_realloc_r+0x1e>
 800d50e:	4629      	mov	r1, r5
 800d510:	4640      	mov	r0, r8
 800d512:	f7fb fa63 	bl	80089dc <_malloc_r>
 800d516:	4607      	mov	r7, r0
 800d518:	2800      	cmp	r0, #0
 800d51a:	d0ec      	beq.n	800d4f6 <_realloc_r+0x1c>
 800d51c:	42b5      	cmp	r5, r6
 800d51e:	462a      	mov	r2, r5
 800d520:	4621      	mov	r1, r4
 800d522:	bf28      	it	cs
 800d524:	4632      	movcs	r2, r6
 800d526:	f7ff fc59 	bl	800cddc <memcpy>
 800d52a:	4621      	mov	r1, r4
 800d52c:	4640      	mov	r0, r8
 800d52e:	f7fd faa3 	bl	800aa78 <_free_r>
 800d532:	463c      	mov	r4, r7
 800d534:	e7e0      	b.n	800d4f8 <_realloc_r+0x1e>
	...

0800d538 <_strtoul_l.constprop.0>:
 800d538:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d53c:	4e34      	ldr	r6, [pc, #208]	@ (800d610 <_strtoul_l.constprop.0+0xd8>)
 800d53e:	4686      	mov	lr, r0
 800d540:	460d      	mov	r5, r1
 800d542:	4628      	mov	r0, r5
 800d544:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d548:	5d37      	ldrb	r7, [r6, r4]
 800d54a:	f017 0708 	ands.w	r7, r7, #8
 800d54e:	d1f8      	bne.n	800d542 <_strtoul_l.constprop.0+0xa>
 800d550:	2c2d      	cmp	r4, #45	@ 0x2d
 800d552:	d12f      	bne.n	800d5b4 <_strtoul_l.constprop.0+0x7c>
 800d554:	782c      	ldrb	r4, [r5, #0]
 800d556:	2701      	movs	r7, #1
 800d558:	1c85      	adds	r5, r0, #2
 800d55a:	f033 0010 	bics.w	r0, r3, #16
 800d55e:	d109      	bne.n	800d574 <_strtoul_l.constprop.0+0x3c>
 800d560:	2c30      	cmp	r4, #48	@ 0x30
 800d562:	d12c      	bne.n	800d5be <_strtoul_l.constprop.0+0x86>
 800d564:	7828      	ldrb	r0, [r5, #0]
 800d566:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800d56a:	2858      	cmp	r0, #88	@ 0x58
 800d56c:	d127      	bne.n	800d5be <_strtoul_l.constprop.0+0x86>
 800d56e:	786c      	ldrb	r4, [r5, #1]
 800d570:	2310      	movs	r3, #16
 800d572:	3502      	adds	r5, #2
 800d574:	f04f 38ff 	mov.w	r8, #4294967295
 800d578:	2600      	movs	r6, #0
 800d57a:	fbb8 f8f3 	udiv	r8, r8, r3
 800d57e:	fb03 f908 	mul.w	r9, r3, r8
 800d582:	ea6f 0909 	mvn.w	r9, r9
 800d586:	4630      	mov	r0, r6
 800d588:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800d58c:	f1bc 0f09 	cmp.w	ip, #9
 800d590:	d81c      	bhi.n	800d5cc <_strtoul_l.constprop.0+0x94>
 800d592:	4664      	mov	r4, ip
 800d594:	42a3      	cmp	r3, r4
 800d596:	dd2a      	ble.n	800d5ee <_strtoul_l.constprop.0+0xb6>
 800d598:	f1b6 3fff 	cmp.w	r6, #4294967295
 800d59c:	d007      	beq.n	800d5ae <_strtoul_l.constprop.0+0x76>
 800d59e:	4580      	cmp	r8, r0
 800d5a0:	d322      	bcc.n	800d5e8 <_strtoul_l.constprop.0+0xb0>
 800d5a2:	d101      	bne.n	800d5a8 <_strtoul_l.constprop.0+0x70>
 800d5a4:	45a1      	cmp	r9, r4
 800d5a6:	db1f      	blt.n	800d5e8 <_strtoul_l.constprop.0+0xb0>
 800d5a8:	fb00 4003 	mla	r0, r0, r3, r4
 800d5ac:	2601      	movs	r6, #1
 800d5ae:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d5b2:	e7e9      	b.n	800d588 <_strtoul_l.constprop.0+0x50>
 800d5b4:	2c2b      	cmp	r4, #43	@ 0x2b
 800d5b6:	bf04      	itt	eq
 800d5b8:	782c      	ldrbeq	r4, [r5, #0]
 800d5ba:	1c85      	addeq	r5, r0, #2
 800d5bc:	e7cd      	b.n	800d55a <_strtoul_l.constprop.0+0x22>
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	d1d8      	bne.n	800d574 <_strtoul_l.constprop.0+0x3c>
 800d5c2:	2c30      	cmp	r4, #48	@ 0x30
 800d5c4:	bf0c      	ite	eq
 800d5c6:	2308      	moveq	r3, #8
 800d5c8:	230a      	movne	r3, #10
 800d5ca:	e7d3      	b.n	800d574 <_strtoul_l.constprop.0+0x3c>
 800d5cc:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800d5d0:	f1bc 0f19 	cmp.w	ip, #25
 800d5d4:	d801      	bhi.n	800d5da <_strtoul_l.constprop.0+0xa2>
 800d5d6:	3c37      	subs	r4, #55	@ 0x37
 800d5d8:	e7dc      	b.n	800d594 <_strtoul_l.constprop.0+0x5c>
 800d5da:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800d5de:	f1bc 0f19 	cmp.w	ip, #25
 800d5e2:	d804      	bhi.n	800d5ee <_strtoul_l.constprop.0+0xb6>
 800d5e4:	3c57      	subs	r4, #87	@ 0x57
 800d5e6:	e7d5      	b.n	800d594 <_strtoul_l.constprop.0+0x5c>
 800d5e8:	f04f 36ff 	mov.w	r6, #4294967295
 800d5ec:	e7df      	b.n	800d5ae <_strtoul_l.constprop.0+0x76>
 800d5ee:	1c73      	adds	r3, r6, #1
 800d5f0:	d106      	bne.n	800d600 <_strtoul_l.constprop.0+0xc8>
 800d5f2:	2322      	movs	r3, #34	@ 0x22
 800d5f4:	f8ce 3000 	str.w	r3, [lr]
 800d5f8:	4630      	mov	r0, r6
 800d5fa:	b932      	cbnz	r2, 800d60a <_strtoul_l.constprop.0+0xd2>
 800d5fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d600:	b107      	cbz	r7, 800d604 <_strtoul_l.constprop.0+0xcc>
 800d602:	4240      	negs	r0, r0
 800d604:	2a00      	cmp	r2, #0
 800d606:	d0f9      	beq.n	800d5fc <_strtoul_l.constprop.0+0xc4>
 800d608:	b106      	cbz	r6, 800d60c <_strtoul_l.constprop.0+0xd4>
 800d60a:	1e69      	subs	r1, r5, #1
 800d60c:	6011      	str	r1, [r2, #0]
 800d60e:	e7f5      	b.n	800d5fc <_strtoul_l.constprop.0+0xc4>
 800d610:	0800e069 	.word	0x0800e069

0800d614 <_strtoul_r>:
 800d614:	f7ff bf90 	b.w	800d538 <_strtoul_l.constprop.0>

0800d618 <__ascii_wctomb>:
 800d618:	4603      	mov	r3, r0
 800d61a:	4608      	mov	r0, r1
 800d61c:	b141      	cbz	r1, 800d630 <__ascii_wctomb+0x18>
 800d61e:	2aff      	cmp	r2, #255	@ 0xff
 800d620:	d904      	bls.n	800d62c <__ascii_wctomb+0x14>
 800d622:	228a      	movs	r2, #138	@ 0x8a
 800d624:	601a      	str	r2, [r3, #0]
 800d626:	f04f 30ff 	mov.w	r0, #4294967295
 800d62a:	4770      	bx	lr
 800d62c:	700a      	strb	r2, [r1, #0]
 800d62e:	2001      	movs	r0, #1
 800d630:	4770      	bx	lr
	...

0800d634 <fiprintf>:
 800d634:	b40e      	push	{r1, r2, r3}
 800d636:	b503      	push	{r0, r1, lr}
 800d638:	4601      	mov	r1, r0
 800d63a:	ab03      	add	r3, sp, #12
 800d63c:	4805      	ldr	r0, [pc, #20]	@ (800d654 <fiprintf+0x20>)
 800d63e:	f853 2b04 	ldr.w	r2, [r3], #4
 800d642:	6800      	ldr	r0, [r0, #0]
 800d644:	9301      	str	r3, [sp, #4]
 800d646:	f000 f83f 	bl	800d6c8 <_vfiprintf_r>
 800d64a:	b002      	add	sp, #8
 800d64c:	f85d eb04 	ldr.w	lr, [sp], #4
 800d650:	b003      	add	sp, #12
 800d652:	4770      	bx	lr
 800d654:	20000090 	.word	0x20000090

0800d658 <abort>:
 800d658:	b508      	push	{r3, lr}
 800d65a:	2006      	movs	r0, #6
 800d65c:	f000 f974 	bl	800d948 <raise>
 800d660:	2001      	movs	r0, #1
 800d662:	f7f5 fa9d 	bl	8002ba0 <_exit>

0800d666 <_malloc_usable_size_r>:
 800d666:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d66a:	1f18      	subs	r0, r3, #4
 800d66c:	2b00      	cmp	r3, #0
 800d66e:	bfbc      	itt	lt
 800d670:	580b      	ldrlt	r3, [r1, r0]
 800d672:	18c0      	addlt	r0, r0, r3
 800d674:	4770      	bx	lr

0800d676 <__sfputc_r>:
 800d676:	6893      	ldr	r3, [r2, #8]
 800d678:	3b01      	subs	r3, #1
 800d67a:	2b00      	cmp	r3, #0
 800d67c:	b410      	push	{r4}
 800d67e:	6093      	str	r3, [r2, #8]
 800d680:	da08      	bge.n	800d694 <__sfputc_r+0x1e>
 800d682:	6994      	ldr	r4, [r2, #24]
 800d684:	42a3      	cmp	r3, r4
 800d686:	db01      	blt.n	800d68c <__sfputc_r+0x16>
 800d688:	290a      	cmp	r1, #10
 800d68a:	d103      	bne.n	800d694 <__sfputc_r+0x1e>
 800d68c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d690:	f7fc ba4b 	b.w	8009b2a <__swbuf_r>
 800d694:	6813      	ldr	r3, [r2, #0]
 800d696:	1c58      	adds	r0, r3, #1
 800d698:	6010      	str	r0, [r2, #0]
 800d69a:	7019      	strb	r1, [r3, #0]
 800d69c:	4608      	mov	r0, r1
 800d69e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d6a2:	4770      	bx	lr

0800d6a4 <__sfputs_r>:
 800d6a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d6a6:	4606      	mov	r6, r0
 800d6a8:	460f      	mov	r7, r1
 800d6aa:	4614      	mov	r4, r2
 800d6ac:	18d5      	adds	r5, r2, r3
 800d6ae:	42ac      	cmp	r4, r5
 800d6b0:	d101      	bne.n	800d6b6 <__sfputs_r+0x12>
 800d6b2:	2000      	movs	r0, #0
 800d6b4:	e007      	b.n	800d6c6 <__sfputs_r+0x22>
 800d6b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d6ba:	463a      	mov	r2, r7
 800d6bc:	4630      	mov	r0, r6
 800d6be:	f7ff ffda 	bl	800d676 <__sfputc_r>
 800d6c2:	1c43      	adds	r3, r0, #1
 800d6c4:	d1f3      	bne.n	800d6ae <__sfputs_r+0xa>
 800d6c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d6c8 <_vfiprintf_r>:
 800d6c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d6cc:	460d      	mov	r5, r1
 800d6ce:	b09d      	sub	sp, #116	@ 0x74
 800d6d0:	4614      	mov	r4, r2
 800d6d2:	4698      	mov	r8, r3
 800d6d4:	4606      	mov	r6, r0
 800d6d6:	b118      	cbz	r0, 800d6e0 <_vfiprintf_r+0x18>
 800d6d8:	6a03      	ldr	r3, [r0, #32]
 800d6da:	b90b      	cbnz	r3, 800d6e0 <_vfiprintf_r+0x18>
 800d6dc:	f7fc f902 	bl	80098e4 <__sinit>
 800d6e0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d6e2:	07d9      	lsls	r1, r3, #31
 800d6e4:	d405      	bmi.n	800d6f2 <_vfiprintf_r+0x2a>
 800d6e6:	89ab      	ldrh	r3, [r5, #12]
 800d6e8:	059a      	lsls	r2, r3, #22
 800d6ea:	d402      	bmi.n	800d6f2 <_vfiprintf_r+0x2a>
 800d6ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d6ee:	f7fc fb66 	bl	8009dbe <__retarget_lock_acquire_recursive>
 800d6f2:	89ab      	ldrh	r3, [r5, #12]
 800d6f4:	071b      	lsls	r3, r3, #28
 800d6f6:	d501      	bpl.n	800d6fc <_vfiprintf_r+0x34>
 800d6f8:	692b      	ldr	r3, [r5, #16]
 800d6fa:	b99b      	cbnz	r3, 800d724 <_vfiprintf_r+0x5c>
 800d6fc:	4629      	mov	r1, r5
 800d6fe:	4630      	mov	r0, r6
 800d700:	f7fc fa52 	bl	8009ba8 <__swsetup_r>
 800d704:	b170      	cbz	r0, 800d724 <_vfiprintf_r+0x5c>
 800d706:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d708:	07dc      	lsls	r4, r3, #31
 800d70a:	d504      	bpl.n	800d716 <_vfiprintf_r+0x4e>
 800d70c:	f04f 30ff 	mov.w	r0, #4294967295
 800d710:	b01d      	add	sp, #116	@ 0x74
 800d712:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d716:	89ab      	ldrh	r3, [r5, #12]
 800d718:	0598      	lsls	r0, r3, #22
 800d71a:	d4f7      	bmi.n	800d70c <_vfiprintf_r+0x44>
 800d71c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d71e:	f7fc fb4f 	bl	8009dc0 <__retarget_lock_release_recursive>
 800d722:	e7f3      	b.n	800d70c <_vfiprintf_r+0x44>
 800d724:	2300      	movs	r3, #0
 800d726:	9309      	str	r3, [sp, #36]	@ 0x24
 800d728:	2320      	movs	r3, #32
 800d72a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d72e:	f8cd 800c 	str.w	r8, [sp, #12]
 800d732:	2330      	movs	r3, #48	@ 0x30
 800d734:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800d8e4 <_vfiprintf_r+0x21c>
 800d738:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d73c:	f04f 0901 	mov.w	r9, #1
 800d740:	4623      	mov	r3, r4
 800d742:	469a      	mov	sl, r3
 800d744:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d748:	b10a      	cbz	r2, 800d74e <_vfiprintf_r+0x86>
 800d74a:	2a25      	cmp	r2, #37	@ 0x25
 800d74c:	d1f9      	bne.n	800d742 <_vfiprintf_r+0x7a>
 800d74e:	ebba 0b04 	subs.w	fp, sl, r4
 800d752:	d00b      	beq.n	800d76c <_vfiprintf_r+0xa4>
 800d754:	465b      	mov	r3, fp
 800d756:	4622      	mov	r2, r4
 800d758:	4629      	mov	r1, r5
 800d75a:	4630      	mov	r0, r6
 800d75c:	f7ff ffa2 	bl	800d6a4 <__sfputs_r>
 800d760:	3001      	adds	r0, #1
 800d762:	f000 80a7 	beq.w	800d8b4 <_vfiprintf_r+0x1ec>
 800d766:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d768:	445a      	add	r2, fp
 800d76a:	9209      	str	r2, [sp, #36]	@ 0x24
 800d76c:	f89a 3000 	ldrb.w	r3, [sl]
 800d770:	2b00      	cmp	r3, #0
 800d772:	f000 809f 	beq.w	800d8b4 <_vfiprintf_r+0x1ec>
 800d776:	2300      	movs	r3, #0
 800d778:	f04f 32ff 	mov.w	r2, #4294967295
 800d77c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d780:	f10a 0a01 	add.w	sl, sl, #1
 800d784:	9304      	str	r3, [sp, #16]
 800d786:	9307      	str	r3, [sp, #28]
 800d788:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d78c:	931a      	str	r3, [sp, #104]	@ 0x68
 800d78e:	4654      	mov	r4, sl
 800d790:	2205      	movs	r2, #5
 800d792:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d796:	4853      	ldr	r0, [pc, #332]	@ (800d8e4 <_vfiprintf_r+0x21c>)
 800d798:	f7f2 fd1a 	bl	80001d0 <memchr>
 800d79c:	9a04      	ldr	r2, [sp, #16]
 800d79e:	b9d8      	cbnz	r0, 800d7d8 <_vfiprintf_r+0x110>
 800d7a0:	06d1      	lsls	r1, r2, #27
 800d7a2:	bf44      	itt	mi
 800d7a4:	2320      	movmi	r3, #32
 800d7a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d7aa:	0713      	lsls	r3, r2, #28
 800d7ac:	bf44      	itt	mi
 800d7ae:	232b      	movmi	r3, #43	@ 0x2b
 800d7b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d7b4:	f89a 3000 	ldrb.w	r3, [sl]
 800d7b8:	2b2a      	cmp	r3, #42	@ 0x2a
 800d7ba:	d015      	beq.n	800d7e8 <_vfiprintf_r+0x120>
 800d7bc:	9a07      	ldr	r2, [sp, #28]
 800d7be:	4654      	mov	r4, sl
 800d7c0:	2000      	movs	r0, #0
 800d7c2:	f04f 0c0a 	mov.w	ip, #10
 800d7c6:	4621      	mov	r1, r4
 800d7c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d7cc:	3b30      	subs	r3, #48	@ 0x30
 800d7ce:	2b09      	cmp	r3, #9
 800d7d0:	d94b      	bls.n	800d86a <_vfiprintf_r+0x1a2>
 800d7d2:	b1b0      	cbz	r0, 800d802 <_vfiprintf_r+0x13a>
 800d7d4:	9207      	str	r2, [sp, #28]
 800d7d6:	e014      	b.n	800d802 <_vfiprintf_r+0x13a>
 800d7d8:	eba0 0308 	sub.w	r3, r0, r8
 800d7dc:	fa09 f303 	lsl.w	r3, r9, r3
 800d7e0:	4313      	orrs	r3, r2
 800d7e2:	9304      	str	r3, [sp, #16]
 800d7e4:	46a2      	mov	sl, r4
 800d7e6:	e7d2      	b.n	800d78e <_vfiprintf_r+0xc6>
 800d7e8:	9b03      	ldr	r3, [sp, #12]
 800d7ea:	1d19      	adds	r1, r3, #4
 800d7ec:	681b      	ldr	r3, [r3, #0]
 800d7ee:	9103      	str	r1, [sp, #12]
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	bfbb      	ittet	lt
 800d7f4:	425b      	neglt	r3, r3
 800d7f6:	f042 0202 	orrlt.w	r2, r2, #2
 800d7fa:	9307      	strge	r3, [sp, #28]
 800d7fc:	9307      	strlt	r3, [sp, #28]
 800d7fe:	bfb8      	it	lt
 800d800:	9204      	strlt	r2, [sp, #16]
 800d802:	7823      	ldrb	r3, [r4, #0]
 800d804:	2b2e      	cmp	r3, #46	@ 0x2e
 800d806:	d10a      	bne.n	800d81e <_vfiprintf_r+0x156>
 800d808:	7863      	ldrb	r3, [r4, #1]
 800d80a:	2b2a      	cmp	r3, #42	@ 0x2a
 800d80c:	d132      	bne.n	800d874 <_vfiprintf_r+0x1ac>
 800d80e:	9b03      	ldr	r3, [sp, #12]
 800d810:	1d1a      	adds	r2, r3, #4
 800d812:	681b      	ldr	r3, [r3, #0]
 800d814:	9203      	str	r2, [sp, #12]
 800d816:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d81a:	3402      	adds	r4, #2
 800d81c:	9305      	str	r3, [sp, #20]
 800d81e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800d8f4 <_vfiprintf_r+0x22c>
 800d822:	7821      	ldrb	r1, [r4, #0]
 800d824:	2203      	movs	r2, #3
 800d826:	4650      	mov	r0, sl
 800d828:	f7f2 fcd2 	bl	80001d0 <memchr>
 800d82c:	b138      	cbz	r0, 800d83e <_vfiprintf_r+0x176>
 800d82e:	9b04      	ldr	r3, [sp, #16]
 800d830:	eba0 000a 	sub.w	r0, r0, sl
 800d834:	2240      	movs	r2, #64	@ 0x40
 800d836:	4082      	lsls	r2, r0
 800d838:	4313      	orrs	r3, r2
 800d83a:	3401      	adds	r4, #1
 800d83c:	9304      	str	r3, [sp, #16]
 800d83e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d842:	4829      	ldr	r0, [pc, #164]	@ (800d8e8 <_vfiprintf_r+0x220>)
 800d844:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d848:	2206      	movs	r2, #6
 800d84a:	f7f2 fcc1 	bl	80001d0 <memchr>
 800d84e:	2800      	cmp	r0, #0
 800d850:	d03f      	beq.n	800d8d2 <_vfiprintf_r+0x20a>
 800d852:	4b26      	ldr	r3, [pc, #152]	@ (800d8ec <_vfiprintf_r+0x224>)
 800d854:	bb1b      	cbnz	r3, 800d89e <_vfiprintf_r+0x1d6>
 800d856:	9b03      	ldr	r3, [sp, #12]
 800d858:	3307      	adds	r3, #7
 800d85a:	f023 0307 	bic.w	r3, r3, #7
 800d85e:	3308      	adds	r3, #8
 800d860:	9303      	str	r3, [sp, #12]
 800d862:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d864:	443b      	add	r3, r7
 800d866:	9309      	str	r3, [sp, #36]	@ 0x24
 800d868:	e76a      	b.n	800d740 <_vfiprintf_r+0x78>
 800d86a:	fb0c 3202 	mla	r2, ip, r2, r3
 800d86e:	460c      	mov	r4, r1
 800d870:	2001      	movs	r0, #1
 800d872:	e7a8      	b.n	800d7c6 <_vfiprintf_r+0xfe>
 800d874:	2300      	movs	r3, #0
 800d876:	3401      	adds	r4, #1
 800d878:	9305      	str	r3, [sp, #20]
 800d87a:	4619      	mov	r1, r3
 800d87c:	f04f 0c0a 	mov.w	ip, #10
 800d880:	4620      	mov	r0, r4
 800d882:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d886:	3a30      	subs	r2, #48	@ 0x30
 800d888:	2a09      	cmp	r2, #9
 800d88a:	d903      	bls.n	800d894 <_vfiprintf_r+0x1cc>
 800d88c:	2b00      	cmp	r3, #0
 800d88e:	d0c6      	beq.n	800d81e <_vfiprintf_r+0x156>
 800d890:	9105      	str	r1, [sp, #20]
 800d892:	e7c4      	b.n	800d81e <_vfiprintf_r+0x156>
 800d894:	fb0c 2101 	mla	r1, ip, r1, r2
 800d898:	4604      	mov	r4, r0
 800d89a:	2301      	movs	r3, #1
 800d89c:	e7f0      	b.n	800d880 <_vfiprintf_r+0x1b8>
 800d89e:	ab03      	add	r3, sp, #12
 800d8a0:	9300      	str	r3, [sp, #0]
 800d8a2:	462a      	mov	r2, r5
 800d8a4:	4b12      	ldr	r3, [pc, #72]	@ (800d8f0 <_vfiprintf_r+0x228>)
 800d8a6:	a904      	add	r1, sp, #16
 800d8a8:	4630      	mov	r0, r6
 800d8aa:	f7fb f9c3 	bl	8008c34 <_printf_float>
 800d8ae:	4607      	mov	r7, r0
 800d8b0:	1c78      	adds	r0, r7, #1
 800d8b2:	d1d6      	bne.n	800d862 <_vfiprintf_r+0x19a>
 800d8b4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d8b6:	07d9      	lsls	r1, r3, #31
 800d8b8:	d405      	bmi.n	800d8c6 <_vfiprintf_r+0x1fe>
 800d8ba:	89ab      	ldrh	r3, [r5, #12]
 800d8bc:	059a      	lsls	r2, r3, #22
 800d8be:	d402      	bmi.n	800d8c6 <_vfiprintf_r+0x1fe>
 800d8c0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d8c2:	f7fc fa7d 	bl	8009dc0 <__retarget_lock_release_recursive>
 800d8c6:	89ab      	ldrh	r3, [r5, #12]
 800d8c8:	065b      	lsls	r3, r3, #25
 800d8ca:	f53f af1f 	bmi.w	800d70c <_vfiprintf_r+0x44>
 800d8ce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d8d0:	e71e      	b.n	800d710 <_vfiprintf_r+0x48>
 800d8d2:	ab03      	add	r3, sp, #12
 800d8d4:	9300      	str	r3, [sp, #0]
 800d8d6:	462a      	mov	r2, r5
 800d8d8:	4b05      	ldr	r3, [pc, #20]	@ (800d8f0 <_vfiprintf_r+0x228>)
 800d8da:	a904      	add	r1, sp, #16
 800d8dc:	4630      	mov	r0, r6
 800d8de:	f7fb fc41 	bl	8009164 <_printf_i>
 800d8e2:	e7e4      	b.n	800d8ae <_vfiprintf_r+0x1e6>
 800d8e4:	0800e169 	.word	0x0800e169
 800d8e8:	0800e173 	.word	0x0800e173
 800d8ec:	08008c35 	.word	0x08008c35
 800d8f0:	0800d6a5 	.word	0x0800d6a5
 800d8f4:	0800e16f 	.word	0x0800e16f

0800d8f8 <_raise_r>:
 800d8f8:	291f      	cmp	r1, #31
 800d8fa:	b538      	push	{r3, r4, r5, lr}
 800d8fc:	4605      	mov	r5, r0
 800d8fe:	460c      	mov	r4, r1
 800d900:	d904      	bls.n	800d90c <_raise_r+0x14>
 800d902:	2316      	movs	r3, #22
 800d904:	6003      	str	r3, [r0, #0]
 800d906:	f04f 30ff 	mov.w	r0, #4294967295
 800d90a:	bd38      	pop	{r3, r4, r5, pc}
 800d90c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800d90e:	b112      	cbz	r2, 800d916 <_raise_r+0x1e>
 800d910:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d914:	b94b      	cbnz	r3, 800d92a <_raise_r+0x32>
 800d916:	4628      	mov	r0, r5
 800d918:	f000 f830 	bl	800d97c <_getpid_r>
 800d91c:	4622      	mov	r2, r4
 800d91e:	4601      	mov	r1, r0
 800d920:	4628      	mov	r0, r5
 800d922:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d926:	f000 b817 	b.w	800d958 <_kill_r>
 800d92a:	2b01      	cmp	r3, #1
 800d92c:	d00a      	beq.n	800d944 <_raise_r+0x4c>
 800d92e:	1c59      	adds	r1, r3, #1
 800d930:	d103      	bne.n	800d93a <_raise_r+0x42>
 800d932:	2316      	movs	r3, #22
 800d934:	6003      	str	r3, [r0, #0]
 800d936:	2001      	movs	r0, #1
 800d938:	e7e7      	b.n	800d90a <_raise_r+0x12>
 800d93a:	2100      	movs	r1, #0
 800d93c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800d940:	4620      	mov	r0, r4
 800d942:	4798      	blx	r3
 800d944:	2000      	movs	r0, #0
 800d946:	e7e0      	b.n	800d90a <_raise_r+0x12>

0800d948 <raise>:
 800d948:	4b02      	ldr	r3, [pc, #8]	@ (800d954 <raise+0xc>)
 800d94a:	4601      	mov	r1, r0
 800d94c:	6818      	ldr	r0, [r3, #0]
 800d94e:	f7ff bfd3 	b.w	800d8f8 <_raise_r>
 800d952:	bf00      	nop
 800d954:	20000090 	.word	0x20000090

0800d958 <_kill_r>:
 800d958:	b538      	push	{r3, r4, r5, lr}
 800d95a:	4d07      	ldr	r5, [pc, #28]	@ (800d978 <_kill_r+0x20>)
 800d95c:	2300      	movs	r3, #0
 800d95e:	4604      	mov	r4, r0
 800d960:	4608      	mov	r0, r1
 800d962:	4611      	mov	r1, r2
 800d964:	602b      	str	r3, [r5, #0]
 800d966:	f7f5 f90b 	bl	8002b80 <_kill>
 800d96a:	1c43      	adds	r3, r0, #1
 800d96c:	d102      	bne.n	800d974 <_kill_r+0x1c>
 800d96e:	682b      	ldr	r3, [r5, #0]
 800d970:	b103      	cbz	r3, 800d974 <_kill_r+0x1c>
 800d972:	6023      	str	r3, [r4, #0]
 800d974:	bd38      	pop	{r3, r4, r5, pc}
 800d976:	bf00      	nop
 800d978:	200008ac 	.word	0x200008ac

0800d97c <_getpid_r>:
 800d97c:	f7f5 b8f8 	b.w	8002b70 <_getpid>

0800d980 <_init>:
 800d980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d982:	bf00      	nop
 800d984:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d986:	bc08      	pop	{r3}
 800d988:	469e      	mov	lr, r3
 800d98a:	4770      	bx	lr

0800d98c <_fini>:
 800d98c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d98e:	bf00      	nop
 800d990:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d992:	bc08      	pop	{r3}
 800d994:	469e      	mov	lr, r3
 800d996:	4770      	bx	lr
